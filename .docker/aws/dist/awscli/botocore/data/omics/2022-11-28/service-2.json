{
  "version":"2.0",
  "metadata":{
    "apiVersion":"2022-11-28",
    "auth":["aws.auth#sigv4"],
    "endpointPrefix":"omics",
    "protocol":"rest-json",
    "protocols":["rest-json"],
    "serviceFullName":"Amazon Omics",
    "serviceId":"Omics",
    "signatureVersion":"v4",
    "signingName":"omics",
    "uid":"omics-2022-11-28"
  },
  "operations":{
    "AbortMultipartReadSetUpload":{
      "name":"AbortMultipartReadSetUpload",
      "http":{
        "method":"DELETE",
        "requestUri":"/sequencestore/{sequenceStoreId}/upload/{uploadId}/abort",
        "responseCode":200
      },
      "input":{"shape":"AbortMultipartReadSetUploadRequest"},
      "output":{"shape":"AbortMultipartReadSetUploadResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"NotSupportedOperationException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Stops a multipart read set upload into a sequence store and returns a response with no body if the operation is successful. To confirm that a multipart read set upload has been stopped, use the <code>ListMultipartReadSetUploads</code> API operation to view all active multipart read set uploads.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "AcceptShare":{
      "name":"AcceptShare",
      "http":{
        "method":"POST",
        "requestUri":"/share/{shareId}",
        "responseCode":200
      },
      "input":{"shape":"AcceptShareRequest"},
      "output":{"shape":"AcceptShareResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Accept a resource share request.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "BatchDeleteReadSet":{
      "name":"BatchDeleteReadSet",
      "http":{
        "method":"POST",
        "requestUri":"/sequencestore/{sequenceStoreId}/readset/batch/delete",
        "responseCode":200
      },
      "input":{"shape":"BatchDeleteReadSetRequest"},
      "output":{"shape":"BatchDeleteReadSetResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Deletes one or more read sets. If the operation is successful, it returns a response with no body. If there is an error with deleting one of the read sets, the operation returns an error list. If the operation successfully deletes only a subset of files, it will return an error list for the remaining files that fail to be deleted. There is a limit of 100 read sets that can be deleted in each <code>BatchDeleteReadSet</code> API call.</p>",
      "endpoint":{"hostPrefix":"control-storage-"},
      "idempotent":true
    },
    "CancelAnnotationImportJob":{
      "name":"CancelAnnotationImportJob",
      "http":{
        "method":"DELETE",
        "requestUri":"/import/annotation/{jobId}",
        "responseCode":200
      },
      "input":{"shape":"CancelAnnotationImportRequest"},
      "output":{"shape":"CancelAnnotationImportResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Cancels an annotation import job.</p>",
      "endpoint":{"hostPrefix":"analytics-"},
      "idempotent":true
    },
    "CancelRun":{
      "name":"CancelRun",
      "http":{
        "method":"POST",
        "requestUri":"/run/{id}/cancel",
        "responseCode":202
      },
      "input":{"shape":"CancelRunRequest"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Cancels a run using its ID and returns a response with no body if the operation is successful. To confirm that the run has been cancelled, use the <code>ListRuns</code> API operation to check that it is no longer listed.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "CancelVariantImportJob":{
      "name":"CancelVariantImportJob",
      "http":{
        "method":"DELETE",
        "requestUri":"/import/variant/{jobId}",
        "responseCode":200
      },
      "input":{"shape":"CancelVariantImportRequest"},
      "output":{"shape":"CancelVariantImportResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Cancels a variant import job.</p>",
      "endpoint":{"hostPrefix":"analytics-"},
      "idempotent":true
    },
    "CompleteMultipartReadSetUpload":{
      "name":"CompleteMultipartReadSetUpload",
      "http":{
        "method":"POST",
        "requestUri":"/sequencestore/{sequenceStoreId}/upload/{uploadId}/complete",
        "responseCode":200
      },
      "input":{"shape":"CompleteMultipartReadSetUploadRequest"},
      "output":{"shape":"CompleteMultipartReadSetUploadResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"NotSupportedOperationException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Completes a multipart read set upload into a sequence store after you have initiated the upload process with <code>CreateMultipartReadSetUpload</code> and uploaded all read set parts using <code>UploadReadSetPart</code>. You must specify the parts you uploaded using the parts parameter. If the operation is successful, it returns the read set ID(s) of the uploaded read set(s).</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/synchronous-uploads.html\">Direct upload to a sequence store</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"storage-"}
    },
    "CreateAnnotationStore":{
      "name":"CreateAnnotationStore",
      "http":{
        "method":"POST",
        "requestUri":"/annotationStore",
        "responseCode":200
      },
      "input":{"shape":"CreateAnnotationStoreRequest"},
      "output":{"shape":"CreateAnnotationStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Creates an annotation store.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "CreateAnnotationStoreVersion":{
      "name":"CreateAnnotationStoreVersion",
      "http":{
        "method":"POST",
        "requestUri":"/annotationStore/{name}/version",
        "responseCode":200
      },
      "input":{"shape":"CreateAnnotationStoreVersionRequest"},
      "output":{"shape":"CreateAnnotationStoreVersionResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p> Creates a new version of an annotation store. </p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "CreateMultipartReadSetUpload":{
      "name":"CreateMultipartReadSetUpload",
      "http":{
        "method":"POST",
        "requestUri":"/sequencestore/{sequenceStoreId}/upload",
        "responseCode":200
      },
      "input":{"shape":"CreateMultipartReadSetUploadRequest"},
      "output":{"shape":"CreateMultipartReadSetUploadResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"NotSupportedOperationException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Initiates a multipart read set upload for uploading partitioned source files into a sequence store. You can directly import source files from an EC2 instance and other local compute, or from an S3 bucket. To separate these source files into parts, use the <code>split</code> operation. Each part cannot be larger than 100 MB. If the operation is successful, it provides an <code>uploadId</code> which is required by the <code>UploadReadSetPart</code> API operation to upload parts into a sequence store.</p> <p>To continue uploading a multipart read set into your sequence store, you must use the <code>UploadReadSetPart</code> API operation to upload each part individually following the steps below:</p> <ul> <li> <p>Specify the <code>uploadId</code> obtained from the previous call to <code>CreateMultipartReadSetUpload</code>.</p> </li> <li> <p>Upload parts for that <code>uploadId</code>.</p> </li> </ul> <p>When you have finished uploading parts, use the <code>CompleteMultipartReadSetUpload</code> API to complete the multipart read set upload and to retrieve the final read set IDs in the response.</p> <p>To learn more about creating parts and the <code>split</code> operation, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/synchronous-uploads.html\">Direct upload to a sequence store</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "CreateReferenceStore":{
      "name":"CreateReferenceStore",
      "http":{
        "method":"POST",
        "requestUri":"/referencestore",
        "responseCode":200
      },
      "input":{"shape":"CreateReferenceStoreRequest"},
      "output":{"shape":"CreateReferenceStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Creates a reference store and returns metadata in JSON format. Reference stores are used to store reference genomes in FASTA format. A reference store is created when the first reference genome is imported. To import additional reference genomes from an Amazon S3 bucket, use the <code>StartReferenceImportJob</code> API operation. </p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/create-reference-store.html\">Creating a HealthOmics reference store</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "CreateRunCache":{
      "name":"CreateRunCache",
      "http":{
        "method":"POST",
        "requestUri":"/runCache",
        "responseCode":201
      },
      "input":{"shape":"CreateRunCacheRequest"},
      "output":{"shape":"CreateRunCacheResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Creates a run cache to store and reference task outputs from completed private runs. Specify an Amazon S3 location where Amazon Web Services HealthOmics saves the cached data. This data must be immediately accessible and not in an archived state. You can save intermediate task files to a run cache if they are declared as task outputs in the workflow definition file.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/workflows-call-caching.html\">Call caching</a> and <a href=\"https://docs.aws.amazon.com/omics/latest/dev/workflow-cache-create.html\">Creating a run cache</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "CreateRunGroup":{
      "name":"CreateRunGroup",
      "http":{
        "method":"POST",
        "requestUri":"/runGroup",
        "responseCode":201
      },
      "input":{"shape":"CreateRunGroupRequest"},
      "output":{"shape":"CreateRunGroupResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Creates a run group to limit the compute resources for the runs that are added to the group. Returns an ARN, ID, and tags for the run group.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "CreateSequenceStore":{
      "name":"CreateSequenceStore",
      "http":{
        "method":"POST",
        "requestUri":"/sequencestore",
        "responseCode":200
      },
      "input":{"shape":"CreateSequenceStoreRequest"},
      "output":{"shape":"CreateSequenceStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Creates a sequence store and returns its metadata. Sequence stores are used to store sequence data files called read sets that are saved in FASTQ, BAM, uBAM, or CRAM formats. For aligned formats (BAM and CRAM), a sequence store can only use one reference genome. For unaligned formats (FASTQ and uBAM), a reference genome is not required. You can create multiple sequence stores per region per account. </p> <p>The following are optional parameters you can specify for your sequence store:</p> <ul> <li> <p>Use <code>s3AccessConfig</code> to configure your sequence store with S3 access logs (recommended).</p> </li> <li> <p>Use <code>sseConfig</code> to define your own KMS key for encryption.</p> </li> <li> <p>Use <code>eTagAlgorithmFamily</code> to define which algorithm to use for the HealthOmics eTag on objects.</p> </li> <li> <p>Use <code>fallbackLocation</code> to define a backup location for storing files that have failed a direct upload.</p> </li> <li> <p>Use <code>propagatedSetLevelTags</code> to configure tags that propagate to all objects in your store.</p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/create-sequence-store.html\">Creating a HealthOmics sequence store</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "CreateShare":{
      "name":"CreateShare",
      "http":{
        "method":"POST",
        "requestUri":"/share",
        "responseCode":200
      },
      "input":{"shape":"CreateShareRequest"},
      "output":{"shape":"CreateShareResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Creates a cross-account shared resource. The resource owner makes an offer to share the resource with the principal subscriber (an AWS user with a different account than the resource owner).</p> <p>The following resources support cross-account sharing:</p> <ul> <li> <p>HealthOmics variant stores</p> </li> <li> <p>HealthOmics annotation stores</p> </li> <li> <p>Private workflows</p> </li> </ul>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "CreateVariantStore":{
      "name":"CreateVariantStore",
      "http":{
        "method":"POST",
        "requestUri":"/variantStore",
        "responseCode":200
      },
      "input":{"shape":"CreateVariantStoreRequest"},
      "output":{"shape":"CreateVariantStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Creates a variant store.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "CreateWorkflow":{
      "name":"CreateWorkflow",
      "http":{
        "method":"POST",
        "requestUri":"/workflow",
        "responseCode":201
      },
      "input":{"shape":"CreateWorkflowRequest"},
      "output":{"shape":"CreateWorkflowResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Creates a private workflow. Before you create a private workflow, you must create and configure these required resources:</p> <ul> <li> <p> <i>Workflow definition files</i>: Define your workflow in one or more workflow definition files, written in WDL, Nextflow, or CWL. The workflow definition specifies the inputs and outputs for runs that use the workflow. It also includes specifications for the runs and run tasks for your workflow, including compute and memory requirements. The workflow definition file must be in .zip format.</p> </li> <li> <p>(Optional) <i>Parameter template</i>: You can create a parameter template file that defines the run parameters, or Amazon Web Services HealthOmics can generate the parameter template for you.</p> </li> <li> <p> <i>ECR container images</i>: Create container images for the workflow in a private ECR repository, or synchronize images from a supported upstream registry with your Amazon ECR private repository.</p> </li> <li> <p>(Optional) <i>Sentieon licenses</i>: Request a Sentieon license if using the Sentieon software in a private workflow.</p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/creating-private-workflows.html\">Creating or updating a private workflow in Amazon Web Services HealthOmics</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "CreateWorkflowVersion":{
      "name":"CreateWorkflowVersion",
      "http":{
        "method":"POST",
        "requestUri":"/workflow/{workflowId}/version",
        "responseCode":201
      },
      "input":{"shape":"CreateWorkflowVersionRequest"},
      "output":{"shape":"CreateWorkflowVersionResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Creates a new workflow version for the workflow that you specify with the <code>workflowId</code> parameter.</p> <p>When you create a new version of a workflow, you need to specify the configuration for the new version. It doesn't inherit any configuration values from the workflow.</p> <p>Provide a version name that is unique for this workflow. You cannot change the name after HealthOmics creates the version.</p> <note> <p>Don't include any personally identifiable information (PII) in the version name. Version names appear in the workflow version ARN.</p> </note> <p>For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/workflow-versions.html\">Workflow versioning in Amazon Web Services HealthOmics</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"workflows-"},
      "idempotent":true
    },
    "DeleteAnnotationStore":{
      "name":"DeleteAnnotationStore",
      "http":{
        "method":"DELETE",
        "requestUri":"/annotationStore/{name}",
        "responseCode":200
      },
      "input":{"shape":"DeleteAnnotationStoreRequest"},
      "output":{"shape":"DeleteAnnotationStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Deletes an annotation store.</p>",
      "endpoint":{"hostPrefix":"analytics-"},
      "idempotent":true
    },
    "DeleteAnnotationStoreVersions":{
      "name":"DeleteAnnotationStoreVersions",
      "http":{
        "method":"POST",
        "requestUri":"/annotationStore/{name}/versions/delete",
        "responseCode":200
      },
      "input":{"shape":"DeleteAnnotationStoreVersionsRequest"},
      "output":{"shape":"DeleteAnnotationStoreVersionsResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p> Deletes one or multiple versions of an annotation store. </p>",
      "endpoint":{"hostPrefix":"analytics-"},
      "idempotent":true
    },
    "DeleteReference":{
      "name":"DeleteReference",
      "http":{
        "method":"DELETE",
        "requestUri":"/referencestore/{referenceStoreId}/reference/{id}",
        "responseCode":200
      },
      "input":{"shape":"DeleteReferenceRequest"},
      "output":{"shape":"DeleteReferenceResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Deletes a reference genome and returns a response with no body if the operation is successful. The read set associated with the reference genome must first be deleted before deleting the reference genome. After the reference genome is deleted, you can delete the reference store using the <code>DeleteReferenceStore</code> API operation.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/deleting-reference-and-sequence-stores.html\">Deleting HealthOmics reference and sequence stores</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"control-storage-"},
      "idempotent":true
    },
    "DeleteReferenceStore":{
      "name":"DeleteReferenceStore",
      "http":{
        "method":"DELETE",
        "requestUri":"/referencestore/{id}",
        "responseCode":200
      },
      "input":{"shape":"DeleteReferenceStoreRequest"},
      "output":{"shape":"DeleteReferenceStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Deletes a reference store and returns a response with no body if the operation is successful. You can only delete a reference store when it does not contain any reference genomes. To empty a reference store, use <code>DeleteReference</code>.</p> <p>For more information about your workflow status, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/deleting-reference-and-sequence-stores.html\">Deleting HealthOmics reference and sequence stores</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"control-storage-"},
      "idempotent":true
    },
    "DeleteRun":{
      "name":"DeleteRun",
      "http":{
        "method":"DELETE",
        "requestUri":"/run/{id}",
        "responseCode":202
      },
      "input":{"shape":"DeleteRunRequest"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Deletes a run and returns a response with no body if the operation is successful. You can only delete a run that has reached a <code>COMPLETED</code>, <code>FAILED</code>, or <code>CANCELLED</code> stage. A completed run has delivered an output, or was cancelled and resulted in no output. When you delete a run, only the metadata associated with the run is deleted. The run outputs remain in Amazon S3 and logs remain in CloudWatch.</p> <p>To verify that the workflow is deleted:</p> <ul> <li> <p>Use <code>ListRuns</code> to confirm the workflow no longer appears in the list.</p> </li> <li> <p>Use <code>GetRun</code> to verify the workflow cannot be found.</p> </li> </ul>",
      "endpoint":{"hostPrefix":"workflows-"},
      "idempotent":true
    },
    "DeleteRunCache":{
      "name":"DeleteRunCache",
      "http":{
        "method":"DELETE",
        "requestUri":"/runCache/{id}",
        "responseCode":202
      },
      "input":{"shape":"DeleteRunCacheRequest"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Deletes a run cache and returns a response with no body if the operation is successful. This action removes the cache metadata stored in the service account, but does not delete the data in Amazon S3. You can access the cache data in Amazon S3, for inspection or to troubleshoot issues. You can remove old cache data using standard S3 <code>Delete</code> operations. </p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/workflow-cache-delete.html\">Deleting a run cache</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"workflows-"},
      "idempotent":true
    },
    "DeleteRunGroup":{
      "name":"DeleteRunGroup",
      "http":{
        "method":"DELETE",
        "requestUri":"/runGroup/{id}",
        "responseCode":202
      },
      "input":{"shape":"DeleteRunGroupRequest"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Deletes a run group and returns a response with no body if the operation is successful.</p> <p>To verify that the run group is deleted:</p> <ul> <li> <p>Use <code>ListRunGroups</code> to confirm the workflow no longer appears in the list.</p> </li> <li> <p>Use <code>GetRunGroup</code> to verify the workflow cannot be found.</p> </li> </ul>",
      "endpoint":{"hostPrefix":"workflows-"},
      "idempotent":true
    },
    "DeleteS3AccessPolicy":{
      "name":"DeleteS3AccessPolicy",
      "http":{
        "method":"DELETE",
        "requestUri":"/s3accesspolicy/{s3AccessPointArn}",
        "responseCode":200
      },
      "input":{"shape":"DeleteS3AccessPolicyRequest"},
      "output":{"shape":"DeleteS3AccessPolicyResponse"},
      "errors":[
        {"shape":"NotSupportedOperationException"},
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Deletes an access policy for the specified store.</p>",
      "endpoint":{"hostPrefix":"control-storage-"},
      "idempotent":true
    },
    "DeleteSequenceStore":{
      "name":"DeleteSequenceStore",
      "http":{
        "method":"DELETE",
        "requestUri":"/sequencestore/{id}",
        "responseCode":200
      },
      "input":{"shape":"DeleteSequenceStoreRequest"},
      "output":{"shape":"DeleteSequenceStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Deletes a sequence store and returns a response with no body if the operation is successful. You can only delete a sequence store when it does not contain any read sets.</p> <p>Use the <code>BatchDeleteReadSet</code> API operation to ensure that all read sets in the sequence store are deleted. When a sequence store is deleted, all tags associated with the store are also deleted.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/deleting-reference-and-sequence-stores.html\">Deleting HealthOmics reference and sequence stores</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"control-storage-"},
      "idempotent":true
    },
    "DeleteShare":{
      "name":"DeleteShare",
      "http":{
        "method":"DELETE",
        "requestUri":"/share/{shareId}",
        "responseCode":200
      },
      "input":{"shape":"DeleteShareRequest"},
      "output":{"shape":"DeleteShareResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Deletes a resource share. If you are the resource owner, the subscriber will no longer have access to the shared resource. If you are the subscriber, this operation deletes your access to the share.</p>",
      "endpoint":{"hostPrefix":"analytics-"},
      "idempotent":true
    },
    "DeleteVariantStore":{
      "name":"DeleteVariantStore",
      "http":{
        "method":"DELETE",
        "requestUri":"/variantStore/{name}",
        "responseCode":200
      },
      "input":{"shape":"DeleteVariantStoreRequest"},
      "output":{"shape":"DeleteVariantStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Deletes a variant store.</p>",
      "endpoint":{"hostPrefix":"analytics-"},
      "idempotent":true
    },
    "DeleteWorkflow":{
      "name":"DeleteWorkflow",
      "http":{
        "method":"DELETE",
        "requestUri":"/workflow/{id}",
        "responseCode":202
      },
      "input":{"shape":"DeleteWorkflowRequest"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Deletes a workflow by specifying its ID. This operation returns a response with no body if the deletion is successful.</p> <p>To verify that the workflow is deleted:</p> <ul> <li> <p>Use <code>ListWorkflows</code> to confirm the workflow no longer appears in the list.</p> </li> <li> <p>Use <code>GetWorkflow</code> to verify the workflow cannot be found.</p> </li> </ul>",
      "endpoint":{"hostPrefix":"workflows-"},
      "idempotent":true
    },
    "DeleteWorkflowVersion":{
      "name":"DeleteWorkflowVersion",
      "http":{
        "method":"DELETE",
        "requestUri":"/workflow/{workflowId}/version/{versionName}",
        "responseCode":202
      },
      "input":{"shape":"DeleteWorkflowVersionRequest"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Deletes a workflow version. Deleting a workflow version doesn't affect any ongoing runs that are using the workflow version.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/workflow-versions.html\">Workflow versioning in Amazon Web Services HealthOmics</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"workflows-"},
      "idempotent":true
    },
    "GetAnnotationImportJob":{
      "name":"GetAnnotationImportJob",
      "http":{
        "method":"GET",
        "requestUri":"/import/annotation/{jobId}",
        "responseCode":200
      },
      "input":{"shape":"GetAnnotationImportRequest"},
      "output":{"shape":"GetAnnotationImportResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Gets information about an annotation import job.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "GetAnnotationStore":{
      "name":"GetAnnotationStore",
      "http":{
        "method":"GET",
        "requestUri":"/annotationStore/{name}",
        "responseCode":200
      },
      "input":{"shape":"GetAnnotationStoreRequest"},
      "output":{"shape":"GetAnnotationStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Gets information about an annotation store.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "GetAnnotationStoreVersion":{
      "name":"GetAnnotationStoreVersion",
      "http":{
        "method":"GET",
        "requestUri":"/annotationStore/{name}/version/{versionName}",
        "responseCode":200
      },
      "input":{"shape":"GetAnnotationStoreVersionRequest"},
      "output":{"shape":"GetAnnotationStoreVersionResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p> Retrieves the metadata for an annotation store version. </p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "GetReadSet":{
      "name":"GetReadSet",
      "http":{
        "method":"GET",
        "requestUri":"/sequencestore/{sequenceStoreId}/readset/{id}",
        "responseCode":200
      },
      "input":{"shape":"GetReadSetRequest"},
      "output":{"shape":"GetReadSetResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"RangeNotSatisfiableException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves detailed information from parts of a read set and returns the read set in the same format that it was uploaded. You must have read sets uploaded to your sequence store in order to run this operation.</p>",
      "endpoint":{"hostPrefix":"storage-"}
    },
    "GetReadSetActivationJob":{
      "name":"GetReadSetActivationJob",
      "http":{
        "method":"GET",
        "requestUri":"/sequencestore/{sequenceStoreId}/activationjob/{id}",
        "responseCode":200
      },
      "input":{"shape":"GetReadSetActivationJobRequest"},
      "output":{"shape":"GetReadSetActivationJobResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Returns detailed information about the status of a read set activation job in JSON format.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "GetReadSetExportJob":{
      "name":"GetReadSetExportJob",
      "http":{
        "method":"GET",
        "requestUri":"/sequencestore/{sequenceStoreId}/exportjob/{id}",
        "responseCode":200
      },
      "input":{"shape":"GetReadSetExportJobRequest"},
      "output":{"shape":"GetReadSetExportJobResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves status information about a read set export job and returns the data in JSON format. Use this operation to actively monitor the progress of an export job.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "GetReadSetImportJob":{
      "name":"GetReadSetImportJob",
      "http":{
        "method":"GET",
        "requestUri":"/sequencestore/{sequenceStoreId}/importjob/{id}",
        "responseCode":200
      },
      "input":{"shape":"GetReadSetImportJobRequest"},
      "output":{"shape":"GetReadSetImportJobResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Gets detailed and status information about a read set import job and returns the data in JSON format.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "GetReadSetMetadata":{
      "name":"GetReadSetMetadata",
      "http":{
        "method":"GET",
        "requestUri":"/sequencestore/{sequenceStoreId}/readset/{id}/metadata",
        "responseCode":200
      },
      "input":{"shape":"GetReadSetMetadataRequest"},
      "output":{"shape":"GetReadSetMetadataResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves the metadata for a read set from a sequence store in JSON format. This operation does not return tags. To retrieve the list of tags for a read set, use the <code>ListTagsForResource</code> API operation.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "GetReference":{
      "name":"GetReference",
      "http":{
        "method":"GET",
        "requestUri":"/referencestore/{referenceStoreId}/reference/{id}",
        "responseCode":200
      },
      "input":{"shape":"GetReferenceRequest"},
      "output":{"shape":"GetReferenceResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"RangeNotSatisfiableException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Downloads parts of data from a reference genome and returns the reference file in the same format that it was uploaded.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/create-reference-store.html\">Creating a HealthOmics reference store</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"storage-"}
    },
    "GetReferenceImportJob":{
      "name":"GetReferenceImportJob",
      "http":{
        "method":"GET",
        "requestUri":"/referencestore/{referenceStoreId}/importjob/{id}",
        "responseCode":200
      },
      "input":{"shape":"GetReferenceImportJobRequest"},
      "output":{"shape":"GetReferenceImportJobResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Monitors the status of a reference import job. This operation can be called after calling the <code>StartReferenceImportJob</code> operation.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "GetReferenceMetadata":{
      "name":"GetReferenceMetadata",
      "http":{
        "method":"GET",
        "requestUri":"/referencestore/{referenceStoreId}/reference/{id}/metadata",
        "responseCode":200
      },
      "input":{"shape":"GetReferenceMetadataRequest"},
      "output":{"shape":"GetReferenceMetadataResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves metadata for a reference genome. This operation returns the number of parts, part size, and MD5 of an entire file. This operation does not return tags. To retrieve the list of tags for a read set, use the <code>ListTagsForResource</code> API operation.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "GetReferenceStore":{
      "name":"GetReferenceStore",
      "http":{
        "method":"GET",
        "requestUri":"/referencestore/{id}",
        "responseCode":200
      },
      "input":{"shape":"GetReferenceStoreRequest"},
      "output":{"shape":"GetReferenceStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Gets information about a reference store.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "GetRun":{
      "name":"GetRun",
      "http":{
        "method":"GET",
        "requestUri":"/run/{id}",
        "responseCode":200
      },
      "input":{"shape":"GetRunRequest"},
      "output":{"shape":"GetRunResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Gets detailed information about a specific run using its ID.</p> <p>Amazon Web Services HealthOmics stores a configurable number of runs, as determined by service limits, that are available to the console and API. If <code>GetRun</code> does not return the requested run, you can find all run logs in the CloudWatch logs. For more information about viewing the run logs, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/monitoring-cloudwatch-logs.html\">CloudWatch logs</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "GetRunCache":{
      "name":"GetRunCache",
      "http":{
        "method":"GET",
        "requestUri":"/runCache/{id}",
        "responseCode":200
      },
      "input":{"shape":"GetRunCacheRequest"},
      "output":{"shape":"GetRunCacheResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves detailed information about the specified run cache using its ID.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/workflows-call-caching.html\">Call caching for Amazon Web Services HealthOmics runs</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "GetRunGroup":{
      "name":"GetRunGroup",
      "http":{
        "method":"GET",
        "requestUri":"/runGroup/{id}",
        "responseCode":200
      },
      "input":{"shape":"GetRunGroupRequest"},
      "output":{"shape":"GetRunGroupResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Gets information about a run group and returns its metadata.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "GetRunTask":{
      "name":"GetRunTask",
      "http":{
        "method":"GET",
        "requestUri":"/run/{id}/task/{taskId}",
        "responseCode":200
      },
      "input":{"shape":"GetRunTaskRequest"},
      "output":{"shape":"GetRunTaskResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Gets detailed information about a run task using its ID.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "GetS3AccessPolicy":{
      "name":"GetS3AccessPolicy",
      "http":{
        "method":"GET",
        "requestUri":"/s3accesspolicy/{s3AccessPointArn}",
        "responseCode":200
      },
      "input":{"shape":"GetS3AccessPolicyRequest"},
      "output":{"shape":"GetS3AccessPolicyResponse"},
      "errors":[
        {"shape":"NotSupportedOperationException"},
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves details about an access policy on a given store.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "GetSequenceStore":{
      "name":"GetSequenceStore",
      "http":{
        "method":"GET",
        "requestUri":"/sequencestore/{id}",
        "responseCode":200
      },
      "input":{"shape":"GetSequenceStoreRequest"},
      "output":{"shape":"GetSequenceStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves metadata for a sequence store using its ID and returns it in JSON format.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "GetShare":{
      "name":"GetShare",
      "http":{
        "method":"GET",
        "requestUri":"/share/{shareId}",
        "responseCode":200
      },
      "input":{"shape":"GetShareRequest"},
      "output":{"shape":"GetShareResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Retrieves the metadata for the specified resource share.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "GetVariantImportJob":{
      "name":"GetVariantImportJob",
      "http":{
        "method":"GET",
        "requestUri":"/import/variant/{jobId}",
        "responseCode":200
      },
      "input":{"shape":"GetVariantImportRequest"},
      "output":{"shape":"GetVariantImportResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Gets information about a variant import job.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "GetVariantStore":{
      "name":"GetVariantStore",
      "http":{
        "method":"GET",
        "requestUri":"/variantStore/{name}",
        "responseCode":200
      },
      "input":{"shape":"GetVariantStoreRequest"},
      "output":{"shape":"GetVariantStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Gets information about a variant store.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "GetWorkflow":{
      "name":"GetWorkflow",
      "http":{
        "method":"GET",
        "requestUri":"/workflow/{id}",
        "responseCode":200
      },
      "input":{"shape":"GetWorkflowRequest"},
      "output":{"shape":"GetWorkflowResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Gets all information about a workflow using its ID.</p> <p>If a workflow is shared with you, you cannot export the workflow.</p> <p>For more information about your workflow status, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/using-get-workflow.html\">Verify the workflow status</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "GetWorkflowVersion":{
      "name":"GetWorkflowVersion",
      "http":{
        "method":"GET",
        "requestUri":"/workflow/{workflowId}/version/{versionName}",
        "responseCode":200
      },
      "input":{"shape":"GetWorkflowVersionRequest"},
      "output":{"shape":"GetWorkflowVersionResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Gets information about a workflow version. For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/workflow-versions.html\">Workflow versioning in Amazon Web Services HealthOmics</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "ListAnnotationImportJobs":{
      "name":"ListAnnotationImportJobs",
      "http":{
        "method":"POST",
        "requestUri":"/import/annotations",
        "responseCode":200
      },
      "input":{"shape":"ListAnnotationImportJobsRequest"},
      "output":{"shape":"ListAnnotationImportJobsResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Retrieves a list of annotation import jobs.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "ListAnnotationStoreVersions":{
      "name":"ListAnnotationStoreVersions",
      "http":{
        "method":"POST",
        "requestUri":"/annotationStore/{name}/versions",
        "responseCode":200
      },
      "input":{"shape":"ListAnnotationStoreVersionsRequest"},
      "output":{"shape":"ListAnnotationStoreVersionsResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p> Lists the versions of an annotation store. </p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "ListAnnotationStores":{
      "name":"ListAnnotationStores",
      "http":{
        "method":"POST",
        "requestUri":"/annotationStores",
        "responseCode":200
      },
      "input":{"shape":"ListAnnotationStoresRequest"},
      "output":{"shape":"ListAnnotationStoresResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Retrieves a list of annotation stores.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "ListMultipartReadSetUploads":{
      "name":"ListMultipartReadSetUploads",
      "http":{
        "method":"POST",
        "requestUri":"/sequencestore/{sequenceStoreId}/uploads",
        "responseCode":200
      },
      "input":{"shape":"ListMultipartReadSetUploadsRequest"},
      "output":{"shape":"ListMultipartReadSetUploadsResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"NotSupportedOperationException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Lists in-progress multipart read set uploads for a sequence store and returns it in a JSON formatted output. Multipart read set uploads are initiated by the <code>CreateMultipartReadSetUploads</code> API operation. This operation returns a response with no body when the upload is complete. </p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "ListReadSetActivationJobs":{
      "name":"ListReadSetActivationJobs",
      "http":{
        "method":"POST",
        "requestUri":"/sequencestore/{sequenceStoreId}/activationjobs",
        "responseCode":200
      },
      "input":{"shape":"ListReadSetActivationJobsRequest"},
      "output":{"shape":"ListReadSetActivationJobsResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves a list of read set activation jobs and returns the metadata in a JSON formatted output. To extract metadata from a read set activation job, use the <code>GetReadSetActivationJob</code> API operation.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "ListReadSetExportJobs":{
      "name":"ListReadSetExportJobs",
      "http":{
        "method":"POST",
        "requestUri":"/sequencestore/{sequenceStoreId}/exportjobs",
        "responseCode":200
      },
      "input":{"shape":"ListReadSetExportJobsRequest"},
      "output":{"shape":"ListReadSetExportJobsResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves a list of read set export jobs in a JSON formatted response. This API operation is used to check the status of a read set export job initiated by the <code>StartReadSetExportJob</code> API operation.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "ListReadSetImportJobs":{
      "name":"ListReadSetImportJobs",
      "http":{
        "method":"POST",
        "requestUri":"/sequencestore/{sequenceStoreId}/importjobs",
        "responseCode":200
      },
      "input":{"shape":"ListReadSetImportJobsRequest"},
      "output":{"shape":"ListReadSetImportJobsResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves a list of read set import jobs and returns the data in JSON format.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "ListReadSetUploadParts":{
      "name":"ListReadSetUploadParts",
      "http":{
        "method":"POST",
        "requestUri":"/sequencestore/{sequenceStoreId}/upload/{uploadId}/parts",
        "responseCode":200
      },
      "input":{"shape":"ListReadSetUploadPartsRequest"},
      "output":{"shape":"ListReadSetUploadPartsResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"NotSupportedOperationException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Lists all parts in a multipart read set upload for a sequence store and returns the metadata in a JSON formatted output.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "ListReadSets":{
      "name":"ListReadSets",
      "http":{
        "method":"POST",
        "requestUri":"/sequencestore/{sequenceStoreId}/readsets",
        "responseCode":200
      },
      "input":{"shape":"ListReadSetsRequest"},
      "output":{"shape":"ListReadSetsResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves a list of read sets from a sequence store ID and returns the metadata in JSON format.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "ListReferenceImportJobs":{
      "name":"ListReferenceImportJobs",
      "http":{
        "method":"POST",
        "requestUri":"/referencestore/{referenceStoreId}/importjobs",
        "responseCode":200
      },
      "input":{"shape":"ListReferenceImportJobsRequest"},
      "output":{"shape":"ListReferenceImportJobsResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves the metadata of one or more reference import jobs for a reference store.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "ListReferenceStores":{
      "name":"ListReferenceStores",
      "http":{
        "method":"POST",
        "requestUri":"/referencestores",
        "responseCode":200
      },
      "input":{"shape":"ListReferenceStoresRequest"},
      "output":{"shape":"ListReferenceStoresResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves a list of reference stores linked to your account and returns their metadata in JSON format.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/create-reference-store.html\">Creating a reference store</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "ListReferences":{
      "name":"ListReferences",
      "http":{
        "method":"POST",
        "requestUri":"/referencestore/{referenceStoreId}/references",
        "responseCode":200
      },
      "input":{"shape":"ListReferencesRequest"},
      "output":{"shape":"ListReferencesResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves the metadata of one or more reference genomes in a reference store.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/create-reference-store.html\">Creating a reference store</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "ListRunCaches":{
      "name":"ListRunCaches",
      "http":{
        "method":"GET",
        "requestUri":"/runCache",
        "responseCode":200
      },
      "input":{"shape":"ListRunCachesRequest"},
      "output":{"shape":"ListRunCachesResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves a list of your run caches and the metadata for each cache.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "ListRunGroups":{
      "name":"ListRunGroups",
      "http":{
        "method":"GET",
        "requestUri":"/runGroup",
        "responseCode":200
      },
      "input":{"shape":"ListRunGroupsRequest"},
      "output":{"shape":"ListRunGroupsResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves a list of all run groups and returns the metadata for each run group.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "ListRunTasks":{
      "name":"ListRunTasks",
      "http":{
        "method":"GET",
        "requestUri":"/run/{id}/task",
        "responseCode":200
      },
      "input":{"shape":"ListRunTasksRequest"},
      "output":{"shape":"ListRunTasksResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Returns a list of tasks and status information within their specified run. Use this operation to monitor runs and to identify which specific tasks have failed.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "ListRuns":{
      "name":"ListRuns",
      "http":{
        "method":"GET",
        "requestUri":"/run",
        "responseCode":200
      },
      "input":{"shape":"ListRunsRequest"},
      "output":{"shape":"ListRunsResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves a list of runs and returns each run's metadata and status.</p> <p>Amazon Web Services HealthOmics stores a configurable number of runs, as determined by service limits, that are available to the console and API. If the <code>ListRuns</code> response doesn't include specific runs that you expected, you can find all run logs in the CloudWatch logs. For more information about viewing the run logs, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/monitoring-cloudwatch-logs.html\">CloudWatch logs</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "ListSequenceStores":{
      "name":"ListSequenceStores",
      "http":{
        "method":"POST",
        "requestUri":"/sequencestores",
        "responseCode":200
      },
      "input":{"shape":"ListSequenceStoresRequest"},
      "output":{"shape":"ListSequenceStoresResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves a list of sequence stores and returns each sequence store's metadata.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/create-sequence-store.html\">Creating a HealthOmics sequence store</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "ListShares":{
      "name":"ListShares",
      "http":{
        "method":"POST",
        "requestUri":"/shares",
        "responseCode":200
      },
      "input":{"shape":"ListSharesRequest"},
      "output":{"shape":"ListSharesResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Retrieves the resource shares associated with an account. Use the filter parameter to retrieve a specific subset of the shares.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "ListTagsForResource":{
      "name":"ListTagsForResource",
      "http":{
        "method":"GET",
        "requestUri":"/tags/{resourceArn}",
        "responseCode":200
      },
      "input":{"shape":"ListTagsForResourceRequest"},
      "output":{"shape":"ListTagsForResourceResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves a list of tags for a resource.</p>",
      "endpoint":{"hostPrefix":"tags-"}
    },
    "ListVariantImportJobs":{
      "name":"ListVariantImportJobs",
      "http":{
        "method":"POST",
        "requestUri":"/import/variants",
        "responseCode":200
      },
      "input":{"shape":"ListVariantImportJobsRequest"},
      "output":{"shape":"ListVariantImportJobsResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Retrieves a list of variant import jobs.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "ListVariantStores":{
      "name":"ListVariantStores",
      "http":{
        "method":"POST",
        "requestUri":"/variantStores",
        "responseCode":200
      },
      "input":{"shape":"ListVariantStoresRequest"},
      "output":{"shape":"ListVariantStoresResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Retrieves a list of variant stores.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "ListWorkflowVersions":{
      "name":"ListWorkflowVersions",
      "http":{
        "method":"GET",
        "requestUri":"/workflow/{workflowId}/version",
        "responseCode":200
      },
      "input":{"shape":"ListWorkflowVersionsRequest"},
      "output":{"shape":"ListWorkflowVersionsResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Lists the workflow versions for the specified workflow. For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/workflow-versions.html\">Workflow versioning in Amazon Web Services HealthOmics</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "ListWorkflows":{
      "name":"ListWorkflows",
      "http":{
        "method":"GET",
        "requestUri":"/workflow",
        "responseCode":200
      },
      "input":{"shape":"ListWorkflowsRequest"},
      "output":{"shape":"ListWorkflowsResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves a list of existing workflows. You can filter for specific workflows by their name and type. Using the type parameter, specify <code>PRIVATE</code> to retrieve a list of private workflows or specify <code>READY2RUN</code> for a list of all Ready2Run workflows. If you do not specify the type of workflow, this operation returns a list of existing workflows.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "PutS3AccessPolicy":{
      "name":"PutS3AccessPolicy",
      "http":{
        "method":"PUT",
        "requestUri":"/s3accesspolicy/{s3AccessPointArn}",
        "responseCode":200
      },
      "input":{"shape":"PutS3AccessPolicyRequest"},
      "output":{"shape":"PutS3AccessPolicyResponse"},
      "errors":[
        {"shape":"NotSupportedOperationException"},
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Adds an access policy to the specified store.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "StartAnnotationImportJob":{
      "name":"StartAnnotationImportJob",
      "http":{
        "method":"POST",
        "requestUri":"/import/annotation",
        "responseCode":200
      },
      "input":{"shape":"StartAnnotationImportRequest"},
      "output":{"shape":"StartAnnotationImportResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Starts an annotation import job.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "StartReadSetActivationJob":{
      "name":"StartReadSetActivationJob",
      "http":{
        "method":"POST",
        "requestUri":"/sequencestore/{sequenceStoreId}/activationjob",
        "responseCode":200
      },
      "input":{"shape":"StartReadSetActivationJobRequest"},
      "output":{"shape":"StartReadSetActivationJobResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Activates an archived read set and returns its metadata in a JSON formatted output. AWS HealthOmics automatically archives unused read sets after 30 days. To monitor the status of your read set activation job, use the <code>GetReadSetActivationJob</code> operation.</p> <p>To learn more, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/activating-read-sets.html\">Activating read sets</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "StartReadSetExportJob":{
      "name":"StartReadSetExportJob",
      "http":{
        "method":"POST",
        "requestUri":"/sequencestore/{sequenceStoreId}/exportjob",
        "responseCode":200
      },
      "input":{"shape":"StartReadSetExportJobRequest"},
      "output":{"shape":"StartReadSetExportJobResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Starts a read set export job. When the export job is finished, the read set is exported to an Amazon S3 bucket which can be retrieved using the <code>GetReadSetExportJob</code> API operation.</p> <p>To monitor the status of the export job, use the <code>ListReadSetExportJobs</code> API operation. </p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "StartReadSetImportJob":{
      "name":"StartReadSetImportJob",
      "http":{
        "method":"POST",
        "requestUri":"/sequencestore/{sequenceStoreId}/importjob",
        "responseCode":200
      },
      "input":{"shape":"StartReadSetImportJobRequest"},
      "output":{"shape":"StartReadSetImportJobResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Imports a read set from the sequence store. Read set import jobs support a maximum of 100 read sets of different types. Monitor the progress of your read set import job by calling the <code>GetReadSetImportJob</code> API operation.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "StartReferenceImportJob":{
      "name":"StartReferenceImportJob",
      "http":{
        "method":"POST",
        "requestUri":"/referencestore/{referenceStoreId}/importjob",
        "responseCode":200
      },
      "input":{"shape":"StartReferenceImportJobRequest"},
      "output":{"shape":"StartReferenceImportJobResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Imports a reference genome from Amazon S3 into a specified reference store. You can have multiple reference genomes in a reference store. You can only import reference genomes one at a time into each reference store. Monitor the status of your reference import job by using the <code>GetReferenceImportJob</code> API operation.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "StartRun":{
      "name":"StartRun",
      "http":{
        "method":"POST",
        "requestUri":"/run",
        "responseCode":201
      },
      "input":{"shape":"StartRunRequest"},
      "output":{"shape":"StartRunResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Starts a new run and returns details about the run, or duplicates an existing run. A run is a single invocation of a workflow. If you provide request IDs, Amazon Web Services HealthOmics identifies duplicate requests and starts the run only once. Monitor the progress of the run by calling the <code>GetRun</code> API operation.</p> <p>To start a new run, the following inputs are required:</p> <ul> <li> <p>A service role ARN (<code>roleArn</code>).</p> </li> <li> <p>The run's workflow ID (<code>workflowId</code>, not the <code>uuid</code> or <code>runId</code>).</p> </li> <li> <p>An Amazon S3 location (<code>outputUri</code>) where the run outputs will be saved.</p> </li> <li> <p>All required workflow parameters (<code>parameter</code>), which can include optional parameters from the parameter template. The run cannot include any parameters that are not defined in the parameter template. To see all possible parameters, use the <code>GetRun</code> API operation. </p> </li> <li> <p>For runs with a <code>STATIC</code> (default) storage type, specify the required storage capacity (in gibibytes). A storage capacity value is not required for runs that use <code>DYNAMIC</code> storage.</p> </li> </ul> <p> <code>StartRun</code> can also duplicate an existing run using the run's default values. You can modify these default values and/or add other optional inputs. To duplicate a run, the following inputs are required:</p> <ul> <li> <p>A service role ARN (<code>roleArn</code>).</p> </li> <li> <p>The ID of the run to duplicate (<code>runId</code>).</p> </li> <li> <p>An Amazon S3 location where the run outputs will be saved (<code>outputUri</code>).</p> </li> </ul> <p>To learn more about the optional parameters for <code>StartRun</code>, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/starting-a-run.html\">Starting a run</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p> <p>Use the <code>retentionMode</code> input to control how long the metadata for each run is stored in CloudWatch. There are two retention modes:</p> <ul> <li> <p>Specify <code>REMOVE</code> to automatically remove the oldest runs when you reach the maximum service retention limit for runs. It is recommended that you use the <code>REMOVE</code> mode to initiate major run requests so that your runs do not fail when you reach the limit.</p> </li> <li> <p>The <code>retentionMode</code> is set to the <code>RETAIN</code> mode by default, which allows you to manually remove runs after reaching the maximum service retention limit. Under this setting, you cannot create additional runs until you remove the excess runs.</p> </li> </ul> <p>To learn more about the retention modes, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/run-retention.html\">Run retention mode</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "StartVariantImportJob":{
      "name":"StartVariantImportJob",
      "http":{
        "method":"POST",
        "requestUri":"/import/variant",
        "responseCode":200
      },
      "input":{"shape":"StartVariantImportRequest"},
      "output":{"shape":"StartVariantImportResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Starts a variant import job.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "TagResource":{
      "name":"TagResource",
      "http":{
        "method":"POST",
        "requestUri":"/tags/{resourceArn}",
        "responseCode":204
      },
      "input":{"shape":"TagResourceRequest"},
      "output":{"shape":"TagResourceResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Tags a resource.</p>",
      "endpoint":{"hostPrefix":"tags-"}
    },
    "UntagResource":{
      "name":"UntagResource",
      "http":{
        "method":"DELETE",
        "requestUri":"/tags/{resourceArn}",
        "responseCode":204
      },
      "input":{"shape":"UntagResourceRequest"},
      "output":{"shape":"UntagResourceResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Removes tags from a resource.</p>",
      "endpoint":{"hostPrefix":"tags-"},
      "idempotent":true
    },
    "UpdateAnnotationStore":{
      "name":"UpdateAnnotationStore",
      "http":{
        "method":"POST",
        "requestUri":"/annotationStore/{name}",
        "responseCode":200
      },
      "input":{"shape":"UpdateAnnotationStoreRequest"},
      "output":{"shape":"UpdateAnnotationStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Updates an annotation store.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "UpdateAnnotationStoreVersion":{
      "name":"UpdateAnnotationStoreVersion",
      "http":{
        "method":"POST",
        "requestUri":"/annotationStore/{name}/version/{versionName}",
        "responseCode":200
      },
      "input":{"shape":"UpdateAnnotationStoreVersionRequest"},
      "output":{"shape":"UpdateAnnotationStoreVersionResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p> Updates the description of an annotation store version. </p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "UpdateRunCache":{
      "name":"UpdateRunCache",
      "http":{
        "method":"POST",
        "requestUri":"/runCache/{id}",
        "responseCode":202
      },
      "input":{"shape":"UpdateRunCacheRequest"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Updates a run cache using its ID and returns a response with no body if the operation is successful. You can update the run cache description, name, or the default run cache behavior with <code>CACHE_ON_FAILURE</code> or <code>CACHE_ALWAYS</code>. To confirm that your run cache settings have been properly updated, use the <code>GetRunCache</code> API operation.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/how-run-cache.html\">How call caching works</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "UpdateRunGroup":{
      "name":"UpdateRunGroup",
      "http":{
        "method":"POST",
        "requestUri":"/runGroup/{id}",
        "responseCode":202
      },
      "input":{"shape":"UpdateRunGroupRequest"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Updates the settings of a run group and returns a response with no body if the operation is successful.</p> <p>You can update the following settings with <code>UpdateRunGroup</code>:</p> <ul> <li> <p>Maximum number of CPUs</p> </li> <li> <p>Run time (measured in minutes)</p> </li> <li> <p>Number of GPUs</p> </li> <li> <p>Number of concurrent runs</p> </li> <li> <p>Group name</p> </li> </ul> <p>To confirm that the settings have been successfully updated, use the <code>ListRunGroups</code> or <code>GetRunGroup</code> API operations to verify that the desired changes have been made.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "UpdateSequenceStore":{
      "name":"UpdateSequenceStore",
      "http":{
        "method":"PATCH",
        "requestUri":"/sequencestore/{id}",
        "responseCode":200
      },
      "input":{"shape":"UpdateSequenceStoreRequest"},
      "output":{"shape":"UpdateSequenceStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Update one or more parameters for the sequence store.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "UpdateVariantStore":{
      "name":"UpdateVariantStore",
      "http":{
        "method":"POST",
        "requestUri":"/variantStore/{name}",
        "responseCode":200
      },
      "input":{"shape":"UpdateVariantStoreRequest"},
      "output":{"shape":"UpdateVariantStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Updates a variant store.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "UpdateWorkflow":{
      "name":"UpdateWorkflow",
      "http":{
        "method":"POST",
        "requestUri":"/workflow/{id}",
        "responseCode":202
      },
      "input":{"shape":"UpdateWorkflowRequest"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Updates information about a workflow.</p> <p>You can update the following workflow information:</p> <ul> <li> <p>Name</p> </li> <li> <p>Description</p> </li> <li> <p>Default storage type</p> </li> <li> <p>Default storage capacity (with workflow ID)</p> </li> </ul> <p>This operation returns a response with no body if the operation is successful. You can check the workflow updates by calling the <code>GetWorkflow</code> API operation.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/update-private-workflow.html\">Update a private workflow</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "UpdateWorkflowVersion":{
      "name":"UpdateWorkflowVersion",
      "http":{
        "method":"POST",
        "requestUri":"/workflow/{workflowId}/version/{versionName}",
        "responseCode":202
      },
      "input":{"shape":"UpdateWorkflowVersionRequest"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Updates information about the workflow version. For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/workflow-versions.html\">Workflow versioning in Amazon Web Services HealthOmics</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "UploadReadSetPart":{
      "name":"UploadReadSetPart",
      "http":{
        "method":"PUT",
        "requestUri":"/sequencestore/{sequenceStoreId}/upload/{uploadId}/part",
        "responseCode":200
      },
      "input":{"shape":"UploadReadSetPartRequest"},
      "output":{"shape":"UploadReadSetPartResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"NotSupportedOperationException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Uploads a specific part of a read set into a sequence store. When you a upload a read set part with a part number that already exists, the new part replaces the existing one. This operation returns a JSON formatted response containing a string identifier that is used to confirm that parts are being added to the intended upload.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/synchronous-uploads.html\">Direct upload to a sequence store</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>",
      "endpoint":{"hostPrefix":"storage-"},
      "unsignedPayload":true,
      "authtype":"v4-unsigned-body"
    }
  },
  "shapes":{
    "AbortMultipartReadSetUploadRequest":{
      "type":"structure",
      "required":[
        "sequenceStoreId",
        "uploadId"
      ],
      "members":{
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The sequence store ID for the store involved in the multipart upload.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        },
        "uploadId":{
          "shape":"UploadId",
          "documentation":"<p>The ID for the multipart upload.</p>",
          "location":"uri",
          "locationName":"uploadId"
        }
      }
    },
    "AbortMultipartReadSetUploadResponse":{
      "type":"structure",
      "members":{
      }
    },
    "Accelerators":{
      "type":"string",
      "enum":["GPU"],
      "max":64,
      "min":1
    },
    "AcceptShareRequest":{
      "type":"structure",
      "required":["shareId"],
      "members":{
        "shareId":{
          "shape":"String",
          "documentation":"<p>The ID of the resource share.</p>",
          "location":"uri",
          "locationName":"shareId"
        }
      }
    },
    "AcceptShareResponse":{
      "type":"structure",
      "members":{
        "status":{
          "shape":"ShareStatus",
          "documentation":"<p>The status of the resource share.</p>"
        }
      }
    },
    "AccessDeniedException":{
      "type":"structure",
      "required":["message"],
      "members":{
        "message":{"shape":"String"}
      },
      "documentation":"<p>You do not have sufficient access to perform this action.</p>",
      "error":{
        "httpStatusCode":403,
        "senderFault":true
      },
      "exception":true
    },
    "AccessLogLocation":{
      "type":"string",
      "pattern":"$|^s3://([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])/?((.{1,800})/)?"
    },
    "ActivateReadSetFilter":{
      "type":"structure",
      "members":{
        "status":{
          "shape":"ReadSetActivationJobStatus",
          "documentation":"<p>The filter's status.</p>"
        },
        "createdAfter":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's start date.</p>"
        },
        "createdBefore":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's end date.</p>"
        }
      },
      "documentation":"<p>A read set activation job filter.</p>"
    },
    "ActivateReadSetJobItem":{
      "type":"structure",
      "required":[
        "id",
        "sequenceStoreId",
        "status",
        "creationTime"
      ],
      "members":{
        "id":{
          "shape":"ActivationJobId",
          "documentation":"<p>The job's ID.</p>"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The job's sequence store ID.</p>"
        },
        "status":{
          "shape":"ReadSetActivationJobStatus",
          "documentation":"<p>The job's status.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job was created.</p>"
        },
        "completionTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job completed.</p>"
        }
      },
      "documentation":"<p>A read set activation job.</p>"
    },
    "ActivateReadSetJobList":{
      "type":"list",
      "member":{"shape":"ActivateReadSetJobItem"}
    },
    "ActivateReadSetSourceItem":{
      "type":"structure",
      "required":[
        "readSetId",
        "status"
      ],
      "members":{
        "readSetId":{
          "shape":"ReadSetId",
          "documentation":"<p>The source's read set ID.</p>"
        },
        "status":{
          "shape":"ReadSetActivationJobItemStatus",
          "documentation":"<p>The source's status.</p>"
        },
        "statusMessage":{
          "shape":"JobStatusMessage",
          "documentation":"<p>The source's status message.</p>"
        }
      },
      "documentation":"<p>A source for a read set activation job.</p>"
    },
    "ActivateReadSetSourceList":{
      "type":"list",
      "member":{"shape":"ActivateReadSetSourceItem"}
    },
    "ActivationJobId":{
      "type":"string",
      "max":36,
      "min":10,
      "pattern":"[0-9]+"
    },
    "AnnotationFieldMap":{
      "type":"map",
      "key":{"shape":"AnnotationFieldMapKeyString"},
      "value":{"shape":"AnnotationFieldMapValueString"}
    },
    "AnnotationFieldMapKeyString":{
      "type":"string",
      "max":21,
      "min":1
    },
    "AnnotationFieldMapValueString":{
      "type":"string",
      "max":21,
      "min":1
    },
    "AnnotationImportItemDetail":{
      "type":"structure",
      "required":[
        "source",
        "jobStatus"
      ],
      "members":{
        "source":{
          "shape":"S3Uri",
          "documentation":"<p>The source file's location in Amazon S3.</p>"
        },
        "jobStatus":{
          "shape":"JobStatus",
          "documentation":"<p>The item's job status.</p>"
        }
      },
      "documentation":"<p>Details about an imported annotation item.</p>"
    },
    "AnnotationImportItemDetails":{
      "type":"list",
      "member":{"shape":"AnnotationImportItemDetail"},
      "max":1,
      "min":1
    },
    "AnnotationImportItemSource":{
      "type":"structure",
      "required":["source"],
      "members":{
        "source":{
          "shape":"S3Uri",
          "documentation":"<p>The source file's location in Amazon S3.</p>"
        }
      },
      "documentation":"<p>A source for an annotation import job.</p>"
    },
    "AnnotationImportItemSources":{
      "type":"list",
      "member":{"shape":"AnnotationImportItemSource"},
      "min":1
    },
    "AnnotationImportJobItem":{
      "type":"structure",
      "required":[
        "id",
        "destinationName",
        "versionName",
        "roleArn",
        "status",
        "creationTime",
        "updateTime"
      ],
      "members":{
        "id":{
          "shape":"String",
          "documentation":"<p>The job's ID.</p>"
        },
        "destinationName":{
          "shape":"String",
          "documentation":"<p>The job's destination annotation store.</p>"
        },
        "versionName":{
          "shape":"VersionName",
          "documentation":"<p> The name of the annotation store version. </p>"
        },
        "roleArn":{
          "shape":"Arn",
          "documentation":"<p>The job's service role ARN.</p>"
        },
        "status":{
          "shape":"JobStatus",
          "documentation":"<p>The job's status.</p>"
        },
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p>When the job was created.</p>"
        },
        "updateTime":{
          "shape":"UpdateTime",
          "documentation":"<p>When the job was updated.</p>"
        },
        "completionTime":{
          "shape":"CompletionTime",
          "documentation":"<p>When the job completed.</p>"
        },
        "runLeftNormalization":{
          "shape":"RunLeftNormalization",
          "documentation":"<p>The job's left normalization setting.</p>"
        },
        "annotationFields":{
          "shape":"AnnotationFieldMap",
          "documentation":"<p> The annotation schema generated by the parsed annotation data. </p>"
        }
      },
      "documentation":"<p>An annotation import job.</p>"
    },
    "AnnotationImportJobItems":{
      "type":"list",
      "member":{"shape":"AnnotationImportJobItem"}
    },
    "AnnotationStoreItem":{
      "type":"structure",
      "required":[
        "id",
        "reference",
        "status",
        "storeArn",
        "name",
        "storeFormat",
        "description",
        "sseConfig",
        "creationTime",
        "updateTime",
        "statusMessage",
        "storeSizeBytes"
      ],
      "members":{
        "id":{
          "shape":"ResourceId",
          "documentation":"<p>The store's ID.</p>"
        },
        "reference":{
          "shape":"ReferenceItem",
          "documentation":"<p>The store's genome reference.</p>"
        },
        "status":{
          "shape":"StoreStatus",
          "documentation":"<p>The store's status.</p>"
        },
        "storeArn":{
          "shape":"Arn",
          "documentation":"<p>The store's ARN.</p>"
        },
        "name":{
          "shape":"String",
          "documentation":"<p>The store's name.</p>"
        },
        "storeFormat":{
          "shape":"StoreFormat",
          "documentation":"<p>The store's file format.</p>"
        },
        "description":{
          "shape":"Description",
          "documentation":"<p>The store's description.</p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>The store's server-side encryption (SSE) settings.</p>"
        },
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p>The store's creation time.</p>"
        },
        "updateTime":{
          "shape":"UpdateTime",
          "documentation":"<p>When the store was updated.</p>"
        },
        "statusMessage":{
          "shape":"StatusMessage",
          "documentation":"<p>The store's status message.</p>"
        },
        "storeSizeBytes":{
          "shape":"Long",
          "documentation":"<p>The store's size in bytes.</p>"
        }
      },
      "documentation":"<p>An annotation store.</p>"
    },
    "AnnotationStoreItems":{
      "type":"list",
      "member":{"shape":"AnnotationStoreItem"}
    },
    "AnnotationStoreVersionItem":{
      "type":"structure",
      "required":[
        "storeId",
        "id",
        "status",
        "versionArn",
        "name",
        "versionName",
        "description",
        "creationTime",
        "updateTime",
        "statusMessage",
        "versionSizeBytes"
      ],
      "members":{
        "storeId":{
          "shape":"ResourceId",
          "documentation":"<p> The store ID for an annotation store version. </p>"
        },
        "id":{
          "shape":"ResourceId",
          "documentation":"<p> The annotation store version ID. </p>"
        },
        "status":{
          "shape":"VersionStatus",
          "documentation":"<p> The status of an annotation store version. </p>"
        },
        "versionArn":{
          "shape":"Arn",
          "documentation":"<p> The Arn for an annotation store version. </p>"
        },
        "name":{
          "shape":"StoreName",
          "documentation":"<p> A name given to an annotation store version to distinguish it from others. </p>"
        },
        "versionName":{
          "shape":"VersionName",
          "documentation":"<p> The name of an annotation store version. </p>"
        },
        "description":{
          "shape":"Description",
          "documentation":"<p> The description of an annotation store version. </p>"
        },
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p> The time stamp for when an annotation store version was created. </p>"
        },
        "updateTime":{
          "shape":"UpdateTime",
          "documentation":"<p> The time stamp for when an annotation store version was updated. </p>"
        },
        "statusMessage":{
          "shape":"StatusMessage",
          "documentation":"<p> The status of an annotation store version. </p>"
        },
        "versionSizeBytes":{
          "shape":"Long",
          "documentation":"<p> The size of an annotation store version in Bytes. </p>"
        }
      },
      "documentation":"<p> Annotation store versions. </p>"
    },
    "AnnotationStoreVersionItems":{
      "type":"list",
      "member":{"shape":"AnnotationStoreVersionItem"}
    },
    "AnnotationType":{
      "type":"string",
      "enum":[
        "GENERIC",
        "CHR_POS",
        "CHR_POS_REF_ALT",
        "CHR_START_END_ONE_BASE",
        "CHR_START_END_REF_ALT_ONE_BASE",
        "CHR_START_END_ZERO_BASE",
        "CHR_START_END_REF_ALT_ZERO_BASE"
      ]
    },
    "Arn":{
      "type":"string",
      "max":2048,
      "min":20,
      "pattern":"arn:([^: ]*):([^: ]*):([^: ]*):([0-9]{12}):([^: ]*)"
    },
    "ArnList":{
      "type":"list",
      "member":{"shape":"String"},
      "max":10,
      "min":1
    },
    "AwsAccountId":{
      "type":"string",
      "max":12,
      "min":12,
      "pattern":"[0-9]+"
    },
    "BatchDeleteReadSetRequest":{
      "type":"structure",
      "required":[
        "ids",
        "sequenceStoreId"
      ],
      "members":{
        "ids":{
          "shape":"ReadSetIdList",
          "documentation":"<p>The read sets' IDs.</p>"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The read sets' sequence store ID.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        }
      }
    },
    "BatchDeleteReadSetResponse":{
      "type":"structure",
      "members":{
        "errors":{
          "shape":"ReadSetBatchErrorList",
          "documentation":"<p>Errors returned by individual delete operations.</p>"
        }
      }
    },
    "Blob":{"type":"blob"},
    "Boolean":{
      "type":"boolean",
      "box":true
    },
    "CacheBehavior":{
      "type":"string",
      "enum":[
        "CACHE_ON_FAILURE",
        "CACHE_ALWAYS"
      ],
      "max":64,
      "min":1
    },
    "CancelAnnotationImportRequest":{
      "type":"structure",
      "required":["jobId"],
      "members":{
        "jobId":{
          "shape":"ResourceId",
          "documentation":"<p>The job's ID.</p>",
          "location":"uri",
          "locationName":"jobId"
        }
      }
    },
    "CancelAnnotationImportResponse":{
      "type":"structure",
      "members":{
      }
    },
    "CancelRunRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"RunId",
          "documentation":"<p>The run's ID.</p>",
          "location":"uri",
          "locationName":"id"
        }
      }
    },
    "CancelVariantImportRequest":{
      "type":"structure",
      "required":["jobId"],
      "members":{
        "jobId":{
          "shape":"ResourceId",
          "documentation":"<p>The job's ID.</p>",
          "location":"uri",
          "locationName":"jobId"
        }
      }
    },
    "CancelVariantImportResponse":{
      "type":"structure",
      "members":{
      }
    },
    "ClientToken":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "CommentChar":{
      "type":"string",
      "max":1,
      "min":1
    },
    "CompleteMultipartReadSetUploadRequest":{
      "type":"structure",
      "required":[
        "sequenceStoreId",
        "uploadId",
        "parts"
      ],
      "members":{
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The sequence store ID for the store involved in the multipart upload.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        },
        "uploadId":{
          "shape":"UploadId",
          "documentation":"<p>The ID for the multipart upload.</p>",
          "location":"uri",
          "locationName":"uploadId"
        },
        "parts":{
          "shape":"CompleteReadSetUploadPartList",
          "documentation":"<p>The individual uploads or parts of a multipart upload.</p>"
        }
      }
    },
    "CompleteMultipartReadSetUploadResponse":{
      "type":"structure",
      "required":["readSetId"],
      "members":{
        "readSetId":{
          "shape":"ReadSetId",
          "documentation":"<p>The read set ID created for an uploaded read set.</p>"
        }
      }
    },
    "CompleteReadSetUploadPartList":{
      "type":"list",
      "member":{"shape":"CompleteReadSetUploadPartListItem"}
    },
    "CompleteReadSetUploadPartListItem":{
      "type":"structure",
      "required":[
        "partNumber",
        "partSource",
        "checksum"
      ],
      "members":{
        "partNumber":{
          "shape":"CompleteReadSetUploadPartListItemPartNumberInteger",
          "documentation":"<p> A number identifying the part in a read set upload. </p>"
        },
        "partSource":{
          "shape":"ReadSetPartSource",
          "documentation":"<p> The source file of the part being uploaded. </p>"
        },
        "checksum":{
          "shape":"CompleteReadSetUploadPartListItemChecksumString",
          "documentation":"<p> A unique identifier used to confirm that parts are being added to the correct upload. </p>"
        }
      },
      "documentation":"<p> Part of the response to the CompleteReadSetUpload API, including metadata. </p>"
    },
    "CompleteReadSetUploadPartListItemChecksumString":{
      "type":"string",
      "max":100,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "CompleteReadSetUploadPartListItemPartNumberInteger":{
      "type":"integer",
      "box":true,
      "max":10000,
      "min":1
    },
    "CompletionTime":{
      "type":"timestamp",
      "timestampFormat":"iso8601"
    },
    "ConflictException":{
      "type":"structure",
      "required":["message"],
      "members":{
        "message":{"shape":"String"}
      },
      "documentation":"<p>The request cannot be applied to the target resource in its current state.</p>",
      "error":{
        "httpStatusCode":409,
        "senderFault":true
      },
      "exception":true
    },
    "ConnectionArn":{
      "type":"string",
      "max":256,
      "min":1,
      "pattern":"arn:aws(-[\\w]+)*:.+:.+:[0-9]{12}:.+"
    },
    "ContainerRegistryMap":{
      "type":"structure",
      "members":{
        "registryMappings":{
          "shape":"RegistryMappingsList",
          "documentation":"<p>Mapping that provides the ECR repository path where upstream container images are pulled and synchronized.</p>"
        },
        "imageMappings":{
          "shape":"ImageMappingsList",
          "documentation":"<p>Image mappings specify path mappings between the ECR private repository and their corresponding external repositories.</p>"
        }
      },
      "documentation":"<p>Use a container registry map to specify mappings between the ECR private repository and one or more upstream registries. For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/workflows-ecr.html\">Container images</a> in the <i>Amazon Web Services HealthOmics User Guide</i>. </p>"
    },
    "CreateAnnotationStoreRequest":{
      "type":"structure",
      "required":["storeFormat"],
      "members":{
        "reference":{
          "shape":"ReferenceItem",
          "documentation":"<p>The genome reference for the store's annotations.</p>"
        },
        "name":{
          "shape":"StoreName",
          "documentation":"<p>A name for the store.</p>"
        },
        "description":{
          "shape":"Description",
          "documentation":"<p>A description for the store.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>Tags for the store.</p>"
        },
        "versionName":{
          "shape":"VersionName",
          "documentation":"<p> The name given to an annotation store version to distinguish it from other versions. </p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>Server-side encryption (SSE) settings for the store.</p>"
        },
        "storeFormat":{
          "shape":"StoreFormat",
          "documentation":"<p>The annotation file format of the store.</p>"
        },
        "storeOptions":{
          "shape":"StoreOptions",
          "documentation":"<p>File parsing options for the annotation store.</p>"
        }
      }
    },
    "CreateAnnotationStoreResponse":{
      "type":"structure",
      "required":[
        "id",
        "status",
        "name",
        "versionName",
        "creationTime"
      ],
      "members":{
        "id":{
          "shape":"ResourceId",
          "documentation":"<p>The store's ID.</p>"
        },
        "reference":{
          "shape":"ReferenceItem",
          "documentation":"<p>The store's genome reference. Required for all stores except TSV format with generic annotations.</p>"
        },
        "storeFormat":{
          "shape":"StoreFormat",
          "documentation":"<p>The annotation file format of the store.</p>"
        },
        "storeOptions":{
          "shape":"StoreOptions",
          "documentation":"<p>The store's file parsing options.</p>"
        },
        "status":{
          "shape":"StoreStatus",
          "documentation":"<p>The store's status.</p>"
        },
        "name":{
          "shape":"String",
          "documentation":"<p>The store's name.</p>"
        },
        "versionName":{
          "shape":"VersionName",
          "documentation":"<p> The name given to an annotation store version to distinguish it from other versions. </p>"
        },
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p>When the store was created.</p>"
        }
      }
    },
    "CreateAnnotationStoreVersionRequest":{
      "type":"structure",
      "required":[
        "name",
        "versionName"
      ],
      "members":{
        "name":{
          "shape":"StoreName",
          "documentation":"<p> The name of an annotation store version from which versions are being created. </p>",
          "location":"uri",
          "locationName":"name"
        },
        "versionName":{
          "shape":"VersionName",
          "documentation":"<p> The name given to an annotation store version to distinguish it from other versions. </p>"
        },
        "description":{
          "shape":"Description",
          "documentation":"<p> The description of an annotation store version. </p>"
        },
        "versionOptions":{
          "shape":"VersionOptions",
          "documentation":"<p> The options for an annotation store version. </p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p> Any tags added to annotation store version. </p>"
        }
      }
    },
    "CreateAnnotationStoreVersionResponse":{
      "type":"structure",
      "required":[
        "id",
        "versionName",
        "storeId",
        "name",
        "status",
        "creationTime"
      ],
      "members":{
        "id":{
          "shape":"ResourceId",
          "documentation":"<p> A generated ID for the annotation store </p>"
        },
        "versionName":{
          "shape":"VersionName",
          "documentation":"<p> The name given to an annotation store version to distinguish it from other versions. </p>"
        },
        "storeId":{
          "shape":"ResourceId",
          "documentation":"<p> The ID for the annotation store from which new versions are being created. </p>"
        },
        "versionOptions":{
          "shape":"VersionOptions",
          "documentation":"<p> The options for an annotation store version. </p>"
        },
        "name":{
          "shape":"StoreName",
          "documentation":"<p> The name given to an annotation store version to distinguish it from other versions. </p>"
        },
        "status":{
          "shape":"VersionStatus",
          "documentation":"<p> The status of a annotation store version. </p>"
        },
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p> The time stamp for the creation of an annotation store version. </p>"
        }
      }
    },
    "CreateMultipartReadSetUploadRequest":{
      "type":"structure",
      "required":[
        "sequenceStoreId",
        "sourceFileType",
        "subjectId",
        "sampleId",
        "name"
      ],
      "members":{
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The sequence store ID for the store that is the destination of the multipart uploads.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        },
        "clientToken":{
          "shape":"ClientToken",
          "documentation":"<p>An idempotency token that can be used to avoid triggering multiple multipart uploads.</p>"
        },
        "sourceFileType":{
          "shape":"FileType",
          "documentation":"<p>The type of file being uploaded.</p>"
        },
        "subjectId":{
          "shape":"SubjectId",
          "documentation":"<p>The source's subject ID.</p>"
        },
        "sampleId":{
          "shape":"SampleId",
          "documentation":"<p>The source's sample ID.</p>"
        },
        "generatedFrom":{
          "shape":"GeneratedFrom",
          "documentation":"<p>Where the source originated.</p>"
        },
        "referenceArn":{
          "shape":"ReferenceArn",
          "documentation":"<p>The ARN of the reference.</p>"
        },
        "name":{
          "shape":"ReadSetName",
          "documentation":"<p>The name of the read set.</p>"
        },
        "description":{
          "shape":"ReadSetDescription",
          "documentation":"<p>The description of the read set.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>Any tags to add to the read set.</p>"
        }
      }
    },
    "CreateMultipartReadSetUploadResponse":{
      "type":"structure",
      "required":[
        "sequenceStoreId",
        "uploadId",
        "sourceFileType",
        "subjectId",
        "sampleId",
        "referenceArn",
        "creationTime"
      ],
      "members":{
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The sequence store ID for the store that the read set will be created in.</p>"
        },
        "uploadId":{
          "shape":"UploadId",
          "documentation":"<p>The ID for the initiated multipart upload.</p>"
        },
        "sourceFileType":{
          "shape":"FileType",
          "documentation":"<p>The file type of the read set source.</p>"
        },
        "subjectId":{
          "shape":"SubjectId",
          "documentation":"<p>The source's subject ID.</p>"
        },
        "sampleId":{
          "shape":"SampleId",
          "documentation":"<p>The source's sample ID.</p>"
        },
        "generatedFrom":{
          "shape":"GeneratedFrom",
          "documentation":"<p>The source of the read set.</p>"
        },
        "referenceArn":{
          "shape":"ReferenceArn",
          "documentation":"<p>The read set source's reference ARN.</p>"
        },
        "name":{
          "shape":"ReadSetName",
          "documentation":"<p>The name of the read set.</p>"
        },
        "description":{
          "shape":"ReadSetDescription",
          "documentation":"<p>The description of the read set.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>The tags to add to the read set.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The creation time of the multipart upload.</p>"
        }
      }
    },
    "CreateReferenceStoreRequest":{
      "type":"structure",
      "required":["name"],
      "members":{
        "name":{
          "shape":"ReferenceStoreName",
          "documentation":"<p>A name for the store.</p>"
        },
        "description":{
          "shape":"ReferenceStoreDescription",
          "documentation":"<p>A description for the store.</p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>Server-side encryption (SSE) settings for the store.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>Tags for the store.</p>"
        },
        "clientToken":{
          "shape":"ClientToken",
          "documentation":"<p>To ensure that requests don't run multiple times, specify a unique token for each request.</p>"
        }
      }
    },
    "CreateReferenceStoreResponse":{
      "type":"structure",
      "required":[
        "id",
        "arn",
        "creationTime"
      ],
      "members":{
        "id":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The store's ID.</p>"
        },
        "arn":{
          "shape":"ReferenceStoreArn",
          "documentation":"<p>The store's ARN.</p>"
        },
        "name":{
          "shape":"ReferenceStoreName",
          "documentation":"<p>The store's name.</p>"
        },
        "description":{
          "shape":"ReferenceStoreDescription",
          "documentation":"<p>The store's description.</p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>The store's SSE settings.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the store was created.</p>"
        }
      }
    },
    "CreateRunCacheRequest":{
      "type":"structure",
      "required":[
        "cacheS3Location",
        "requestId"
      ],
      "members":{
        "cacheBehavior":{
          "shape":"CacheBehavior",
          "documentation":"<p>Default cache behavior for runs that use this cache. Supported values are:</p> <p> <code>CACHE_ON_FAILURE</code>: Caches task outputs from completed tasks for runs that fail. This setting is useful if you're debugging a workflow that fails after several tasks completed successfully. The subsequent run uses the cache outputs for previously-completed tasks if the task definition, inputs, and container in ECR are identical to the prior run.</p> <p> <code>CACHE_ALWAYS</code>: Caches task outputs from completed tasks for all runs. This setting is useful in development mode, but do not use it in a production setting.</p> <p>If you don't specify a value, the default behavior is CACHE_ON_FAILURE. When you start a run that uses this cache, you can override the default cache behavior.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/how-run-cache.html#run-cache-behavior\">Run cache behavior</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>"
        },
        "cacheS3Location":{
          "shape":"S3UriForBucketOrObject",
          "documentation":"<p>Specify the S3 location for storing the cached task outputs. This data must be immediately accessible (not in an archived state).</p>"
        },
        "description":{
          "shape":"UserCustomDescription",
          "documentation":"<p>Enter a description of the run cache.</p>"
        },
        "name":{
          "shape":"UserCustomName",
          "documentation":"<p>Enter a user-friendly name for the run cache.</p>"
        },
        "requestId":{
          "shape":"RunCacheRequestId",
          "documentation":"<p>A unique request token, to ensure idempotency. If you don't specify a token, Amazon Web Services HealthOmics automatically generates a universally unique identifier (UUID) for the request.</p>",
          "idempotencyToken":true
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>Specify one or more tags to associate with this run cache.</p>"
        },
        "cacheBucketOwnerId":{
          "shape":"AwsAccountId",
          "documentation":"<p>The Amazon Web Services account ID of the expected owner of the S3 bucket for the run cache. If not provided, your account ID is set as the owner of the bucket.</p>"
        }
      }
    },
    "CreateRunCacheResponse":{
      "type":"structure",
      "members":{
        "arn":{
          "shape":"RunCacheArn",
          "documentation":"<p>Unique resource identifier for the run cache.</p>"
        },
        "id":{
          "shape":"RunCacheId",
          "documentation":"<p>Identifier for the run cache.</p>"
        },
        "status":{
          "shape":"RunCacheStatus",
          "documentation":"<p>Run cache status.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>The tags associated with this run cache.</p>"
        }
      }
    },
    "CreateRunGroupRequest":{
      "type":"structure",
      "required":["requestId"],
      "members":{
        "name":{
          "shape":"RunGroupName",
          "documentation":"<p>A name for the group.</p>"
        },
        "maxCpus":{
          "shape":"CreateRunGroupRequestMaxCpusInteger",
          "documentation":"<p>The maximum number of CPUs that can run concurrently across all active runs in the run group.</p>"
        },
        "maxRuns":{
          "shape":"CreateRunGroupRequestMaxRunsInteger",
          "documentation":"<p>The maximum number of runs that can be running at the same time.</p>"
        },
        "maxDuration":{
          "shape":"CreateRunGroupRequestMaxDurationInteger",
          "documentation":"<p>The maximum time for each run (in minutes). If a run exceeds the maximum run time, the run fails automatically.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>Tags for the group.</p>"
        },
        "requestId":{
          "shape":"RunGroupRequestId",
          "documentation":"<p>To ensure that requests don't run multiple times, specify a unique ID for each request.</p>",
          "idempotencyToken":true
        },
        "maxGpus":{
          "shape":"CreateRunGroupRequestMaxGpusInteger",
          "documentation":"<p>The maximum number of GPUs that can run concurrently across all active runs in the run group.</p>"
        }
      }
    },
    "CreateRunGroupRequestMaxCpusInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "CreateRunGroupRequestMaxDurationInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "CreateRunGroupRequestMaxGpusInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "CreateRunGroupRequestMaxRunsInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "CreateRunGroupResponse":{
      "type":"structure",
      "members":{
        "arn":{
          "shape":"RunGroupArn",
          "documentation":"<p>The group's ARN.</p>"
        },
        "id":{
          "shape":"RunGroupId",
          "documentation":"<p>The group's ID.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>Tags for the run group.</p>"
        }
      }
    },
    "CreateSequenceStoreRequest":{
      "type":"structure",
      "required":["name"],
      "members":{
        "name":{
          "shape":"SequenceStoreName",
          "documentation":"<p>A name for the store.</p>"
        },
        "description":{
          "shape":"SequenceStoreDescription",
          "documentation":"<p>A description for the store.</p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>Server-side encryption (SSE) settings for the store.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>Tags for the store. You can configure up to 50 tags.</p>"
        },
        "clientToken":{
          "shape":"ClientToken",
          "documentation":"<p>An idempotency token used to dedupe retry requests so that duplicate runs are not created.</p>",
          "idempotencyToken":true
        },
        "fallbackLocation":{
          "shape":"FallbackLocation",
          "documentation":"<p>An S3 location that is used to store files that have failed a direct upload. You can add or change the <code>fallbackLocation</code> after creating a sequence store. This is not required if you are uploading files from a different S3 bucket.</p>"
        },
        "eTagAlgorithmFamily":{
          "shape":"ETagAlgorithmFamily",
          "documentation":"<p>The ETag algorithm family to use for ingested read sets. The default value is MD5up. For more information on ETags, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/etags-and-provenance.html\">ETags and data provenance</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>"
        },
        "propagatedSetLevelTags":{
          "shape":"PropagatedSetLevelTags",
          "documentation":"<p>The tags keys to propagate to the S3 objects associated with read sets in the sequence store. These tags can be used as input to add metadata to your read sets.</p>"
        },
        "s3AccessConfig":{
          "shape":"S3AccessConfig",
          "documentation":"<p>S3 access configuration parameters. This specifies the parameters needed to access logs stored in S3 buckets. The S3 bucket must be in the same region and account as the sequence store. </p>"
        }
      }
    },
    "CreateSequenceStoreResponse":{
      "type":"structure",
      "required":[
        "id",
        "arn",
        "creationTime"
      ],
      "members":{
        "id":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The store's ID.</p>"
        },
        "arn":{
          "shape":"SequenceStoreArn",
          "documentation":"<p>The store's ARN.</p>"
        },
        "name":{
          "shape":"SequenceStoreName",
          "documentation":"<p>The store's name.</p>"
        },
        "description":{
          "shape":"SequenceStoreDescription",
          "documentation":"<p>The store's description.</p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>Server-side encryption (SSE) settings for the store. This contains the KMS key ARN that is used to encrypt read set objects.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the store was created.</p>"
        },
        "fallbackLocation":{
          "shape":"FallbackLocation",
          "documentation":"<p>An S3 location that is used to store files that have failed a direct upload.</p>"
        },
        "eTagAlgorithmFamily":{
          "shape":"ETagAlgorithmFamily",
          "documentation":"<p>The algorithm family of the ETag.</p>"
        },
        "status":{
          "shape":"SequenceStoreStatus",
          "documentation":"<p>The status of the sequence store.</p>"
        },
        "statusMessage":{
          "shape":"SequenceStoreStatusMessage",
          "documentation":"<p>The status message of the sequence store.</p>"
        },
        "propagatedSetLevelTags":{
          "shape":"PropagatedSetLevelTags",
          "documentation":"<p>The tags keys to propagate to the S3 objects associated with read sets in the sequence store.</p>"
        },
        "s3Access":{"shape":"SequenceStoreS3Access"}
      }
    },
    "CreateShareRequest":{
      "type":"structure",
      "required":[
        "resourceArn",
        "principalSubscriber"
      ],
      "members":{
        "resourceArn":{
          "shape":"String",
          "documentation":"<p>The ARN of the resource to be shared.</p>"
        },
        "principalSubscriber":{
          "shape":"String",
          "documentation":"<p>The principal subscriber is the account being offered shared access to the resource. </p>"
        },
        "shareName":{
          "shape":"ShareName",
          "documentation":"<p>A name that the owner defines for the share.</p>"
        }
      }
    },
    "CreateShareResponse":{
      "type":"structure",
      "members":{
        "shareId":{
          "shape":"String",
          "documentation":"<p>The ID that HealthOmics generates for the share.</p>"
        },
        "status":{
          "shape":"ShareStatus",
          "documentation":"<p>The status of the share.</p>"
        },
        "shareName":{
          "shape":"ShareName",
          "documentation":"<p>The name of the share.</p>"
        }
      }
    },
    "CreateVariantStoreRequest":{
      "type":"structure",
      "required":["reference"],
      "members":{
        "reference":{
          "shape":"ReferenceItem",
          "documentation":"<p>The genome reference for the store's variants.</p>"
        },
        "name":{
          "shape":"StoreName",
          "documentation":"<p>A name for the store.</p>"
        },
        "description":{
          "shape":"Description",
          "documentation":"<p>A description for the store.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>Tags for the store.</p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>Server-side encryption (SSE) settings for the store.</p>"
        }
      }
    },
    "CreateVariantStoreResponse":{
      "type":"structure",
      "required":[
        "id",
        "status",
        "name",
        "creationTime"
      ],
      "members":{
        "id":{
          "shape":"ResourceId",
          "documentation":"<p>The store's ID.</p>"
        },
        "reference":{
          "shape":"ReferenceItem",
          "documentation":"<p>The store's genome reference.</p>"
        },
        "status":{
          "shape":"StoreStatus",
          "documentation":"<p>The store's status.</p>"
        },
        "name":{
          "shape":"String",
          "documentation":"<p>The store's name.</p>"
        },
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p>When the store was created.</p>"
        }
      }
    },
    "CreateWorkflowRequest":{
      "type":"structure",
      "required":["requestId"],
      "members":{
        "name":{
          "shape":"WorkflowName",
          "documentation":"<p>Name (optional but highly recommended) for the workflow to locate relevant information in the CloudWatch logs and Amazon Web Services HealthOmics console. </p>"
        },
        "description":{
          "shape":"WorkflowDescription",
          "documentation":"<p>A description for the workflow.</p>"
        },
        "engine":{
          "shape":"WorkflowEngine",
          "documentation":"<p>The workflow engine for the workflow. This is only required if you have workflow definition files from more than one engine in your zip file. Otherwise, the service can detect the engine automatically from your workflow definition.</p>"
        },
        "definitionZip":{
          "shape":"Blob",
          "documentation":"<p>A ZIP archive containing the main workflow definition file and dependencies that it imports for the workflow. You can use a file with a ://fileb prefix instead of the Base64 string. For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/workflow-defn-requirements.html\">Workflow definition requirements</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>"
        },
        "definitionUri":{
          "shape":"WorkflowDefinition",
          "documentation":"<p>The S3 URI of a definition for the workflow. The S3 bucket must be in the same region as the workflow.</p>"
        },
        "main":{
          "shape":"WorkflowMain",
          "documentation":"<p>The path of the main definition file for the workflow. This parameter is not required if the ZIP archive contains only one workflow definition file, or if the main definition file is named “main”. An example path is: <code>workflow-definition/main-file.wdl</code>. </p>"
        },
        "parameterTemplate":{
          "shape":"WorkflowParameterTemplate",
          "documentation":"<p>A parameter template for the workflow. If this field is blank, Amazon Web Services HealthOmics will automatically parse the parameter template values from your workflow definition file. To override these service generated default values, provide a parameter template. To view an example of a parameter template, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/parameter-templates.html\">Parameter template files</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>"
        },
        "storageCapacity":{
          "shape":"CreateWorkflowRequestStorageCapacityInteger",
          "documentation":"<p>The default static storage capacity (in gibibytes) for runs that use this workflow or workflow version. The <code>storageCapacity</code> can be overwritten at run time. The storage capacity is not required for runs with a <code>DYNAMIC</code> storage type.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>Tags for the workflow. You can define up to 50 tags for the workflow. For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/add-a-tag.html\">Adding a tag</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>"
        },
        "requestId":{
          "shape":"WorkflowRequestId",
          "documentation":"<p>An idempotency token to ensure that duplicate workflows are not created when Amazon Web Services HealthOmics submits retry requests.</p>",
          "idempotencyToken":true
        },
        "accelerators":{
          "shape":"Accelerators",
          "documentation":"<p>The computational accelerator specified to run the workflow.</p>"
        },
        "storageType":{
          "shape":"StorageType",
          "documentation":"<p>The default storage type for runs that use this workflow. The <code>storageType</code> can be overridden at run time. <code>DYNAMIC</code> storage dynamically scales the storage up or down, based on file system utilization. <code>STATIC</code> storage allocates a fixed amount of storage. For more information about dynamic and static storage types, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/workflows-run-types.html\">Run storage types</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>"
        },
        "containerRegistryMap":{
          "shape":"ContainerRegistryMap",
          "documentation":"<p>(Optional) Use a container registry map to specify mappings between the ECR private repository and one or more upstream registries. For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/workflows-ecr.html\">Container images</a> in the <i>Amazon Web Services HealthOmics User Guide</i>. </p>"
        },
        "containerRegistryMapUri":{
          "shape":"Uri",
          "documentation":"<p>(Optional) URI of the S3 location for the registry mapping file.</p>"
        },
        "readmeMarkdown":{
          "shape":"ReadmeMarkdown",
          "documentation":"<p>The markdown content for the workflow's README file. This provides documentation and usage information for users of the workflow.</p>"
        },
        "parameterTemplatePath":{
          "shape":"ParameterTemplatePath",
          "documentation":"<p>The path to the workflow parameter template JSON file within the repository. This file defines the input parameters for runs that use this workflow. If not specified, the workflow will be created without a parameter template.</p>"
        },
        "readmePath":{
          "shape":"ReadmePath",
          "documentation":"<p>The path to the workflow README markdown file within the repository. This file provides documentation and usage information for the workflow. If not specified, the <code>README.md</code> file from the root directory of the repository will be used.</p>"
        },
        "definitionRepository":{
          "shape":"DefinitionRepository",
          "documentation":"<p>The repository information for the workflow definition. This allows you to source your workflow definition directly from a code repository.</p>"
        },
        "workflowBucketOwnerId":{
          "shape":"WorkflowBucketOwnerId",
          "documentation":"<p>The Amazon Web Services account ID of the expected owner of the S3 bucket that contains the workflow definition. If not specified, the service skips the validation.</p>"
        },
        "readmeUri":{
          "shape":"S3UriForObject",
          "documentation":"<p>The S3 URI of the README file for the workflow. This file provides documentation and usage information for the workflow. Requirements include:</p> <ul> <li> <p>The S3 URI must begin with <code>s3://USER-OWNED-BUCKET/</code> </p> </li> <li> <p>The requester must have access to the S3 bucket and object.</p> </li> <li> <p>The max README content length is 500 KiB.</p> </li> </ul>"
        }
      }
    },
    "CreateWorkflowRequestStorageCapacityInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":0
    },
    "CreateWorkflowResponse":{
      "type":"structure",
      "members":{
        "arn":{
          "shape":"WorkflowArn",
          "documentation":"<p>The workflow's ARN.</p>"
        },
        "id":{
          "shape":"WorkflowId",
          "documentation":"<p>The workflow's ID.</p>"
        },
        "status":{
          "shape":"WorkflowStatus",
          "documentation":"<p>The workflow's status.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>The workflow's tags.</p>"
        },
        "uuid":{
          "shape":"WorkflowUuid",
          "documentation":"<p>The universally unique identifier (UUID) value for this workflow.</p>"
        }
      }
    },
    "CreateWorkflowVersionRequest":{
      "type":"structure",
      "required":[
        "workflowId",
        "versionName",
        "requestId"
      ],
      "members":{
        "workflowId":{
          "shape":"WorkflowId",
          "documentation":"<p>The ID of the workflow where you are creating the new version. The <code>workflowId</code> is not the UUID.</p>",
          "location":"uri",
          "locationName":"workflowId"
        },
        "versionName":{
          "shape":"WorkflowVersionName",
          "documentation":"<p>A name for the workflow version. Provide a version name that is unique for this workflow. You cannot change the name after HealthOmics creates the version. </p> <p>The version name must start with a letter or number and it can include upper-case and lower-case letters, numbers, hyphens, periods and underscores. The maximum length is 64 characters. You can use a simple naming scheme, such as version1, version2, version3. You can also match your workflow versions with your own internal versioning conventions, such as 2.7.0, 2.7.1, 2.7.2.</p>"
        },
        "definitionZip":{
          "shape":"Blob",
          "documentation":"<p>A ZIP archive containing the main workflow definition file and dependencies that it imports for this workflow version. You can use a file with a ://fileb prefix instead of the Base64 string. For more information, see Workflow definition requirements in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>"
        },
        "definitionUri":{
          "shape":"WorkflowDefinition",
          "documentation":"<p>The S3 URI of a definition for this workflow version. The S3 bucket must be in the same region as this workflow version.</p>"
        },
        "accelerators":{
          "shape":"Accelerators",
          "documentation":"<p>The computational accelerator for this workflow version.</p>"
        },
        "description":{
          "shape":"WorkflowVersionDescription",
          "documentation":"<p>A description for this workflow version.</p>"
        },
        "engine":{
          "shape":"WorkflowEngine",
          "documentation":"<p>The workflow engine for this workflow version. This is only required if you have workflow definition files from more than one engine in your zip file. Otherwise, the service can detect the engine automatically from your workflow definition.</p>"
        },
        "main":{
          "shape":"WorkflowMain",
          "documentation":"<p>The path of the main definition file for this workflow version. This parameter is not required if the ZIP archive contains only one workflow definition file, or if the main definition file is named “main”. An example path is: <code>workflow-definition/main-file.wdl</code>. </p>"
        },
        "parameterTemplate":{
          "shape":"WorkflowParameterTemplate",
          "documentation":"<p>A parameter template for this workflow version. If this field is blank, Amazon Web Services HealthOmics will automatically parse the parameter template values from your workflow definition file. To override these service generated default values, provide a parameter template. To view an example of a parameter template, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/parameter-templates.html\">Parameter template files</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>"
        },
        "requestId":{
          "shape":"WorkflowRequestId",
          "documentation":"<p>An idempotency token to ensure that duplicate workflows are not created when Amazon Web Services HealthOmics submits retry requests.</p>",
          "idempotencyToken":true
        },
        "storageType":{
          "shape":"StorageType",
          "documentation":"<p>The default storage type for runs that use this workflow version. The <code>storageType</code> can be overridden at run time. <code>DYNAMIC</code> storage dynamically scales the storage up or down, based on file system utilization. STATIC storage allocates a fixed amount of storage. For more information about dynamic and static storage types, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/workflows-run-types.html\">Run storage types</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>"
        },
        "storageCapacity":{
          "shape":"CreateWorkflowVersionRequestStorageCapacityInteger",
          "documentation":"<p>The default static storage capacity (in gibibytes) for runs that use this workflow version. The <code>storageCapacity</code> can be overwritten at run time. The storage capacity is not required for runs with a <code>DYNAMIC</code> storage type.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>Tags for this workflow version. You can define up to 50 tags for the workflow. For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/add-a-tag.html\">Adding a tag</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>"
        },
        "workflowBucketOwnerId":{
          "shape":"WorkflowBucketOwnerId",
          "documentation":"<p>Amazon Web Services Id of the owner of the S3 bucket that contains the workflow definition. You need to specify this parameter if your account is not the bucket owner.</p>"
        },
        "containerRegistryMap":{
          "shape":"ContainerRegistryMap",
          "documentation":"<p>(Optional) Use a container registry map to specify mappings between the ECR private repository and one or more upstream registries. For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/workflows-ecr.html\">Container images</a> in the <i>Amazon Web Services HealthOmics User Guide</i>. </p>"
        },
        "containerRegistryMapUri":{
          "shape":"Uri",
          "documentation":"<p>(Optional) URI of the S3 location for the registry mapping file.</p>"
        },
        "readmeMarkdown":{
          "shape":"ReadmeMarkdown",
          "documentation":"<p>The markdown content for the workflow version's README file. This provides documentation and usage information for users of this specific workflow version.</p>"
        },
        "parameterTemplatePath":{
          "shape":"ParameterTemplatePath",
          "documentation":"<p>The path to the workflow version parameter template JSON file within the repository. This file defines the input parameters for runs that use this workflow version. If not specified, the workflow version will be created without a parameter template.</p>"
        },
        "readmePath":{
          "shape":"ReadmePath",
          "documentation":"<p>The path to the workflow version README markdown file within the repository. This file provides documentation and usage information for the workflow. If not specified, the <code>README.md</code> file from the root directory of the repository will be used.</p>"
        },
        "definitionRepository":{
          "shape":"DefinitionRepository",
          "documentation":"<p>The repository information for the workflow version definition. This allows you to source your workflow version definition directly from a code repository.</p>"
        },
        "readmeUri":{
          "shape":"S3UriForObject",
          "documentation":"<p>The S3 URI of the README file for the workflow version. This file provides documentation and usage information for the workflow version. Requirements include:</p> <ul> <li> <p>The S3 URI must begin with <code>s3://USER-OWNED-BUCKET/</code> </p> </li> <li> <p>The requester must have access to the S3 bucket and object.</p> </li> <li> <p>The max README content length is 500 KiB.</p> </li> </ul>"
        }
      }
    },
    "CreateWorkflowVersionRequestStorageCapacityInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":0
    },
    "CreateWorkflowVersionResponse":{
      "type":"structure",
      "members":{
        "arn":{
          "shape":"WorkflowVersionArn",
          "documentation":"<p>ARN of the workflow version.</p>"
        },
        "workflowId":{
          "shape":"WorkflowId",
          "documentation":"<p>The workflow's ID.</p>"
        },
        "versionName":{
          "shape":"WorkflowVersionName",
          "documentation":"<p>The workflow version name.</p>"
        },
        "status":{
          "shape":"WorkflowStatus",
          "documentation":"<p>The workflow version status.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>The workflow version's tags.</p>"
        },
        "uuid":{
          "shape":"WorkflowUuid",
          "documentation":"<p>The universally unique identifier (UUID) value for this workflow version.</p>"
        }
      }
    },
    "CreationJobId":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"[a-zA-Z0-9]+"
    },
    "CreationTime":{
      "type":"timestamp",
      "timestampFormat":"iso8601"
    },
    "CreationType":{
      "type":"string",
      "enum":[
        "IMPORT",
        "UPLOAD"
      ]
    },
    "DefinitionRepository":{
      "type":"structure",
      "required":[
        "connectionArn",
        "fullRepositoryId"
      ],
      "members":{
        "connectionArn":{
          "shape":"ConnectionArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the connection to the source code repository.</p>"
        },
        "fullRepositoryId":{
          "shape":"FullRepositoryId",
          "documentation":"<p>The full repository identifier, including the repository owner and name. For example, 'repository-owner/repository-name'.</p>"
        },
        "sourceReference":{
          "shape":"SourceReference",
          "documentation":"<p>The source reference for the repository, such as a branch name, tag, or commit ID.</p>"
        },
        "excludeFilePatterns":{
          "shape":"ExcludeFilePatternList",
          "documentation":"<p>A list of file patterns to exclude when retrieving the workflow definition from the repository.</p>"
        }
      },
      "documentation":"<p>Contains information about a source code repository that hosts the workflow definition files.</p>"
    },
    "DefinitionRepositoryDetails":{
      "type":"structure",
      "members":{
        "connectionArn":{
          "shape":"ConnectionArn",
          "documentation":"<p>The Amazon Resource Name (ARN) of the connection to the source code repository.</p>"
        },
        "fullRepositoryId":{
          "shape":"FullRepositoryId",
          "documentation":"<p>The full repository identifier, including the repository owner and name. For example, 'repository-owner/repository-name'.</p>"
        },
        "sourceReference":{
          "shape":"SourceReference",
          "documentation":"<p>The source reference for the repository, such as a branch name, tag, or commit ID.</p>"
        },
        "providerType":{
          "shape":"String",
          "documentation":"<p>The provider type of the source code repository, such as Bitbucket, GitHub, GitHubEnterpriseServer, GitLab, and GitLabSelfManaged.</p>"
        },
        "providerEndpoint":{
          "shape":"String",
          "documentation":"<p>The endpoint URL of the source code repository provider.</p>"
        }
      },
      "documentation":"<p>Contains detailed information about the source code repository that hosts the workflow definition files.</p>"
    },
    "DeleteAnnotationStoreRequest":{
      "type":"structure",
      "required":["name"],
      "members":{
        "name":{
          "shape":"String",
          "documentation":"<p>The store's name.</p>",
          "location":"uri",
          "locationName":"name"
        },
        "force":{
          "shape":"PrimitiveBoolean",
          "documentation":"<p>Whether to force deletion.</p>",
          "location":"querystring",
          "locationName":"force"
        }
      }
    },
    "DeleteAnnotationStoreResponse":{
      "type":"structure",
      "required":["status"],
      "members":{
        "status":{
          "shape":"StoreStatus",
          "documentation":"<p>The store's status.</p>"
        }
      }
    },
    "DeleteAnnotationStoreVersionsRequest":{
      "type":"structure",
      "required":[
        "name",
        "versions"
      ],
      "members":{
        "name":{
          "shape":"String",
          "documentation":"<p> The name of the annotation store from which versions are being deleted. </p>",
          "location":"uri",
          "locationName":"name"
        },
        "versions":{
          "shape":"VersionList",
          "documentation":"<p> The versions of an annotation store to be deleted. </p>"
        },
        "force":{
          "shape":"PrimitiveBoolean",
          "documentation":"<p> Forces the deletion of an annotation store version when imports are in-progress.. </p>",
          "location":"querystring",
          "locationName":"force"
        }
      }
    },
    "DeleteAnnotationStoreVersionsResponse":{
      "type":"structure",
      "members":{
        "errors":{
          "shape":"VersionDeleteErrorList",
          "documentation":"<p> Any errors that occur when attempting to delete an annotation store version. </p>"
        }
      }
    },
    "DeleteReferenceRequest":{
      "type":"structure",
      "required":[
        "id",
        "referenceStoreId"
      ],
      "members":{
        "id":{
          "shape":"ReferenceId",
          "documentation":"<p>The reference's ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "referenceStoreId":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The reference's store ID.</p>",
          "location":"uri",
          "locationName":"referenceStoreId"
        }
      }
    },
    "DeleteReferenceResponse":{
      "type":"structure",
      "members":{
      }
    },
    "DeleteReferenceStoreRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The store's ID.</p>",
          "location":"uri",
          "locationName":"id"
        }
      }
    },
    "DeleteReferenceStoreResponse":{
      "type":"structure",
      "members":{
      }
    },
    "DeleteRunCacheRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"RunCacheId",
          "documentation":"<p>Run cache identifier for the cache you want to delete.</p>",
          "location":"uri",
          "locationName":"id"
        }
      }
    },
    "DeleteRunGroupRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"RunGroupId",
          "documentation":"<p>The run group's ID.</p>",
          "location":"uri",
          "locationName":"id"
        }
      }
    },
    "DeleteRunRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"RunId",
          "documentation":"<p>The run's ID.</p>",
          "location":"uri",
          "locationName":"id"
        }
      }
    },
    "DeleteS3AccessPolicyRequest":{
      "type":"structure",
      "required":["s3AccessPointArn"],
      "members":{
        "s3AccessPointArn":{
          "shape":"S3AccessPointArn",
          "documentation":"<p>The S3 access point ARN that has the access policy.</p>",
          "location":"uri",
          "locationName":"s3AccessPointArn"
        }
      }
    },
    "DeleteS3AccessPolicyResponse":{
      "type":"structure",
      "members":{
      }
    },
    "DeleteSequenceStoreRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The sequence store's ID.</p>",
          "location":"uri",
          "locationName":"id"
        }
      }
    },
    "DeleteSequenceStoreResponse":{
      "type":"structure",
      "members":{
      }
    },
    "DeleteShareRequest":{
      "type":"structure",
      "required":["shareId"],
      "members":{
        "shareId":{
          "shape":"String",
          "documentation":"<p>The ID for the resource share to be deleted.</p>",
          "location":"uri",
          "locationName":"shareId"
        }
      }
    },
    "DeleteShareResponse":{
      "type":"structure",
      "members":{
        "status":{
          "shape":"ShareStatus",
          "documentation":"<p>The status of the share being deleted.</p>"
        }
      }
    },
    "DeleteVariantStoreRequest":{
      "type":"structure",
      "required":["name"],
      "members":{
        "name":{
          "shape":"String",
          "documentation":"<p>The store's name.</p>",
          "location":"uri",
          "locationName":"name"
        },
        "force":{
          "shape":"PrimitiveBoolean",
          "documentation":"<p>Whether to force deletion.</p>",
          "location":"querystring",
          "locationName":"force"
        }
      }
    },
    "DeleteVariantStoreResponse":{
      "type":"structure",
      "required":["status"],
      "members":{
        "status":{
          "shape":"StoreStatus",
          "documentation":"<p>The store's status.</p>"
        }
      }
    },
    "DeleteWorkflowRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"WorkflowId",
          "documentation":"<p>The workflow's ID.</p>",
          "location":"uri",
          "locationName":"id"
        }
      }
    },
    "DeleteWorkflowVersionRequest":{
      "type":"structure",
      "required":[
        "workflowId",
        "versionName"
      ],
      "members":{
        "workflowId":{
          "shape":"WorkflowId",
          "documentation":"<p>The workflow's ID.</p>",
          "location":"uri",
          "locationName":"workflowId"
        },
        "versionName":{
          "shape":"WorkflowVersionName",
          "documentation":"<p>The workflow version name.</p>",
          "location":"uri",
          "locationName":"versionName"
        }
      }
    },
    "Description":{
      "type":"string",
      "max":500,
      "min":0
    },
    "ETag":{
      "type":"structure",
      "members":{
        "algorithm":{
          "shape":"ETagAlgorithm",
          "documentation":"<p>The algorithm used to calculate the read set’s ETag(s).</p>"
        },
        "source1":{
          "shape":"String",
          "documentation":"<p>The ETag hash calculated on Source1 of the read set.</p>"
        },
        "source2":{
          "shape":"String",
          "documentation":"<p>The ETag hash calculated on Source2 of the read set.</p>"
        }
      },
      "documentation":"<p>The entity tag (ETag) is a hash of the object representing its semantic content.</p>"
    },
    "ETagAlgorithm":{
      "type":"string",
      "enum":[
        "FASTQ_MD5up",
        "BAM_MD5up",
        "CRAM_MD5up",
        "FASTQ_SHA256up",
        "BAM_SHA256up",
        "CRAM_SHA256up",
        "FASTQ_SHA512up",
        "BAM_SHA512up",
        "CRAM_SHA512up"
      ]
    },
    "ETagAlgorithmFamily":{
      "type":"string",
      "enum":[
        "MD5up",
        "SHA256up",
        "SHA512up"
      ]
    },
    "EcrRepositoryPrefix":{
      "type":"string",
      "max":256,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "Encoding":{
      "type":"string",
      "max":20,
      "min":1
    },
    "EncryptionType":{
      "type":"string",
      "enum":["KMS"]
    },
    "EngineLogStream":{
      "type":"string",
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "EngineVersion":{
      "type":"string",
      "pattern":"[0-9]{2}.[0-9]{2}.[0-9]"
    },
    "EscapeChar":{
      "type":"string",
      "max":1,
      "min":1
    },
    "EscapeQuotes":{"type":"boolean"},
    "ExcludeFilePatternList":{
      "type":"list",
      "member":{"shape":"String"},
      "max":50,
      "min":1
    },
    "ExportJobId":{
      "type":"string",
      "max":36,
      "min":10,
      "pattern":"[0-9]+"
    },
    "ExportReadSet":{
      "type":"structure",
      "required":["readSetId"],
      "members":{
        "readSetId":{
          "shape":"ReadSetId",
          "documentation":"<p>The set's ID.</p>"
        }
      },
      "documentation":"<p>A read set.</p>"
    },
    "ExportReadSetDetail":{
      "type":"structure",
      "required":[
        "id",
        "status"
      ],
      "members":{
        "id":{
          "shape":"ReadSetId",
          "documentation":"<p>The set's ID.</p>"
        },
        "status":{
          "shape":"ReadSetExportJobItemStatus",
          "documentation":"<p>The set's status.</p>"
        },
        "statusMessage":{
          "shape":"JobStatusMessage",
          "documentation":"<p>The set's status message.</p>"
        }
      },
      "documentation":"<p>Details about a read set.</p>"
    },
    "ExportReadSetDetailList":{
      "type":"list",
      "member":{"shape":"ExportReadSetDetail"}
    },
    "ExportReadSetFilter":{
      "type":"structure",
      "members":{
        "status":{
          "shape":"ReadSetExportJobStatus",
          "documentation":"<p>A status to filter on.</p>"
        },
        "createdAfter":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's start date.</p>"
        },
        "createdBefore":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's end date.</p>"
        }
      },
      "documentation":"<p>An read set export job filter.</p>"
    },
    "ExportReadSetJobDetail":{
      "type":"structure",
      "required":[
        "id",
        "sequenceStoreId",
        "destination",
        "status",
        "creationTime"
      ],
      "members":{
        "id":{
          "shape":"ExportJobId",
          "documentation":"<p>The job's ID.</p>"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The job's sequence store ID.</p>"
        },
        "destination":{
          "shape":"S3Destination",
          "documentation":"<p>The job's destination in Amazon S3.</p>"
        },
        "status":{
          "shape":"ReadSetExportJobStatus",
          "documentation":"<p>The job's status.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job was created.</p>"
        },
        "completionTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job completed.</p>"
        }
      },
      "documentation":"<p>Details about a read set export job.</p>"
    },
    "ExportReadSetJobDetailList":{
      "type":"list",
      "member":{"shape":"ExportReadSetJobDetail"}
    },
    "FallbackLocation":{
      "type":"string",
      "pattern":"$|^s3://([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])/?((.{1,1024})/)?"
    },
    "FileInformation":{
      "type":"structure",
      "members":{
        "totalParts":{
          "shape":"FileInformationTotalPartsInteger",
          "documentation":"<p>The file's total parts.</p>"
        },
        "partSize":{
          "shape":"FileInformationPartSizeLong",
          "documentation":"<p>The file's part size.</p>"
        },
        "contentLength":{
          "shape":"FileInformationContentLengthLong",
          "documentation":"<p>The file's content length.</p>"
        },
        "s3Access":{
          "shape":"ReadSetS3Access",
          "documentation":"<p>The S3 URI metadata of a sequence store.</p>"
        }
      },
      "documentation":"<p>Details about a file.</p>"
    },
    "FileInformationContentLengthLong":{
      "type":"long",
      "box":true,
      "max":5497558138880,
      "min":1
    },
    "FileInformationPartSizeLong":{
      "type":"long",
      "box":true,
      "max":5368709120,
      "min":1
    },
    "FileInformationTotalPartsInteger":{
      "type":"integer",
      "box":true,
      "max":10000,
      "min":1
    },
    "FileType":{
      "type":"string",
      "enum":[
        "FASTQ",
        "BAM",
        "CRAM",
        "UBAM"
      ]
    },
    "Filter":{
      "type":"structure",
      "members":{
        "resourceArns":{
          "shape":"ArnList",
          "documentation":"<p>Filter based on the Amazon Resource Number (ARN) of the resource. You can specify up to 10 values.</p>"
        },
        "status":{
          "shape":"StatusList",
          "documentation":"<p>Filter based on the resource status. You can specify up to 10 values.</p>"
        },
        "type":{
          "shape":"TypeList",
          "documentation":"<p>The type of resources to be filtered. You can specify one or more of the resource types.</p>"
        }
      },
      "documentation":"<p>Use filters to return a subset of resources. You can define filters for specific parameters, such as the resource status.</p>"
    },
    "FormatOptions":{
      "type":"structure",
      "members":{
        "tsvOptions":{
          "shape":"TsvOptions",
          "documentation":"<p>Options for a TSV file.</p>"
        },
        "vcfOptions":{
          "shape":"VcfOptions",
          "documentation":"<p>Options for a VCF file.</p>"
        }
      },
      "documentation":"<p>Formatting options for a file.</p>",
      "union":true
    },
    "FormatToHeader":{
      "type":"map",
      "key":{"shape":"FormatToHeaderKey"},
      "value":{"shape":"FormatToHeaderValueString"}
    },
    "FormatToHeaderKey":{
      "type":"string",
      "enum":[
        "CHR",
        "START",
        "END",
        "REF",
        "ALT",
        "POS"
      ]
    },
    "FormatToHeaderValueString":{
      "type":"string",
      "max":1000,
      "min":0
    },
    "FullRepositoryId":{
      "type":"string",
      "pattern":".+/.+"
    },
    "GeneratedFrom":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "GetAnnotationImportRequest":{
      "type":"structure",
      "required":["jobId"],
      "members":{
        "jobId":{
          "shape":"ResourceId",
          "documentation":"<p>The job's ID.</p>",
          "location":"uri",
          "locationName":"jobId"
        }
      }
    },
    "GetAnnotationImportResponse":{
      "type":"structure",
      "required":[
        "id",
        "destinationName",
        "versionName",
        "roleArn",
        "status",
        "statusMessage",
        "creationTime",
        "updateTime",
        "completionTime",
        "items",
        "runLeftNormalization",
        "formatOptions"
      ],
      "members":{
        "id":{
          "shape":"ResourceId",
          "documentation":"<p>The job's ID.</p>"
        },
        "destinationName":{
          "shape":"StoreName",
          "documentation":"<p>The job's destination annotation store.</p>"
        },
        "versionName":{
          "shape":"VersionName",
          "documentation":"<p> The name of the annotation store version. </p>"
        },
        "roleArn":{
          "shape":"Arn",
          "documentation":"<p>The job's service role ARN.</p>"
        },
        "status":{
          "shape":"JobStatus",
          "documentation":"<p>The job's status.</p>"
        },
        "statusMessage":{
          "shape":"JobStatusMsg",
          "documentation":"<p>The job's status message.</p>"
        },
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p>When the job was created.</p>"
        },
        "updateTime":{
          "shape":"UpdateTime",
          "documentation":"<p>When the job was updated.</p>"
        },
        "completionTime":{
          "shape":"CompletionTime",
          "documentation":"<p>When the job completed.</p>"
        },
        "items":{
          "shape":"AnnotationImportItemDetails",
          "documentation":"<p>The job's imported items.</p>"
        },
        "runLeftNormalization":{
          "shape":"RunLeftNormalization",
          "documentation":"<p>The job's left normalization setting.</p>"
        },
        "formatOptions":{"shape":"FormatOptions"},
        "annotationFields":{
          "shape":"AnnotationFieldMap",
          "documentation":"<p>The annotation schema generated by the parsed annotation data.</p>"
        }
      }
    },
    "GetAnnotationStoreRequest":{
      "type":"structure",
      "required":["name"],
      "members":{
        "name":{
          "shape":"String",
          "documentation":"<p>The store's name.</p>",
          "location":"uri",
          "locationName":"name"
        }
      }
    },
    "GetAnnotationStoreResponse":{
      "type":"structure",
      "required":[
        "id",
        "reference",
        "status",
        "storeArn",
        "name",
        "description",
        "sseConfig",
        "creationTime",
        "updateTime",
        "tags",
        "statusMessage",
        "storeSizeBytes",
        "numVersions"
      ],
      "members":{
        "id":{
          "shape":"ResourceId",
          "documentation":"<p>The store's ID.</p>"
        },
        "reference":{
          "shape":"ReferenceItem",
          "documentation":"<p>The store's genome reference.</p>"
        },
        "status":{
          "shape":"StoreStatus",
          "documentation":"<p>The store's status.</p>"
        },
        "storeArn":{
          "shape":"Arn",
          "documentation":"<p>The store's ARN.</p>"
        },
        "name":{
          "shape":"String",
          "documentation":"<p>The store's name.</p>"
        },
        "description":{
          "shape":"Description",
          "documentation":"<p>The store's description.</p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>The store's server-side encryption (SSE) settings.</p>"
        },
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p>When the store was created.</p>"
        },
        "updateTime":{
          "shape":"UpdateTime",
          "documentation":"<p>When the store was updated.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>The store's tags.</p>"
        },
        "storeOptions":{
          "shape":"StoreOptions",
          "documentation":"<p>The store's parsing options.</p>"
        },
        "storeFormat":{
          "shape":"StoreFormat",
          "documentation":"<p>The store's annotation file format.</p>"
        },
        "statusMessage":{
          "shape":"StatusMessage",
          "documentation":"<p>A status message.</p>"
        },
        "storeSizeBytes":{
          "shape":"Long",
          "documentation":"<p>The store's size in bytes.</p>"
        },
        "numVersions":{
          "shape":"Integer",
          "documentation":"<p> An integer indicating how many versions of an annotation store exist. </p>"
        }
      }
    },
    "GetAnnotationStoreVersionRequest":{
      "type":"structure",
      "required":[
        "name",
        "versionName"
      ],
      "members":{
        "name":{
          "shape":"String",
          "documentation":"<p> The name given to an annotation store version to distinguish it from others. </p>",
          "location":"uri",
          "locationName":"name"
        },
        "versionName":{
          "shape":"String",
          "documentation":"<p> The name given to an annotation store version to distinguish it from others. </p>",
          "location":"uri",
          "locationName":"versionName"
        }
      }
    },
    "GetAnnotationStoreVersionResponse":{
      "type":"structure",
      "required":[
        "storeId",
        "id",
        "status",
        "versionArn",
        "name",
        "versionName",
        "description",
        "creationTime",
        "updateTime",
        "tags",
        "statusMessage",
        "versionSizeBytes"
      ],
      "members":{
        "storeId":{
          "shape":"ResourceId",
          "documentation":"<p> The store ID for annotation store version. </p>"
        },
        "id":{
          "shape":"ResourceId",
          "documentation":"<p> The annotation store version ID. </p>"
        },
        "status":{
          "shape":"VersionStatus",
          "documentation":"<p> The status of an annotation store version. </p>"
        },
        "versionArn":{
          "shape":"Arn",
          "documentation":"<p> The Arn for the annotation store. </p>"
        },
        "name":{
          "shape":"StoreName",
          "documentation":"<p> The name of the annotation store. </p>"
        },
        "versionName":{
          "shape":"VersionName",
          "documentation":"<p> The name given to an annotation store version to distinguish it from others. </p>"
        },
        "description":{
          "shape":"Description",
          "documentation":"<p> The description for an annotation store version. </p>"
        },
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p> The time stamp for when an annotation store version was created. </p>"
        },
        "updateTime":{
          "shape":"UpdateTime",
          "documentation":"<p> The time stamp for when an annotation store version was updated. </p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p> Any tags associated with an annotation store version. </p>"
        },
        "versionOptions":{
          "shape":"VersionOptions",
          "documentation":"<p> The options for an annotation store version. </p>"
        },
        "statusMessage":{
          "shape":"StatusMessage",
          "documentation":"<p> The status of an annotation store version. </p>"
        },
        "versionSizeBytes":{
          "shape":"Long",
          "documentation":"<p> The size of the annotation store version in Bytes. </p>"
        }
      }
    },
    "GetReadSetActivationJobRequest":{
      "type":"structure",
      "required":[
        "id",
        "sequenceStoreId"
      ],
      "members":{
        "id":{
          "shape":"ActivationJobId",
          "documentation":"<p>The job's ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The job's sequence store ID.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        }
      }
    },
    "GetReadSetActivationJobResponse":{
      "type":"structure",
      "required":[
        "id",
        "sequenceStoreId",
        "status",
        "creationTime"
      ],
      "members":{
        "id":{
          "shape":"ActivationJobId",
          "documentation":"<p>The job's ID.</p>"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The job's sequence store ID.</p>"
        },
        "status":{
          "shape":"ReadSetActivationJobStatus",
          "documentation":"<p>The job's status.</p>"
        },
        "statusMessage":{
          "shape":"JobStatusMessage",
          "documentation":"<p>The job's status message.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job was created.</p>"
        },
        "completionTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job completed.</p>"
        },
        "sources":{
          "shape":"ActivateReadSetSourceList",
          "documentation":"<p>The job's source files.</p>"
        }
      }
    },
    "GetReadSetExportJobRequest":{
      "type":"structure",
      "required":[
        "sequenceStoreId",
        "id"
      ],
      "members":{
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The job's sequence store ID.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        },
        "id":{
          "shape":"ExportJobId",
          "documentation":"<p>The job's ID.</p>",
          "location":"uri",
          "locationName":"id"
        }
      }
    },
    "GetReadSetExportJobResponse":{
      "type":"structure",
      "required":[
        "id",
        "sequenceStoreId",
        "destination",
        "status",
        "creationTime"
      ],
      "members":{
        "id":{
          "shape":"ExportJobId",
          "documentation":"<p>The job's ID.</p>"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The job's sequence store ID.</p>"
        },
        "destination":{
          "shape":"S3Destination",
          "documentation":"<p>The job's destination in Amazon S3.</p>"
        },
        "status":{
          "shape":"ReadSetExportJobStatus",
          "documentation":"<p>The job's status.</p>"
        },
        "statusMessage":{
          "shape":"JobStatusMessage",
          "documentation":"<p>The job's status message.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job was created.</p>"
        },
        "completionTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job completed.</p>"
        },
        "readSets":{
          "shape":"ExportReadSetDetailList",
          "documentation":"<p>The job's read sets.</p>"
        }
      }
    },
    "GetReadSetImportJobRequest":{
      "type":"structure",
      "required":[
        "id",
        "sequenceStoreId"
      ],
      "members":{
        "id":{
          "shape":"ImportJobId",
          "documentation":"<p>The job's ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The job's sequence store ID.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        }
      }
    },
    "GetReadSetImportJobResponse":{
      "type":"structure",
      "required":[
        "id",
        "sequenceStoreId",
        "roleArn",
        "status",
        "creationTime",
        "sources"
      ],
      "members":{
        "id":{
          "shape":"ImportJobId",
          "documentation":"<p>The job's ID.</p>"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The job's sequence store ID.</p>"
        },
        "roleArn":{
          "shape":"RoleArn",
          "documentation":"<p>The job's service role ARN.</p>"
        },
        "status":{
          "shape":"ReadSetImportJobStatus",
          "documentation":"<p>The job's status.</p>"
        },
        "statusMessage":{
          "shape":"JobStatusMessage",
          "documentation":"<p>The job's status message.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job was created.</p>"
        },
        "completionTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job completed.</p>"
        },
        "sources":{
          "shape":"ImportReadSetSourceList",
          "documentation":"<p>The job's source files.</p>"
        }
      }
    },
    "GetReadSetMetadataRequest":{
      "type":"structure",
      "required":[
        "id",
        "sequenceStoreId"
      ],
      "members":{
        "id":{
          "shape":"ReadSetId",
          "documentation":"<p>The read set's ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The read set's sequence store ID.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        }
      }
    },
    "GetReadSetMetadataResponse":{
      "type":"structure",
      "required":[
        "id",
        "arn",
        "sequenceStoreId",
        "status",
        "fileType",
        "creationTime"
      ],
      "members":{
        "id":{
          "shape":"ReadSetId",
          "documentation":"<p>The read set's ID.</p>"
        },
        "arn":{
          "shape":"ReadSetArn",
          "documentation":"<p>The read set's ARN.</p>"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The read set's sequence store ID.</p>"
        },
        "subjectId":{
          "shape":"SubjectId",
          "documentation":"<p>The read set's subject ID.</p>"
        },
        "sampleId":{
          "shape":"SampleId",
          "documentation":"<p>The read set's sample ID.</p>"
        },
        "status":{
          "shape":"ReadSetStatus",
          "documentation":"<p>The read set's status.</p>"
        },
        "name":{
          "shape":"ReadSetName",
          "documentation":"<p>The read set's name.</p>"
        },
        "description":{
          "shape":"ReadSetDescription",
          "documentation":"<p>The read set's description.</p>"
        },
        "fileType":{
          "shape":"FileType",
          "documentation":"<p>The read set's file type.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the read set was created.</p>"
        },
        "sequenceInformation":{
          "shape":"SequenceInformation",
          "documentation":"<p>The read set's sequence information.</p>"
        },
        "referenceArn":{
          "shape":"ReferenceArn",
          "documentation":"<p>The read set's genome reference ARN.</p>"
        },
        "files":{
          "shape":"ReadSetFiles",
          "documentation":"<p>The read set's files.</p>"
        },
        "statusMessage":{
          "shape":"ReadSetStatusMessage",
          "documentation":"<p>The status message for a read set. It provides more detail as to why the read set has a status. </p>"
        },
        "creationType":{
          "shape":"CreationType",
          "documentation":"<p> The creation type of the read set. </p>"
        },
        "etag":{
          "shape":"ETag",
          "documentation":"<p>The entity tag (ETag) is a hash of the object meant to represent its semantic content.</p>"
        },
        "creationJobId":{
          "shape":"CreationJobId",
          "documentation":"<p>The read set's creation job ID.</p>"
        }
      }
    },
    "GetReadSetRequest":{
      "type":"structure",
      "required":[
        "id",
        "sequenceStoreId",
        "partNumber"
      ],
      "members":{
        "id":{
          "shape":"ReadSetId",
          "documentation":"<p>The read set's ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The read set's sequence store ID.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        },
        "file":{
          "shape":"ReadSetFile",
          "documentation":"<p>The file to retrieve.</p>",
          "location":"querystring",
          "locationName":"file"
        },
        "partNumber":{
          "shape":"GetReadSetRequestPartNumberInteger",
          "documentation":"<p>The part number to retrieve.</p>",
          "location":"querystring",
          "locationName":"partNumber"
        }
      }
    },
    "GetReadSetRequestPartNumberInteger":{
      "type":"integer",
      "box":true,
      "max":10000,
      "min":1
    },
    "GetReadSetResponse":{
      "type":"structure",
      "members":{
        "payload":{
          "shape":"ReadSetStreamingBlob",
          "documentation":"<p>The read set file payload.</p>"
        }
      },
      "payload":"payload"
    },
    "GetReferenceImportJobRequest":{
      "type":"structure",
      "required":[
        "id",
        "referenceStoreId"
      ],
      "members":{
        "id":{
          "shape":"ImportJobId",
          "documentation":"<p>The job's ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "referenceStoreId":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The job's reference store ID.</p>",
          "location":"uri",
          "locationName":"referenceStoreId"
        }
      }
    },
    "GetReferenceImportJobResponse":{
      "type":"structure",
      "required":[
        "id",
        "referenceStoreId",
        "roleArn",
        "status",
        "creationTime",
        "sources"
      ],
      "members":{
        "id":{
          "shape":"ImportJobId",
          "documentation":"<p>The job's ID.</p>"
        },
        "referenceStoreId":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The job's reference store ID.</p>"
        },
        "roleArn":{
          "shape":"RoleArn",
          "documentation":"<p>The job's service role ARN.</p>"
        },
        "status":{
          "shape":"ReferenceImportJobStatus",
          "documentation":"<p>The job's status.</p>"
        },
        "statusMessage":{
          "shape":"JobStatusMessage",
          "documentation":"<p>The job's status message.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job was created.</p>"
        },
        "completionTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job completed.</p>"
        },
        "sources":{
          "shape":"ImportReferenceSourceList",
          "documentation":"<p>The job's source files.</p>"
        }
      }
    },
    "GetReferenceMetadataRequest":{
      "type":"structure",
      "required":[
        "id",
        "referenceStoreId"
      ],
      "members":{
        "id":{
          "shape":"ReferenceId",
          "documentation":"<p>The reference's ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "referenceStoreId":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The reference's reference store ID.</p>",
          "location":"uri",
          "locationName":"referenceStoreId"
        }
      }
    },
    "GetReferenceMetadataResponse":{
      "type":"structure",
      "required":[
        "id",
        "arn",
        "referenceStoreId",
        "md5",
        "creationTime",
        "updateTime"
      ],
      "members":{
        "id":{
          "shape":"ReferenceId",
          "documentation":"<p>The reference's ID.</p>"
        },
        "arn":{
          "shape":"ReferenceArn",
          "documentation":"<p>The reference's ARN.</p>"
        },
        "referenceStoreId":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The reference's reference store ID.</p>"
        },
        "md5":{
          "shape":"Md5",
          "documentation":"<p>The reference's MD5 checksum.</p>"
        },
        "status":{
          "shape":"ReferenceStatus",
          "documentation":"<p>The reference's status.</p>"
        },
        "name":{
          "shape":"ReferenceName",
          "documentation":"<p>The reference's name.</p>"
        },
        "description":{
          "shape":"ReferenceDescription",
          "documentation":"<p>The reference's description.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the reference was created.</p>"
        },
        "updateTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the reference was updated.</p>"
        },
        "files":{
          "shape":"ReferenceFiles",
          "documentation":"<p>The reference's files.</p>"
        },
        "creationType":{
          "shape":"ReferenceCreationType",
          "documentation":"<p>The reference's creation type.</p>"
        },
        "creationJobId":{
          "shape":"CreationJobId",
          "documentation":"<p>The reference's creation job ID.</p>"
        }
      }
    },
    "GetReferenceRequest":{
      "type":"structure",
      "required":[
        "id",
        "referenceStoreId",
        "partNumber"
      ],
      "members":{
        "id":{
          "shape":"ReferenceId",
          "documentation":"<p>The reference's ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "referenceStoreId":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The reference's store ID.</p>",
          "location":"uri",
          "locationName":"referenceStoreId"
        },
        "range":{
          "shape":"Range",
          "documentation":"<p>The range to retrieve.</p>",
          "location":"header",
          "locationName":"Range"
        },
        "partNumber":{
          "shape":"GetReferenceRequestPartNumberInteger",
          "documentation":"<p>The part number to retrieve.</p>",
          "location":"querystring",
          "locationName":"partNumber"
        },
        "file":{
          "shape":"ReferenceFile",
          "documentation":"<p>The file to retrieve.</p>",
          "location":"querystring",
          "locationName":"file"
        }
      }
    },
    "GetReferenceRequestPartNumberInteger":{
      "type":"integer",
      "box":true,
      "max":10000,
      "min":1
    },
    "GetReferenceResponse":{
      "type":"structure",
      "members":{
        "payload":{
          "shape":"ReferenceStreamingBlob",
          "documentation":"<p>The reference file payload.</p>"
        }
      },
      "payload":"payload"
    },
    "GetReferenceStoreRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The store's ID.</p>",
          "location":"uri",
          "locationName":"id"
        }
      }
    },
    "GetReferenceStoreResponse":{
      "type":"structure",
      "required":[
        "id",
        "arn",
        "creationTime"
      ],
      "members":{
        "id":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The store's ID.</p>"
        },
        "arn":{
          "shape":"ReferenceStoreArn",
          "documentation":"<p>The store's ARN.</p>"
        },
        "name":{
          "shape":"ReferenceStoreName",
          "documentation":"<p>The store's name.</p>"
        },
        "description":{
          "shape":"ReferenceStoreDescription",
          "documentation":"<p>The store's description.</p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>The store's server-side encryption (SSE) settings.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the store was created.</p>"
        }
      }
    },
    "GetRunCacheRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"RunCacheId",
          "documentation":"<p>The identifier of the run cache to retrieve.</p>",
          "location":"uri",
          "locationName":"id"
        }
      }
    },
    "GetRunCacheResponse":{
      "type":"structure",
      "members":{
        "arn":{
          "shape":"RunCacheArn",
          "documentation":"<p>Unique resource identifier for the run cache.</p>"
        },
        "cacheBehavior":{
          "shape":"CacheBehavior",
          "documentation":"<p>The default cache behavior for runs using this cache.</p>"
        },
        "cacheBucketOwnerId":{
          "shape":"AwsAccountId",
          "documentation":"<p>The identifier of the bucket owner.</p>"
        },
        "cacheS3Uri":{
          "shape":"S3UriForBucketOrObject",
          "documentation":"<p>The S3 URI where the cache data is stored.</p>"
        },
        "creationTime":{
          "shape":"RunCacheTimestamp",
          "documentation":"<p>Creation time of the run cache (an ISO 8601 formatted string).</p>"
        },
        "description":{
          "shape":"UserCustomDescription",
          "documentation":"<p>The run cache description.</p>"
        },
        "id":{
          "shape":"RunCacheId",
          "documentation":"<p>The run cache ID.</p>"
        },
        "name":{
          "shape":"UserCustomName",
          "documentation":"<p>The run cache name.</p>"
        },
        "status":{
          "shape":"RunCacheStatus",
          "documentation":"<p>The run cache status.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>The tags associated with the run cache.</p>"
        }
      }
    },
    "GetRunGroupRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"RunGroupId",
          "documentation":"<p>The group's ID.</p>",
          "location":"uri",
          "locationName":"id"
        }
      }
    },
    "GetRunGroupResponse":{
      "type":"structure",
      "members":{
        "arn":{
          "shape":"RunGroupArn",
          "documentation":"<p>The group's ARN.</p>"
        },
        "id":{
          "shape":"RunGroupId",
          "documentation":"<p>The group's ID.</p>"
        },
        "name":{
          "shape":"RunGroupName",
          "documentation":"<p>The group's name.</p>"
        },
        "maxCpus":{
          "shape":"GetRunGroupResponseMaxCpusInteger",
          "documentation":"<p>The group's maximum number of CPUs to use.</p>"
        },
        "maxRuns":{
          "shape":"GetRunGroupResponseMaxRunsInteger",
          "documentation":"<p>The maximum number of concurrent runs for the group.</p>"
        },
        "maxDuration":{
          "shape":"GetRunGroupResponseMaxDurationInteger",
          "documentation":"<p>The group's maximum run time in minutes.</p>"
        },
        "creationTime":{
          "shape":"RunGroupTimestamp",
          "documentation":"<p>When the group was created.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>The group's tags.</p>"
        },
        "maxGpus":{
          "shape":"GetRunGroupResponseMaxGpusInteger",
          "documentation":"<p>The maximum GPUs that can be used by a run group.</p>"
        }
      }
    },
    "GetRunGroupResponseMaxCpusInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "GetRunGroupResponseMaxDurationInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "GetRunGroupResponseMaxGpusInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "GetRunGroupResponseMaxRunsInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "GetRunRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"RunId",
          "documentation":"<p>The run's ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "export":{
          "shape":"RunExportList",
          "documentation":"<p>The run's export format.</p>",
          "location":"querystring",
          "locationName":"export"
        }
      }
    },
    "GetRunResponse":{
      "type":"structure",
      "members":{
        "arn":{
          "shape":"RunArn",
          "documentation":"<p>The run's ARN.</p>"
        },
        "id":{
          "shape":"RunId",
          "documentation":"<p>The run's ID.</p>"
        },
        "cacheId":{
          "shape":"NumericIdInArn",
          "documentation":"<p>The run cache associated with the run.</p>"
        },
        "cacheBehavior":{
          "shape":"CacheBehavior",
          "documentation":"<p>The run cache behavior for the run.</p>"
        },
        "engineVersion":{
          "shape":"EngineVersion",
          "documentation":"<p>The actual Nextflow engine version that Amazon Web Services HealthOmics used for the run. The other workflow definition languages don't provide a value for this field.</p>"
        },
        "status":{
          "shape":"RunStatus",
          "documentation":"<p>The run's status.</p>"
        },
        "workflowId":{
          "shape":"WorkflowId",
          "documentation":"<p>The run's workflow ID.</p>"
        },
        "workflowType":{
          "shape":"WorkflowType",
          "documentation":"<p>The run's workflow type.</p>"
        },
        "runId":{
          "shape":"RunId",
          "documentation":"<p>The run's ID.</p>"
        },
        "roleArn":{
          "shape":"RunRoleArn",
          "documentation":"<p>The run's service role ARN.</p>"
        },
        "name":{
          "shape":"RunName",
          "documentation":"<p>The run's name.</p>"
        },
        "runGroupId":{
          "shape":"RunGroupId",
          "documentation":"<p>The run's group ID.</p>"
        },
        "priority":{
          "shape":"GetRunResponsePriorityInteger",
          "documentation":"<p>The run's priority.</p>"
        },
        "definition":{
          "shape":"WorkflowDefinition",
          "documentation":"<p>The run's definition.</p>"
        },
        "digest":{
          "shape":"WorkflowDigest",
          "documentation":"<p>The run's digest.</p>"
        },
        "parameters":{
          "shape":"RunParameters",
          "documentation":"<p>The run's parameters.</p>"
        },
        "storageCapacity":{
          "shape":"GetRunResponseStorageCapacityInteger",
          "documentation":"<p>The run's storage capacity in gibibytes. For dynamic storage, after the run has completed, this value is the maximum amount of storage used during the run.</p>"
        },
        "outputUri":{
          "shape":"RunOutputUri",
          "documentation":"<p>The run's output URI.</p>"
        },
        "logLevel":{
          "shape":"RunLogLevel",
          "documentation":"<p>The run's log level.</p>"
        },
        "resourceDigests":{
          "shape":"RunResourceDigests",
          "documentation":"<p>The run's resource digests.</p>"
        },
        "startedBy":{
          "shape":"RunStartedBy",
          "documentation":"<p>Who started the run.</p>"
        },
        "creationTime":{
          "shape":"RunTimestamp",
          "documentation":"<p>When the run was created.</p>"
        },
        "startTime":{
          "shape":"RunTimestamp",
          "documentation":"<p>When the run started.</p>"
        },
        "stopTime":{
          "shape":"RunTimestamp",
          "documentation":"<p>The run's stop time.</p>"
        },
        "statusMessage":{
          "shape":"RunStatusMessage",
          "documentation":"<p>The run's status message.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>The run's tags.</p>"
        },
        "accelerators":{
          "shape":"Accelerators",
          "documentation":"<p>The computational accelerator used to run the workflow.</p>"
        },
        "retentionMode":{
          "shape":"RunRetentionMode",
          "documentation":"<p>The run's retention mode.</p>"
        },
        "failureReason":{
          "shape":"RunFailureReason",
          "documentation":"<p>The reason a run has failed.</p>"
        },
        "logLocation":{
          "shape":"RunLogLocation",
          "documentation":"<p>The location of the run log.</p>"
        },
        "uuid":{
          "shape":"RunUuid",
          "documentation":"<p>The universally unique identifier for a run.</p>"
        },
        "runOutputUri":{
          "shape":"RunOutputUri",
          "documentation":"<p>The destination for workflow outputs.</p>"
        },
        "storageType":{
          "shape":"StorageType",
          "documentation":"<p>The run's storage type.</p>"
        },
        "workflowOwnerId":{
          "shape":"WorkflowOwnerId",
          "documentation":"<p>The ID of the workflow owner.</p>"
        },
        "workflowVersionName":{
          "shape":"WorkflowVersionName",
          "documentation":"<p>The workflow version name.</p>"
        },
        "workflowUuid":{
          "shape":"WorkflowUuid",
          "documentation":"<p>The universally unique identifier (UUID) value for the workflow.</p>"
        }
      }
    },
    "GetRunResponsePriorityInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":0
    },
    "GetRunResponseStorageCapacityInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":0
    },
    "GetRunTaskRequest":{
      "type":"structure",
      "required":[
        "id",
        "taskId"
      ],
      "members":{
        "id":{
          "shape":"RunId",
          "documentation":"<p>The workflow run ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "taskId":{
          "shape":"TaskId",
          "documentation":"<p>The task's ID.</p>",
          "location":"uri",
          "locationName":"taskId"
        }
      }
    },
    "GetRunTaskResponse":{
      "type":"structure",
      "members":{
        "taskId":{
          "shape":"TaskId",
          "documentation":"<p>The task's ID.</p>"
        },
        "status":{
          "shape":"TaskStatus",
          "documentation":"<p>The task's status.</p>"
        },
        "name":{
          "shape":"TaskName",
          "documentation":"<p>The task's name.</p>"
        },
        "cpus":{
          "shape":"GetRunTaskResponseCpusInteger",
          "documentation":"<p>The task's CPU usage.</p>"
        },
        "cacheHit":{
          "shape":"Boolean",
          "documentation":"<p>Set to true if Amazon Web Services HealthOmics found a matching entry in the run cache for this task.</p>"
        },
        "cacheS3Uri":{
          "shape":"S3UriForBucketOrObject",
          "documentation":"<p>The S3 URI of the cache location.</p>"
        },
        "memory":{
          "shape":"GetRunTaskResponseMemoryInteger",
          "documentation":"<p>The task's memory use in gigabytes.</p>"
        },
        "creationTime":{
          "shape":"TaskTimestamp",
          "documentation":"<p>When the task was created.</p>"
        },
        "startTime":{
          "shape":"TaskTimestamp",
          "documentation":"<p>The task's start time.</p>"
        },
        "stopTime":{
          "shape":"TaskTimestamp",
          "documentation":"<p>The task's stop time.</p>"
        },
        "statusMessage":{
          "shape":"TaskStatusMessage",
          "documentation":"<p>The task's status message.</p>"
        },
        "logStream":{
          "shape":"TaskLogStream",
          "documentation":"<p>The task's log stream.</p>"
        },
        "gpus":{
          "shape":"GetRunTaskResponseGpusInteger",
          "documentation":"<p>The number of Graphics Processing Units (GPU) specified in the task.</p>"
        },
        "instanceType":{
          "shape":"TaskInstanceType",
          "documentation":"<p>The instance type for a task.</p>"
        },
        "failureReason":{
          "shape":"TaskFailureReason",
          "documentation":"<p>The reason a task has failed.</p>"
        },
        "imageDetails":{
          "shape":"ImageDetails",
          "documentation":"<p>Details about the container image that this task uses.</p>"
        }
      }
    },
    "GetRunTaskResponseCpusInteger":{
      "type":"integer",
      "box":true,
      "min":1
    },
    "GetRunTaskResponseGpusInteger":{
      "type":"integer",
      "box":true,
      "min":0
    },
    "GetRunTaskResponseMemoryInteger":{
      "type":"integer",
      "box":true,
      "min":1
    },
    "GetS3AccessPolicyRequest":{
      "type":"structure",
      "required":["s3AccessPointArn"],
      "members":{
        "s3AccessPointArn":{
          "shape":"S3AccessPointArn",
          "documentation":"<p>The S3 access point ARN that has the access policy.</p>",
          "location":"uri",
          "locationName":"s3AccessPointArn"
        }
      }
    },
    "GetS3AccessPolicyResponse":{
      "type":"structure",
      "required":["s3AccessPolicy"],
      "members":{
        "s3AccessPointArn":{
          "shape":"S3AccessPointArn",
          "documentation":"<p>The S3 access point ARN that has the access policy.</p>"
        },
        "storeId":{
          "shape":"StoreId",
          "documentation":"<p>The Amazon Web Services-generated Sequence Store or Reference Store ID.</p>"
        },
        "storeType":{
          "shape":"StoreType",
          "documentation":"<p>The type of store associated with the access point.</p>"
        },
        "updateTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The time when the policy was last updated.</p>"
        },
        "s3AccessPolicy":{
          "shape":"S3AccessPolicy",
          "documentation":"<p>The current resource policy that controls S3 access on the store.</p>",
          "jsonvalue":true
        }
      }
    },
    "GetSequenceStoreRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The store's ID.</p>",
          "location":"uri",
          "locationName":"id"
        }
      }
    },
    "GetSequenceStoreResponse":{
      "type":"structure",
      "required":[
        "id",
        "arn",
        "creationTime"
      ],
      "members":{
        "id":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The store's ID.</p>"
        },
        "arn":{
          "shape":"SequenceStoreArn",
          "documentation":"<p>The store's ARN.</p>"
        },
        "name":{
          "shape":"SequenceStoreName",
          "documentation":"<p>The store's name.</p>"
        },
        "description":{
          "shape":"SequenceStoreDescription",
          "documentation":"<p>The store's description.</p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>The store's server-side encryption (SSE) settings.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the store was created.</p>"
        },
        "fallbackLocation":{
          "shape":"FallbackLocation",
          "documentation":"<p>An S3 location that is used to store files that have failed a direct upload.</p>"
        },
        "s3Access":{
          "shape":"SequenceStoreS3Access",
          "documentation":"<p>The S3 metadata of a sequence store, including the ARN and S3 URI of the S3 bucket.</p>"
        },
        "eTagAlgorithmFamily":{
          "shape":"ETagAlgorithmFamily",
          "documentation":"<p>The algorithm family of the ETag.</p>"
        },
        "status":{
          "shape":"SequenceStoreStatus",
          "documentation":"<p>The status of the sequence store.</p>"
        },
        "statusMessage":{
          "shape":"SequenceStoreStatusMessage",
          "documentation":"<p>The status message of the sequence store.</p>"
        },
        "propagatedSetLevelTags":{
          "shape":"PropagatedSetLevelTags",
          "documentation":"<p>The tags keys to propagate to the S3 objects associated with read sets in the sequence store.</p>"
        },
        "updateTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The last-updated time of the sequence store.</p>"
        }
      }
    },
    "GetShareRequest":{
      "type":"structure",
      "required":["shareId"],
      "members":{
        "shareId":{
          "shape":"String",
          "documentation":"<p>The ID of the share.</p>",
          "location":"uri",
          "locationName":"shareId"
        }
      }
    },
    "GetShareResponse":{
      "type":"structure",
      "members":{
        "share":{
          "shape":"ShareDetails",
          "documentation":"<p>A resource share details object. The object includes the status, the resourceArn, and ownerId.</p>"
        }
      }
    },
    "GetVariantImportRequest":{
      "type":"structure",
      "required":["jobId"],
      "members":{
        "jobId":{
          "shape":"ResourceId",
          "documentation":"<p>The job's ID.</p>",
          "location":"uri",
          "locationName":"jobId"
        }
      }
    },
    "GetVariantImportResponse":{
      "type":"structure",
      "required":[
        "id",
        "destinationName",
        "roleArn",
        "status",
        "statusMessage",
        "creationTime",
        "updateTime",
        "items",
        "runLeftNormalization"
      ],
      "members":{
        "id":{
          "shape":"ResourceId",
          "documentation":"<p>The job's ID.</p>"
        },
        "destinationName":{
          "shape":"StoreName",
          "documentation":"<p>The job's destination variant store.</p>"
        },
        "roleArn":{
          "shape":"Arn",
          "documentation":"<p>The job's service role ARN.</p>"
        },
        "status":{
          "shape":"JobStatus",
          "documentation":"<p>The job's status.</p>"
        },
        "statusMessage":{
          "shape":"JobStatusMsg",
          "documentation":"<p>The job's status message.</p>"
        },
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p>When the job was created.</p>"
        },
        "updateTime":{
          "shape":"UpdateTime",
          "documentation":"<p>When the job was updated.</p>"
        },
        "completionTime":{
          "shape":"CompletionTime",
          "documentation":"<p>When the job completed.</p>"
        },
        "items":{
          "shape":"VariantImportItemDetails",
          "documentation":"<p>The job's items.</p>"
        },
        "runLeftNormalization":{
          "shape":"RunLeftNormalization",
          "documentation":"<p>The job's left normalization setting.</p>"
        },
        "annotationFields":{
          "shape":"AnnotationFieldMap",
          "documentation":"<p>The annotation schema generated by the parsed annotation data.</p>"
        }
      }
    },
    "GetVariantStoreRequest":{
      "type":"structure",
      "required":["name"],
      "members":{
        "name":{
          "shape":"String",
          "documentation":"<p>The store's name.</p>",
          "location":"uri",
          "locationName":"name"
        }
      }
    },
    "GetVariantStoreResponse":{
      "type":"structure",
      "required":[
        "id",
        "reference",
        "status",
        "storeArn",
        "name",
        "description",
        "sseConfig",
        "creationTime",
        "updateTime",
        "tags",
        "statusMessage",
        "storeSizeBytes"
      ],
      "members":{
        "id":{
          "shape":"ResourceId",
          "documentation":"<p>The store's ID.</p>"
        },
        "reference":{
          "shape":"ReferenceItem",
          "documentation":"<p>The store's genome reference.</p>"
        },
        "status":{
          "shape":"StoreStatus",
          "documentation":"<p>The store's status.</p>"
        },
        "storeArn":{
          "shape":"Arn",
          "documentation":"<p>The store's ARN.</p>"
        },
        "name":{
          "shape":"String",
          "documentation":"<p>The store's name.</p>"
        },
        "description":{
          "shape":"Description",
          "documentation":"<p>The store's description.</p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>The store's server-side encryption (SSE) settings.</p>"
        },
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p>When the store was created.</p>"
        },
        "updateTime":{
          "shape":"UpdateTime",
          "documentation":"<p>When the store was updated.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>The store's tags.</p>"
        },
        "statusMessage":{
          "shape":"StatusMessage",
          "documentation":"<p>The store's status message.</p>"
        },
        "storeSizeBytes":{
          "shape":"Long",
          "documentation":"<p>The store's size in bytes.</p>"
        }
      }
    },
    "GetWorkflowRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"WorkflowId",
          "documentation":"<p>The workflow's ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "type":{
          "shape":"WorkflowType",
          "documentation":"<p>The workflow's type.</p>",
          "location":"querystring",
          "locationName":"type"
        },
        "export":{
          "shape":"WorkflowExportList",
          "documentation":"<p>The export format for the workflow.</p>",
          "location":"querystring",
          "locationName":"export"
        },
        "workflowOwnerId":{
          "shape":"WorkflowOwnerId",
          "documentation":"<p>The ID of the workflow owner.</p>",
          "location":"querystring",
          "locationName":"workflowOwnerId"
        }
      }
    },
    "GetWorkflowResponse":{
      "type":"structure",
      "members":{
        "arn":{
          "shape":"WorkflowArn",
          "documentation":"<p>The workflow's ARN.</p>"
        },
        "id":{
          "shape":"WorkflowId",
          "documentation":"<p>The workflow's ID.</p>"
        },
        "status":{
          "shape":"WorkflowStatus",
          "documentation":"<p>The workflow's status.</p>"
        },
        "type":{
          "shape":"WorkflowType",
          "documentation":"<p>The workflow's type.</p>"
        },
        "name":{
          "shape":"WorkflowName",
          "documentation":"<p>The workflow's name.</p>"
        },
        "description":{
          "shape":"WorkflowDescription",
          "documentation":"<p>The workflow's description.</p>"
        },
        "engine":{
          "shape":"WorkflowEngine",
          "documentation":"<p>The workflow's engine.</p>"
        },
        "definition":{
          "shape":"WorkflowDefinition",
          "documentation":"<p>The workflow's definition.</p>"
        },
        "main":{
          "shape":"WorkflowMain",
          "documentation":"<p>The path of the main definition file for the workflow.</p>"
        },
        "digest":{
          "shape":"WorkflowDigest",
          "documentation":"<p>The workflow's digest.</p>"
        },
        "parameterTemplate":{
          "shape":"WorkflowParameterTemplate",
          "documentation":"<p>The workflow's parameter template.</p>"
        },
        "storageCapacity":{
          "shape":"GetWorkflowResponseStorageCapacityInteger",
          "documentation":"<p>The default static storage capacity (in gibibytes) for runs that use this workflow or workflow version.</p>"
        },
        "creationTime":{
          "shape":"WorkflowTimestamp",
          "documentation":"<p>When the workflow was created.</p>"
        },
        "statusMessage":{
          "shape":"WorkflowStatusMessage",
          "documentation":"<p>The workflow's status message.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>The workflow's tags.</p>"
        },
        "metadata":{
          "shape":"WorkflowMetadata",
          "documentation":"<p>Gets metadata for the workflow.</p>"
        },
        "accelerators":{
          "shape":"Accelerators",
          "documentation":"<p>The computational accelerator specified to run the workflow. </p>"
        },
        "storageType":{
          "shape":"StorageType",
          "documentation":"<p>The default storage type for runs using this workflow.</p>"
        },
        "uuid":{
          "shape":"WorkflowUuid",
          "documentation":"<p>The universally unique identifier (UUID) value for this workflow.</p>"
        },
        "containerRegistryMap":{
          "shape":"ContainerRegistryMap",
          "documentation":"<p>The registry map that this workflow is using.</p>"
        },
        "readme":{
          "shape":"ReadmeS3PresignedUrl",
          "documentation":"<p>The README content for the workflow, providing documentation and usage information.</p>"
        },
        "definitionRepositoryDetails":{
          "shape":"DefinitionRepositoryDetails",
          "documentation":"<p>Details about the source code repository that hosts the workflow definition files.</p>"
        },
        "readmePath":{
          "shape":"ReadmePath",
          "documentation":"<p>The path to the workflow README markdown file within the repository. This file provides documentation and usage information for the workflow. If not specified, the <code>README.md</code> file from the root directory of the repository will be used.</p>"
        }
      }
    },
    "GetWorkflowResponseStorageCapacityInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":0
    },
    "GetWorkflowVersionRequest":{
      "type":"structure",
      "required":[
        "workflowId",
        "versionName"
      ],
      "members":{
        "workflowId":{
          "shape":"WorkflowId",
          "documentation":"<p>The workflow's ID. The <code>workflowId</code> is not the UUID.</p>",
          "location":"uri",
          "locationName":"workflowId"
        },
        "versionName":{
          "shape":"WorkflowVersionName",
          "documentation":"<p>The workflow version name.</p>",
          "location":"uri",
          "locationName":"versionName"
        },
        "type":{
          "shape":"WorkflowType",
          "documentation":"<p>The workflow's type. </p>",
          "location":"querystring",
          "locationName":"type"
        },
        "export":{
          "shape":"WorkflowExportList",
          "documentation":"<p>The export format for the workflow.</p>",
          "location":"querystring",
          "locationName":"export"
        },
        "workflowOwnerId":{
          "shape":"WorkflowOwnerId",
          "documentation":"<p>The 12-digit account ID of the workflow owner. The workflow owner ID can be retrieved using the <code>GetShare</code> API operation. If you are the workflow owner, you do not need to include this ID.</p>",
          "location":"querystring",
          "locationName":"workflowOwnerId"
        }
      }
    },
    "GetWorkflowVersionResponse":{
      "type":"structure",
      "members":{
        "arn":{
          "shape":"WorkflowVersionArn",
          "documentation":"<p>ARN of the workflow version.</p>"
        },
        "workflowId":{
          "shape":"WorkflowId",
          "documentation":"<p>The workflow's ID.</p>"
        },
        "versionName":{
          "shape":"WorkflowVersionName",
          "documentation":"<p>The workflow version name.</p>"
        },
        "accelerators":{
          "shape":"Accelerators",
          "documentation":"<p>The accelerator for this workflow version.</p>"
        },
        "creationTime":{
          "shape":"WorkflowTimestamp",
          "documentation":"<p>When the workflow version was created.</p>"
        },
        "description":{
          "shape":"WorkflowVersionDescription",
          "documentation":"<p>Description of the workflow version.</p>"
        },
        "definition":{
          "shape":"WorkflowDefinition",
          "documentation":"<p>Definition of the workflow version.</p>"
        },
        "digest":{
          "shape":"WorkflowDigest",
          "documentation":"<p>The workflow version's digest.</p>"
        },
        "engine":{
          "shape":"WorkflowEngine",
          "documentation":"<p>The workflow engine for this workflow version.</p>"
        },
        "main":{
          "shape":"WorkflowMain",
          "documentation":"<p>The path of the main definition file for the workflow.</p>"
        },
        "metadata":{
          "shape":"WorkflowMetadata",
          "documentation":"<p>The metadata for the workflow version.</p>"
        },
        "parameterTemplate":{
          "shape":"WorkflowParameterTemplate",
          "documentation":"<p>The parameter template for the workflow version.</p>"
        },
        "status":{
          "shape":"WorkflowStatus",
          "documentation":"<p>The workflow version status</p>"
        },
        "statusMessage":{
          "shape":"WorkflowStatusMessage",
          "documentation":"<p>The workflow version status message</p>"
        },
        "storageType":{
          "shape":"StorageType",
          "documentation":"<p>The default storage type for the run.</p>"
        },
        "storageCapacity":{
          "shape":"GetWorkflowVersionResponseStorageCapacityInteger",
          "documentation":"<p>The default run storage capacity for static storage.</p>"
        },
        "type":{
          "shape":"WorkflowType",
          "documentation":"<p>The workflow version type</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>The workflow version tags</p>"
        },
        "uuid":{
          "shape":"WorkflowUuid",
          "documentation":"<p>The universally unique identifier (UUID) value for this workflow version</p>"
        },
        "workflowBucketOwnerId":{
          "shape":"WorkflowBucketOwnerId",
          "documentation":"<p>Amazon Web Services Id of the owner of the bucket.</p>"
        },
        "containerRegistryMap":{
          "shape":"ContainerRegistryMap",
          "documentation":"<p>The registry map that this workflow version uses.</p>"
        },
        "readme":{
          "shape":"ReadmeS3PresignedUrl",
          "documentation":"<p>The README content for the workflow version, providing documentation and usage information specific to this version.</p>"
        },
        "definitionRepositoryDetails":{
          "shape":"DefinitionRepositoryDetails",
          "documentation":"<p>Details about the source code repository that hosts the workflow version definition files.</p>"
        },
        "readmePath":{
          "shape":"ReadmePath",
          "documentation":"<p>The path to the workflow version README markdown file within the repository. This file provides documentation and usage information for the workflow. If not specified, the <code>README.md</code> file from the root directory of the repository will be used.</p>"
        }
      }
    },
    "GetWorkflowVersionResponseStorageCapacityInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":0
    },
    "Header":{"type":"boolean"},
    "ImageDetails":{
      "type":"structure",
      "members":{
        "image":{
          "shape":"Uri",
          "documentation":"<p>The URI of the container image.</p>"
        },
        "imageDigest":{
          "shape":"TaskImageDigest",
          "documentation":"<p>The container image digest. If the image URI was transformed, this will be the digest of the container image referenced by the transformed URI.</p>"
        },
        "sourceImage":{
          "shape":"Uri",
          "documentation":"<p>URI of the source registry. If the URI is from a third-party registry, Amazon Web Services HealthOmics transforms the URI to the corresponding ECR path, using the pull-through cache mapping rules.</p>"
        }
      },
      "documentation":"<p>Information about the container image used for a task.</p>"
    },
    "ImageMapping":{
      "type":"structure",
      "members":{
        "sourceImage":{
          "shape":"Uri",
          "documentation":"<p>Specifies the URI of the source image in the upstream registry.</p>"
        },
        "destinationImage":{
          "shape":"Uri",
          "documentation":"<p>Specifies the URI of the corresponding image in the private ECR registry.</p>"
        }
      },
      "documentation":"<p>Specifies image mappings that workflow tasks can use. For example, you can replace all the task references of a public image to use an equivalent image in your private ECR repository. You can use image mappings with upstream registries that don't support pull through cache. You need to manually synchronize the upstream registry with your private repository. </p>"
    },
    "ImageMappingsList":{
      "type":"list",
      "member":{"shape":"ImageMapping"}
    },
    "ImportJobId":{
      "type":"string",
      "max":36,
      "min":10,
      "pattern":"[0-9]+"
    },
    "ImportReadSetFilter":{
      "type":"structure",
      "members":{
        "status":{
          "shape":"ReadSetImportJobStatus",
          "documentation":"<p>A status to filter on.</p>"
        },
        "createdAfter":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's start date.</p>"
        },
        "createdBefore":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's end date.</p>"
        }
      },
      "documentation":"<p>A filter for import read set jobs.</p>"
    },
    "ImportReadSetJobItem":{
      "type":"structure",
      "required":[
        "id",
        "sequenceStoreId",
        "roleArn",
        "status",
        "creationTime"
      ],
      "members":{
        "id":{
          "shape":"ImportJobId",
          "documentation":"<p>The job's ID.</p>"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The job's sequence store ID.</p>"
        },
        "roleArn":{
          "shape":"RoleArn",
          "documentation":"<p>The job's service role ARN.</p>"
        },
        "status":{
          "shape":"ReadSetImportJobStatus",
          "documentation":"<p>The job's status.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job was created.</p>"
        },
        "completionTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job completed.</p>"
        }
      },
      "documentation":"<p>An import read set job.</p>"
    },
    "ImportReadSetJobList":{
      "type":"list",
      "member":{"shape":"ImportReadSetJobItem"}
    },
    "ImportReadSetSourceItem":{
      "type":"structure",
      "required":[
        "sourceFiles",
        "sourceFileType",
        "status",
        "subjectId",
        "sampleId"
      ],
      "members":{
        "sourceFiles":{
          "shape":"SourceFiles",
          "documentation":"<p>The source files' location in Amazon S3.</p>"
        },
        "sourceFileType":{
          "shape":"FileType",
          "documentation":"<p>The source's file type.</p>"
        },
        "status":{
          "shape":"ReadSetImportJobItemStatus",
          "documentation":"<p>The source's status.</p>"
        },
        "statusMessage":{
          "shape":"JobStatusMessage",
          "documentation":"<p>The source's status message.</p>"
        },
        "subjectId":{
          "shape":"SubjectId",
          "documentation":"<p>The source's subject ID.</p>"
        },
        "sampleId":{
          "shape":"SampleId",
          "documentation":"<p>The source's sample ID.</p>"
        },
        "generatedFrom":{
          "shape":"GeneratedFrom",
          "documentation":"<p>Where the source originated.</p>"
        },
        "referenceArn":{
          "shape":"ReferenceArn",
          "documentation":"<p>The source's genome reference ARN.</p>"
        },
        "name":{
          "shape":"ReadSetName",
          "documentation":"<p>The source's name.</p>"
        },
        "description":{
          "shape":"ReadSetDescription",
          "documentation":"<p>The source's description.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>The source's tags.</p>"
        },
        "readSetId":{
          "shape":"ReadSetId",
          "documentation":"<p>The source's read set ID.</p>"
        }
      },
      "documentation":"<p>A source for an import read set job.</p>"
    },
    "ImportReadSetSourceList":{
      "type":"list",
      "member":{"shape":"ImportReadSetSourceItem"}
    },
    "ImportReferenceFilter":{
      "type":"structure",
      "members":{
        "status":{
          "shape":"ReferenceImportJobStatus",
          "documentation":"<p>A status to filter on.</p>"
        },
        "createdAfter":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's start date.</p>"
        },
        "createdBefore":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's end date.</p>"
        }
      },
      "documentation":"<p>A filter for import references.</p>"
    },
    "ImportReferenceJobItem":{
      "type":"structure",
      "required":[
        "id",
        "referenceStoreId",
        "roleArn",
        "status",
        "creationTime"
      ],
      "members":{
        "id":{
          "shape":"ImportJobId",
          "documentation":"<p>The job's ID.</p>"
        },
        "referenceStoreId":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The job's reference store ID.</p>"
        },
        "roleArn":{
          "shape":"RoleArn",
          "documentation":"<p>The job's service role ARN.</p>"
        },
        "status":{
          "shape":"ReferenceImportJobStatus",
          "documentation":"<p>The job's status.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job was created.</p>"
        },
        "completionTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job completed.</p>"
        }
      },
      "documentation":"<p>An import reference job.</p>"
    },
    "ImportReferenceJobList":{
      "type":"list",
      "member":{"shape":"ImportReferenceJobItem"}
    },
    "ImportReferenceSourceItem":{
      "type":"structure",
      "required":["status"],
      "members":{
        "sourceFile":{
          "shape":"S3Uri",
          "documentation":"<p>The source file's location in Amazon S3.</p>"
        },
        "status":{
          "shape":"ReferenceImportJobItemStatus",
          "documentation":"<p>The source's status.</p>"
        },
        "statusMessage":{
          "shape":"JobStatusMessage",
          "documentation":"<p>The source's status message.</p>"
        },
        "name":{
          "shape":"ReferenceName",
          "documentation":"<p>The source's name.</p>"
        },
        "description":{
          "shape":"ReferenceDescription",
          "documentation":"<p>The source's description.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>The source's tags.</p>"
        },
        "referenceId":{
          "shape":"ReferenceId",
          "documentation":"<p>The source's reference ID.</p>"
        }
      },
      "documentation":"<p>An genome reference source.</p>"
    },
    "ImportReferenceSourceList":{
      "type":"list",
      "member":{"shape":"ImportReferenceSourceItem"}
    },
    "Integer":{
      "type":"integer",
      "box":true
    },
    "InternalServerException":{
      "type":"structure",
      "required":["message"],
      "members":{
        "message":{"shape":"String"}
      },
      "documentation":"<p>An unexpected error occurred. Try the request again.</p>",
      "error":{"httpStatusCode":500},
      "exception":true,
      "fault":true,
      "retryable":{"throttling":false}
    },
    "JobStatus":{
      "type":"string",
      "enum":[
        "SUBMITTED",
        "IN_PROGRESS",
        "CANCELLED",
        "COMPLETED",
        "FAILED",
        "COMPLETED_WITH_FAILURES"
      ]
    },
    "JobStatusMessage":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "JobStatusMsg":{"type":"string"},
    "LineSep":{
      "type":"string",
      "max":20,
      "min":1
    },
    "ListAnnotationImportJobsFilter":{
      "type":"structure",
      "members":{
        "status":{
          "shape":"JobStatus",
          "documentation":"<p>A status to filter on.</p>"
        },
        "storeName":{
          "shape":"String",
          "documentation":"<p>A store name to filter on.</p>"
        }
      },
      "documentation":"<p>A filter for annotation import jobs.</p>"
    },
    "ListAnnotationImportJobsRequest":{
      "type":"structure",
      "members":{
        "maxResults":{
          "shape":"ListAnnotationImportJobsRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of jobs to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "ids":{
          "shape":"ListAnnotationImportJobsRequestIdsList",
          "documentation":"<p>IDs of annotation import jobs to retrieve.</p>"
        },
        "nextToken":{
          "shape":"ListAnnotationImportJobsRequestNextTokenString",
          "documentation":"<p>Specifies the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"nextToken"
        },
        "filter":{
          "shape":"ListAnnotationImportJobsFilter",
          "documentation":"<p>A filter to apply to the list.</p>"
        }
      }
    },
    "ListAnnotationImportJobsRequestIdsList":{
      "type":"list",
      "member":{"shape":"ResourceIdentifier"},
      "max":20,
      "min":1
    },
    "ListAnnotationImportJobsRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListAnnotationImportJobsRequestNextTokenString":{
      "type":"string",
      "max":10000,
      "min":1
    },
    "ListAnnotationImportJobsResponse":{
      "type":"structure",
      "members":{
        "annotationImportJobs":{
          "shape":"AnnotationImportJobItems",
          "documentation":"<p>A list of jobs.</p>"
        },
        "nextToken":{
          "shape":"String",
          "documentation":"<p>Specifies the pagination token from a previous request to retrieve the next page of results.</p>"
        }
      }
    },
    "ListAnnotationStoreVersionsFilter":{
      "type":"structure",
      "members":{
        "status":{
          "shape":"VersionStatus",
          "documentation":"<p>The status of an annotation store version.</p>"
        }
      },
      "documentation":"<p>Use filters to focus the returned annotation store versions on a specific parameter, such as the status of the annotation store.</p>"
    },
    "ListAnnotationStoreVersionsRequest":{
      "type":"structure",
      "required":["name"],
      "members":{
        "name":{
          "shape":"String",
          "documentation":"<p> The name of an annotation store. </p>",
          "location":"uri",
          "locationName":"name"
        },
        "maxResults":{
          "shape":"ListAnnotationStoreVersionsRequestMaxResultsInteger",
          "documentation":"<p> The maximum number of annotation store versions to return in one page of results. </p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "nextToken":{
          "shape":"ListAnnotationStoreVersionsRequestNextTokenString",
          "documentation":"<p> Specifies the pagination token from a previous request to retrieve the next page of results. </p>",
          "location":"querystring",
          "locationName":"nextToken"
        },
        "filter":{
          "shape":"ListAnnotationStoreVersionsFilter",
          "documentation":"<p> A filter to apply to the list of annotation store versions. </p>"
        }
      }
    },
    "ListAnnotationStoreVersionsRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListAnnotationStoreVersionsRequestNextTokenString":{
      "type":"string",
      "max":10000,
      "min":1
    },
    "ListAnnotationStoreVersionsResponse":{
      "type":"structure",
      "members":{
        "annotationStoreVersions":{
          "shape":"AnnotationStoreVersionItems",
          "documentation":"<p> Lists all versions of an annotation store. </p>"
        },
        "nextToken":{
          "shape":"String",
          "documentation":"<p> Specifies the pagination token from a previous request to retrieve the next page of results. </p>"
        }
      }
    },
    "ListAnnotationStoresFilter":{
      "type":"structure",
      "members":{
        "status":{
          "shape":"StoreStatus",
          "documentation":"<p>A status to filter on.</p>"
        }
      },
      "documentation":"<p>A filter for annotation stores.</p>"
    },
    "ListAnnotationStoresRequest":{
      "type":"structure",
      "members":{
        "ids":{
          "shape":"ListAnnotationStoresRequestIdsList",
          "documentation":"<p>IDs of stores to list.</p>"
        },
        "maxResults":{
          "shape":"ListAnnotationStoresRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of stores to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "nextToken":{
          "shape":"ListAnnotationStoresRequestNextTokenString",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"nextToken"
        },
        "filter":{
          "shape":"ListAnnotationStoresFilter",
          "documentation":"<p>A filter to apply to the list.</p>"
        }
      }
    },
    "ListAnnotationStoresRequestIdsList":{
      "type":"list",
      "member":{"shape":"ResourceIdentifier"},
      "max":20,
      "min":1
    },
    "ListAnnotationStoresRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListAnnotationStoresRequestNextTokenString":{
      "type":"string",
      "max":10000,
      "min":1
    },
    "ListAnnotationStoresResponse":{
      "type":"structure",
      "members":{
        "annotationStores":{
          "shape":"AnnotationStoreItems",
          "documentation":"<p>A list of stores.</p>"
        },
        "nextToken":{
          "shape":"String",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        }
      }
    },
    "ListMultipartReadSetUploadsRequest":{
      "type":"structure",
      "required":["sequenceStoreId"],
      "members":{
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The Sequence Store ID used for the multipart uploads.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        },
        "maxResults":{
          "shape":"ListMultipartReadSetUploadsRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of multipart uploads returned in a page.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>Next token returned in the response of a previous ListMultipartReadSetUploads call. Used to get the next page of results.</p>",
          "location":"querystring",
          "locationName":"nextToken"
        }
      }
    },
    "ListMultipartReadSetUploadsRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListMultipartReadSetUploadsResponse":{
      "type":"structure",
      "members":{
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>Next token returned in the response of a previous ListMultipartReadSetUploads call. Used to get the next page of results.</p>"
        },
        "uploads":{
          "shape":"MultipartReadSetUploadList",
          "documentation":"<p>An array of multipart uploads.</p>"
        }
      }
    },
    "ListReadSetActivationJobsRequest":{
      "type":"structure",
      "required":["sequenceStoreId"],
      "members":{
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The read set's sequence store ID.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        },
        "maxResults":{
          "shape":"ListReadSetActivationJobsRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of read set activation jobs to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"nextToken"
        },
        "filter":{
          "shape":"ActivateReadSetFilter",
          "documentation":"<p>A filter to apply to the list.</p>"
        }
      }
    },
    "ListReadSetActivationJobsRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListReadSetActivationJobsResponse":{
      "type":"structure",
      "members":{
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        },
        "activationJobs":{
          "shape":"ActivateReadSetJobList",
          "documentation":"<p>A list of jobs.</p>"
        }
      }
    },
    "ListReadSetExportJobsRequest":{
      "type":"structure",
      "required":["sequenceStoreId"],
      "members":{
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The jobs' sequence store ID.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        },
        "maxResults":{
          "shape":"ListReadSetExportJobsRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of jobs to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"nextToken"
        },
        "filter":{
          "shape":"ExportReadSetFilter",
          "documentation":"<p>A filter to apply to the list.</p>"
        }
      }
    },
    "ListReadSetExportJobsRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListReadSetExportJobsResponse":{
      "type":"structure",
      "members":{
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        },
        "exportJobs":{
          "shape":"ExportReadSetJobDetailList",
          "documentation":"<p>A list of jobs.</p>"
        }
      }
    },
    "ListReadSetImportJobsRequest":{
      "type":"structure",
      "required":["sequenceStoreId"],
      "members":{
        "maxResults":{
          "shape":"ListReadSetImportJobsRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of jobs to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"nextToken"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The jobs' sequence store ID.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        },
        "filter":{
          "shape":"ImportReadSetFilter",
          "documentation":"<p>A filter to apply to the list.</p>"
        }
      }
    },
    "ListReadSetImportJobsRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListReadSetImportJobsResponse":{
      "type":"structure",
      "members":{
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        },
        "importJobs":{
          "shape":"ImportReadSetJobList",
          "documentation":"<p>A list of jobs.</p>"
        }
      }
    },
    "ListReadSetUploadPartsRequest":{
      "type":"structure",
      "required":[
        "sequenceStoreId",
        "uploadId",
        "partSource"
      ],
      "members":{
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The Sequence Store ID used for the multipart uploads.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        },
        "uploadId":{
          "shape":"UploadId",
          "documentation":"<p>The ID for the initiated multipart upload.</p>",
          "location":"uri",
          "locationName":"uploadId"
        },
        "partSource":{
          "shape":"ReadSetPartSource",
          "documentation":"<p>The source file for the upload part.</p>"
        },
        "maxResults":{
          "shape":"ListReadSetUploadPartsRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of read set upload parts returned in a page.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>Next token returned in the response of a previous ListReadSetUploadPartsRequest call. Used to get the next page of results.</p>",
          "location":"querystring",
          "locationName":"nextToken"
        },
        "filter":{
          "shape":"ReadSetUploadPartListFilter",
          "documentation":"<p>Attributes used to filter for a specific subset of read set part uploads.</p>"
        }
      }
    },
    "ListReadSetUploadPartsRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListReadSetUploadPartsResponse":{
      "type":"structure",
      "members":{
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>Next token returned in the response of a previous ListReadSetUploadParts call. Used to get the next page of results.</p>"
        },
        "parts":{
          "shape":"ReadSetUploadPartList",
          "documentation":"<p>An array of upload parts.</p>"
        }
      }
    },
    "ListReadSetsRequest":{
      "type":"structure",
      "required":["sequenceStoreId"],
      "members":{
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The jobs' sequence store ID.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        },
        "maxResults":{
          "shape":"ListReadSetsRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of read sets to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"nextToken"
        },
        "filter":{
          "shape":"ReadSetFilter",
          "documentation":"<p>A filter to apply to the list.</p>"
        }
      }
    },
    "ListReadSetsRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListReadSetsResponse":{
      "type":"structure",
      "required":["readSets"],
      "members":{
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        },
        "readSets":{
          "shape":"ReadSetList",
          "documentation":"<p>A list of read sets.</p>"
        }
      }
    },
    "ListReferenceImportJobsRequest":{
      "type":"structure",
      "required":["referenceStoreId"],
      "members":{
        "maxResults":{
          "shape":"ListReferenceImportJobsRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of jobs to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"nextToken"
        },
        "referenceStoreId":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The job's reference store ID.</p>",
          "location":"uri",
          "locationName":"referenceStoreId"
        },
        "filter":{
          "shape":"ImportReferenceFilter",
          "documentation":"<p>A filter to apply to the list.</p>"
        }
      }
    },
    "ListReferenceImportJobsRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListReferenceImportJobsResponse":{
      "type":"structure",
      "members":{
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        },
        "importJobs":{
          "shape":"ImportReferenceJobList",
          "documentation":"<p>A lis of jobs.</p>"
        }
      }
    },
    "ListReferenceStoresRequest":{
      "type":"structure",
      "members":{
        "maxResults":{
          "shape":"ListReferenceStoresRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of stores to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"nextToken"
        },
        "filter":{
          "shape":"ReferenceStoreFilter",
          "documentation":"<p>A filter to apply to the list.</p>"
        }
      }
    },
    "ListReferenceStoresRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListReferenceStoresResponse":{
      "type":"structure",
      "required":["referenceStores"],
      "members":{
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        },
        "referenceStores":{
          "shape":"ReferenceStoreDetailList",
          "documentation":"<p>A list of reference stores.</p>"
        }
      }
    },
    "ListReferencesRequest":{
      "type":"structure",
      "required":["referenceStoreId"],
      "members":{
        "referenceStoreId":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The references' reference store ID.</p>",
          "location":"uri",
          "locationName":"referenceStoreId"
        },
        "maxResults":{
          "shape":"ListReferencesRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of references to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"nextToken"
        },
        "filter":{
          "shape":"ReferenceFilter",
          "documentation":"<p>A filter to apply to the list.</p>"
        }
      }
    },
    "ListReferencesRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListReferencesResponse":{
      "type":"structure",
      "required":["references"],
      "members":{
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        },
        "references":{
          "shape":"ReferenceList",
          "documentation":"<p>A list of references.</p>"
        }
      }
    },
    "ListRunCachesRequest":{
      "type":"structure",
      "members":{
        "maxResults":{
          "shape":"ListRunCachesRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of results to return.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "startingToken":{
          "shape":"ListToken",
          "documentation":"<p>Optional pagination token returned from a prior call to the <code>ListRunCaches</code> API operation.</p>",
          "location":"querystring",
          "locationName":"startingToken"
        }
      }
    },
    "ListRunCachesRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListRunCachesResponse":{
      "type":"structure",
      "members":{
        "items":{
          "shape":"RunCacheList",
          "documentation":"<p>Details about each run cache in the response.</p>"
        },
        "nextToken":{
          "shape":"ListToken",
          "documentation":"<p>Pagination token to retrieve additional run caches. If the response does not have a <code>nextToken</code>value, you have reached to the end of the list.</p>"
        }
      }
    },
    "ListRunGroupsRequest":{
      "type":"structure",
      "members":{
        "name":{
          "shape":"RunGroupName",
          "documentation":"<p>The run groups' name.</p>",
          "location":"querystring",
          "locationName":"name"
        },
        "startingToken":{
          "shape":"RunGroupListToken",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"startingToken"
        },
        "maxResults":{
          "shape":"ListRunGroupsRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of run groups to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        }
      }
    },
    "ListRunGroupsRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListRunGroupsResponse":{
      "type":"structure",
      "members":{
        "items":{
          "shape":"RunGroupList",
          "documentation":"<p>A list of groups.</p>"
        },
        "nextToken":{
          "shape":"RunGroupListToken",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        }
      }
    },
    "ListRunTasksRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"RunId",
          "documentation":"<p>The run's ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "status":{
          "shape":"TaskStatus",
          "documentation":"<p>Filter the list by status.</p>",
          "location":"querystring",
          "locationName":"status"
        },
        "startingToken":{
          "shape":"TaskListToken",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"startingToken"
        },
        "maxResults":{
          "shape":"ListRunTasksRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of run tasks to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        }
      }
    },
    "ListRunTasksRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListRunTasksResponse":{
      "type":"structure",
      "members":{
        "items":{
          "shape":"TaskList",
          "documentation":"<p>A list of tasks.</p>"
        },
        "nextToken":{
          "shape":"TaskListToken",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        }
      }
    },
    "ListRunsRequest":{
      "type":"structure",
      "members":{
        "name":{
          "shape":"RunName",
          "documentation":"<p>Filter the list by run name.</p>",
          "location":"querystring",
          "locationName":"name"
        },
        "runGroupId":{
          "shape":"RunGroupId",
          "documentation":"<p>Filter the list by run group ID.</p>",
          "location":"querystring",
          "locationName":"runGroupId"
        },
        "startingToken":{
          "shape":"RunListToken",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"startingToken"
        },
        "maxResults":{
          "shape":"ListRunsRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of runs to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "status":{
          "shape":"RunStatus",
          "documentation":"<p>The status of a run.</p>",
          "location":"querystring",
          "locationName":"status"
        }
      }
    },
    "ListRunsRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListRunsResponse":{
      "type":"structure",
      "members":{
        "items":{
          "shape":"RunList",
          "documentation":"<p>A list of runs.</p>"
        },
        "nextToken":{
          "shape":"RunListToken",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        }
      }
    },
    "ListSequenceStoresRequest":{
      "type":"structure",
      "members":{
        "maxResults":{
          "shape":"ListSequenceStoresRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of stores to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"nextToken"
        },
        "filter":{
          "shape":"SequenceStoreFilter",
          "documentation":"<p>A filter to apply to the list.</p>"
        }
      }
    },
    "ListSequenceStoresRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListSequenceStoresResponse":{
      "type":"structure",
      "required":["sequenceStores"],
      "members":{
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        },
        "sequenceStores":{
          "shape":"SequenceStoreDetailList",
          "documentation":"<p>A list of sequence stores.</p>"
        }
      }
    },
    "ListSharesRequest":{
      "type":"structure",
      "required":["resourceOwner"],
      "members":{
        "resourceOwner":{
          "shape":"ResourceOwner",
          "documentation":"<p>The account that owns the resource shares.</p>"
        },
        "filter":{
          "shape":"Filter",
          "documentation":"<p>Attributes that you use to filter for a specific subset of resource shares.</p>"
        },
        "nextToken":{
          "shape":"String",
          "documentation":"<p>Next token returned in the response of a previous ListReadSetUploadPartsRequest call. Used to get the next page of results.</p>",
          "location":"querystring",
          "locationName":"nextToken"
        },
        "maxResults":{
          "shape":"Integer",
          "documentation":"<p>The maximum number of shares to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        }
      }
    },
    "ListSharesResponse":{
      "type":"structure",
      "required":["shares"],
      "members":{
        "shares":{
          "shape":"ShareDetailsList",
          "documentation":"<p>The shares available and their metadata details.</p>"
        },
        "nextToken":{
          "shape":"String",
          "documentation":"<p> Next token returned in the response of a previous ListSharesResponse call. Used to get the next page of results. </p>"
        }
      }
    },
    "ListTagsForResourceRequest":{
      "type":"structure",
      "required":["resourceArn"],
      "members":{
        "resourceArn":{
          "shape":"TagArn",
          "documentation":"<p>The resource's ARN.</p>",
          "location":"uri",
          "locationName":"resourceArn"
        }
      }
    },
    "ListTagsForResourceResponse":{
      "type":"structure",
      "required":["tags"],
      "members":{
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>A list of tags.</p>"
        }
      }
    },
    "ListToken":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "ListVariantImportJobsFilter":{
      "type":"structure",
      "members":{
        "status":{
          "shape":"JobStatus",
          "documentation":"<p>A status to filter on.</p>"
        },
        "storeName":{
          "shape":"String",
          "documentation":"<p>A store name to filter on.</p>"
        }
      },
      "documentation":"<p>A filter for variant import jobs.</p>"
    },
    "ListVariantImportJobsRequest":{
      "type":"structure",
      "members":{
        "maxResults":{
          "shape":"ListVariantImportJobsRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of import jobs to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "ids":{
          "shape":"ListVariantImportJobsRequestIdsList",
          "documentation":"<p>A list of job IDs.</p>"
        },
        "nextToken":{
          "shape":"ListVariantImportJobsRequestNextTokenString",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"nextToken"
        },
        "filter":{
          "shape":"ListVariantImportJobsFilter",
          "documentation":"<p>A filter to apply to the list.</p>"
        }
      }
    },
    "ListVariantImportJobsRequestIdsList":{
      "type":"list",
      "member":{"shape":"ResourceIdentifier"},
      "max":20,
      "min":1
    },
    "ListVariantImportJobsRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListVariantImportJobsRequestNextTokenString":{
      "type":"string",
      "max":10000,
      "min":1
    },
    "ListVariantImportJobsResponse":{
      "type":"structure",
      "members":{
        "variantImportJobs":{
          "shape":"VariantImportJobItems",
          "documentation":"<p>A list of jobs.</p>"
        },
        "nextToken":{
          "shape":"String",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        }
      }
    },
    "ListVariantStoresFilter":{
      "type":"structure",
      "members":{
        "status":{
          "shape":"StoreStatus",
          "documentation":"<p>A status to filter on.</p>"
        }
      },
      "documentation":"<p>A filter for variant stores.</p>"
    },
    "ListVariantStoresRequest":{
      "type":"structure",
      "members":{
        "maxResults":{
          "shape":"ListVariantStoresRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of stores to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "ids":{
          "shape":"ListVariantStoresRequestIdsList",
          "documentation":"<p>A list of store IDs.</p>"
        },
        "nextToken":{
          "shape":"ListVariantStoresRequestNextTokenString",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"nextToken"
        },
        "filter":{
          "shape":"ListVariantStoresFilter",
          "documentation":"<p>A filter to apply to the list.</p>"
        }
      }
    },
    "ListVariantStoresRequestIdsList":{
      "type":"list",
      "member":{"shape":"ResourceIdentifier"},
      "max":20,
      "min":1
    },
    "ListVariantStoresRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListVariantStoresRequestNextTokenString":{
      "type":"string",
      "max":10000,
      "min":1
    },
    "ListVariantStoresResponse":{
      "type":"structure",
      "members":{
        "variantStores":{
          "shape":"VariantStoreItems",
          "documentation":"<p>A list of variant stores.</p>"
        },
        "nextToken":{
          "shape":"String",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        }
      }
    },
    "ListWorkflowVersionsRequest":{
      "type":"structure",
      "required":["workflowId"],
      "members":{
        "workflowId":{
          "shape":"WorkflowId",
          "documentation":"<p>The workflow's ID. The <code>workflowId</code> is not the UUID.</p>",
          "location":"uri",
          "locationName":"workflowId"
        },
        "type":{
          "shape":"WorkflowType",
          "documentation":"<p>The workflow type.</p>",
          "location":"querystring",
          "locationName":"type"
        },
        "workflowOwnerId":{
          "shape":"WorkflowOwnerId",
          "documentation":"<p>The 12-digit account ID of the workflow owner. The workflow owner ID can be retrieved using the <code>GetShare</code> API operation. If you are the workflow owner, you do not need to include this ID.</p>",
          "location":"querystring",
          "locationName":"workflowOwnerId"
        },
        "startingToken":{
          "shape":"WorkflowVersionListToken",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"startingToken"
        },
        "maxResults":{
          "shape":"ListWorkflowVersionsRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of workflows to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        }
      }
    },
    "ListWorkflowVersionsRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListWorkflowVersionsResponse":{
      "type":"structure",
      "members":{
        "items":{
          "shape":"WorkflowVersionList",
          "documentation":"<p>A list of workflow version items.</p>"
        },
        "nextToken":{
          "shape":"WorkflowVersionListToken",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        }
      }
    },
    "ListWorkflowsRequest":{
      "type":"structure",
      "members":{
        "type":{
          "shape":"WorkflowType",
          "documentation":"<p>Filter the list by workflow type.</p>",
          "location":"querystring",
          "locationName":"type"
        },
        "name":{
          "shape":"WorkflowName",
          "documentation":"<p>Filter the list by workflow name.</p>",
          "location":"querystring",
          "locationName":"name"
        },
        "startingToken":{
          "shape":"WorkflowListToken",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"startingToken"
        },
        "maxResults":{
          "shape":"ListWorkflowsRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of workflows to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        }
      }
    },
    "ListWorkflowsRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListWorkflowsResponse":{
      "type":"structure",
      "members":{
        "items":{
          "shape":"WorkflowList",
          "documentation":"<p>A list of workflow items.</p>"
        },
        "nextToken":{
          "shape":"WorkflowListToken",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        }
      }
    },
    "Long":{
      "type":"long",
      "box":true
    },
    "Md5":{
      "type":"string",
      "max":255,
      "min":1,
      "pattern":"[\\p{L}||\\p{N}]+"
    },
    "MultipartReadSetUploadList":{
      "type":"list",
      "member":{"shape":"MultipartReadSetUploadListItem"}
    },
    "MultipartReadSetUploadListItem":{
      "type":"structure",
      "required":[
        "sequenceStoreId",
        "uploadId",
        "sourceFileType",
        "subjectId",
        "sampleId",
        "generatedFrom",
        "referenceArn",
        "creationTime"
      ],
      "members":{
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p> The sequence store ID used for the multipart upload. </p>"
        },
        "uploadId":{
          "shape":"UploadId",
          "documentation":"<p> The ID for the initiated multipart upload. </p>"
        },
        "sourceFileType":{
          "shape":"FileType",
          "documentation":"<p> The type of file the read set originated from. </p>"
        },
        "subjectId":{
          "shape":"SubjectId",
          "documentation":"<p> The read set source's subject ID. </p>"
        },
        "sampleId":{
          "shape":"SampleId",
          "documentation":"<p> The read set source's sample ID. </p>"
        },
        "generatedFrom":{
          "shape":"GeneratedFrom",
          "documentation":"<p> The source of an uploaded part. </p>"
        },
        "referenceArn":{
          "shape":"ReferenceArn",
          "documentation":"<p> The source's reference ARN. </p>"
        },
        "name":{
          "shape":"ReadSetName",
          "documentation":"<p> The name of a read set. </p>"
        },
        "description":{
          "shape":"ReadSetDescription",
          "documentation":"<p> The description of a read set. </p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p> Any tags you wish to add to a read set. </p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p> The time stamp for when a direct upload was created. </p>"
        }
      },
      "documentation":"<p> Part of the response to ListMultipartReadSetUploads, excluding completed and aborted multipart uploads. </p>"
    },
    "NextToken":{
      "type":"string",
      "max":6144,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "NotSupportedOperationException":{
      "type":"structure",
      "required":["message"],
      "members":{
        "message":{"shape":"String"}
      },
      "documentation":"<p> The operation is not supported by Amazon Omics, or the API does not exist. </p>",
      "error":{
        "httpStatusCode":405,
        "senderFault":true
      },
      "exception":true
    },
    "NumericIdInArn":{
      "type":"string",
      "max":18,
      "min":1,
      "pattern":"[0-9]+"
    },
    "ParameterTemplatePath":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "PrimitiveBoolean":{"type":"boolean"},
    "PropagatedSetLevelTags":{
      "type":"list",
      "member":{"shape":"TagKey"},
      "max":50,
      "min":0
    },
    "PutS3AccessPolicyRequest":{
      "type":"structure",
      "required":[
        "s3AccessPointArn",
        "s3AccessPolicy"
      ],
      "members":{
        "s3AccessPointArn":{
          "shape":"S3AccessPointArn",
          "documentation":"<p>The S3 access point ARN where you want to put the access policy.</p>",
          "location":"uri",
          "locationName":"s3AccessPointArn"
        },
        "s3AccessPolicy":{
          "shape":"S3AccessPolicy",
          "documentation":"<p>The resource policy that controls S3 access to the store.</p>",
          "jsonvalue":true
        }
      }
    },
    "PutS3AccessPolicyResponse":{
      "type":"structure",
      "members":{
        "s3AccessPointArn":{
          "shape":"S3AccessPointArn",
          "documentation":"<p>The S3 access point ARN that now has the access policy.</p>"
        },
        "storeId":{
          "shape":"StoreId",
          "documentation":"<p>The Amazon Web Services-generated Sequence Store or Reference Store ID.</p>"
        },
        "storeType":{
          "shape":"StoreType",
          "documentation":"<p>The type of store associated with the access point.</p>"
        }
      }
    },
    "Quote":{
      "type":"string",
      "max":1,
      "min":1
    },
    "QuoteAll":{"type":"boolean"},
    "Range":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"[\\p{N}||\\p{P}]+"
    },
    "RangeNotSatisfiableException":{
      "type":"structure",
      "required":["message"],
      "members":{
        "message":{"shape":"String"}
      },
      "documentation":"<p>The ranges specified in the request are not valid.</p>",
      "error":{
        "httpStatusCode":416,
        "senderFault":true
      },
      "exception":true,
      "retryable":{"throttling":false}
    },
    "ReadOptions":{
      "type":"structure",
      "members":{
        "sep":{
          "shape":"Separator",
          "documentation":"<p>The file's field separator.</p>"
        },
        "encoding":{
          "shape":"Encoding",
          "documentation":"<p>The file's encoding.</p>"
        },
        "quote":{
          "shape":"Quote",
          "documentation":"<p>The file's quote character.</p>"
        },
        "quoteAll":{
          "shape":"QuoteAll",
          "documentation":"<p>Whether all values need to be quoted, or just those that contain quotes.</p>"
        },
        "escape":{
          "shape":"EscapeChar",
          "documentation":"<p>A character for escaping quotes in the file.</p>"
        },
        "escapeQuotes":{
          "shape":"EscapeQuotes",
          "documentation":"<p>Whether quotes need to be escaped in the file.</p>"
        },
        "comment":{
          "shape":"CommentChar",
          "documentation":"<p>The file's comment character.</p>"
        },
        "header":{
          "shape":"Header",
          "documentation":"<p>Whether the file has a header row.</p>"
        },
        "lineSep":{
          "shape":"LineSep",
          "documentation":"<p>A line separator for the file.</p>"
        }
      },
      "documentation":"<p>Read options for an annotation import job.</p>"
    },
    "ReadSetActivationJobItemStatus":{
      "type":"string",
      "enum":[
        "NOT_STARTED",
        "IN_PROGRESS",
        "FINISHED",
        "FAILED"
      ]
    },
    "ReadSetActivationJobStatus":{
      "type":"string",
      "enum":[
        "SUBMITTED",
        "IN_PROGRESS",
        "CANCELLING",
        "CANCELLED",
        "FAILED",
        "COMPLETED",
        "COMPLETED_WITH_FAILURES"
      ]
    },
    "ReadSetArn":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"arn:.+"
    },
    "ReadSetBatchError":{
      "type":"structure",
      "required":[
        "id",
        "code",
        "message"
      ],
      "members":{
        "id":{
          "shape":"ReadSetId",
          "documentation":"<p>The error's ID.</p>"
        },
        "code":{
          "shape":"String",
          "documentation":"<p>The error's code.</p>"
        },
        "message":{
          "shape":"String",
          "documentation":"<p>The error's message.</p>"
        }
      },
      "documentation":"<p>An error from a batch read set operation.</p>"
    },
    "ReadSetBatchErrorList":{
      "type":"list",
      "member":{"shape":"ReadSetBatchError"}
    },
    "ReadSetDescription":{
      "type":"string",
      "max":255,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "ReadSetExportJobItemStatus":{
      "type":"string",
      "enum":[
        "NOT_STARTED",
        "IN_PROGRESS",
        "FINISHED",
        "FAILED"
      ]
    },
    "ReadSetExportJobStatus":{
      "type":"string",
      "enum":[
        "SUBMITTED",
        "IN_PROGRESS",
        "CANCELLING",
        "CANCELLED",
        "FAILED",
        "COMPLETED",
        "COMPLETED_WITH_FAILURES"
      ]
    },
    "ReadSetFile":{
      "type":"string",
      "enum":[
        "SOURCE1",
        "SOURCE2",
        "INDEX"
      ]
    },
    "ReadSetFiles":{
      "type":"structure",
      "members":{
        "source1":{
          "shape":"FileInformation",
          "documentation":"<p>The location of the first file in Amazon S3.</p>"
        },
        "source2":{
          "shape":"FileInformation",
          "documentation":"<p>The location of the second file in Amazon S3.</p>"
        },
        "index":{
          "shape":"FileInformation",
          "documentation":"<p>The files' index.</p>"
        }
      },
      "documentation":"<p>Files in a read set.</p>"
    },
    "ReadSetFilter":{
      "type":"structure",
      "members":{
        "name":{
          "shape":"ReadSetName",
          "documentation":"<p>A name to filter on.</p>"
        },
        "status":{
          "shape":"ReadSetStatus",
          "documentation":"<p>A status to filter on.</p>"
        },
        "referenceArn":{
          "shape":"ReferenceArnFilter",
          "documentation":"<p>A genome reference ARN to filter on.</p>"
        },
        "createdAfter":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's start date.</p>"
        },
        "createdBefore":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's end date.</p>"
        },
        "sampleId":{
          "shape":"SampleId",
          "documentation":"<p> The read set source's sample ID. </p>"
        },
        "subjectId":{
          "shape":"SubjectId",
          "documentation":"<p> The read set source's subject ID. </p>"
        },
        "generatedFrom":{
          "shape":"GeneratedFrom",
          "documentation":"<p> Where the source originated. </p>"
        },
        "creationType":{
          "shape":"CreationType",
          "documentation":"<p> The creation type of the read set. </p>"
        }
      },
      "documentation":"<p>A filter for read sets.</p>"
    },
    "ReadSetId":{
      "type":"string",
      "max":36,
      "min":10,
      "pattern":"[0-9]+"
    },
    "ReadSetIdList":{
      "type":"list",
      "member":{"shape":"ReadSetId"},
      "max":100,
      "min":1
    },
    "ReadSetImportJobItemStatus":{
      "type":"string",
      "enum":[
        "NOT_STARTED",
        "IN_PROGRESS",
        "FINISHED",
        "FAILED"
      ]
    },
    "ReadSetImportJobStatus":{
      "type":"string",
      "enum":[
        "SUBMITTED",
        "IN_PROGRESS",
        "CANCELLING",
        "CANCELLED",
        "FAILED",
        "COMPLETED",
        "COMPLETED_WITH_FAILURES"
      ]
    },
    "ReadSetList":{
      "type":"list",
      "member":{"shape":"ReadSetListItem"}
    },
    "ReadSetListItem":{
      "type":"structure",
      "required":[
        "id",
        "arn",
        "sequenceStoreId",
        "status",
        "fileType",
        "creationTime"
      ],
      "members":{
        "id":{
          "shape":"ReadSetId",
          "documentation":"<p>The read set's ID.</p>"
        },
        "arn":{
          "shape":"ReadSetArn",
          "documentation":"<p>The read set's ARN.</p>"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The read set's sequence store ID.</p>"
        },
        "subjectId":{
          "shape":"SubjectId",
          "documentation":"<p>The read set's subject ID.</p>"
        },
        "sampleId":{
          "shape":"SampleId",
          "documentation":"<p>The read set's sample ID.</p>"
        },
        "status":{
          "shape":"ReadSetStatus",
          "documentation":"<p>The read set's status.</p>"
        },
        "name":{
          "shape":"ReadSetName",
          "documentation":"<p>The read set's name.</p>"
        },
        "description":{
          "shape":"ReadSetDescription",
          "documentation":"<p>The read set's description.</p>"
        },
        "referenceArn":{
          "shape":"ReferenceArn",
          "documentation":"<p>The read set's genome reference ARN.</p>"
        },
        "fileType":{
          "shape":"FileType",
          "documentation":"<p>The read set's file type.</p>"
        },
        "sequenceInformation":{"shape":"SequenceInformation"},
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the read set was created.</p>"
        },
        "statusMessage":{
          "shape":"ReadSetStatusMessage",
          "documentation":"<p> The status for a read set. It provides more detail as to why the read set has a status. </p>"
        },
        "creationType":{
          "shape":"CreationType",
          "documentation":"<p> The creation type of the read set. </p>"
        },
        "etag":{
          "shape":"ETag",
          "documentation":"<p>The entity tag (ETag) is a hash of the object representing its semantic content.</p>"
        }
      },
      "documentation":"<p>A read set.</p>"
    },
    "ReadSetName":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "ReadSetPartSource":{
      "type":"string",
      "enum":[
        "SOURCE1",
        "SOURCE2"
      ]
    },
    "ReadSetPartStreamingBlob":{
      "type":"blob",
      "requiresLength":true,
      "streaming":true
    },
    "ReadSetS3Access":{
      "type":"structure",
      "members":{
        "s3Uri":{
          "shape":"S3Uri",
          "documentation":"<p>The S3 URI for each read set file.</p>"
        }
      },
      "documentation":"<p>The S3 URI for each read set file.</p>"
    },
    "ReadSetStatus":{
      "type":"string",
      "enum":[
        "ARCHIVED",
        "ACTIVATING",
        "ACTIVE",
        "DELETING",
        "DELETED",
        "PROCESSING_UPLOAD",
        "UPLOAD_FAILED"
      ]
    },
    "ReadSetStatusMessage":{
      "type":"string",
      "max":255,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "ReadSetStreamingBlob":{
      "type":"blob",
      "streaming":true
    },
    "ReadSetUploadPartList":{
      "type":"list",
      "member":{"shape":"ReadSetUploadPartListItem"}
    },
    "ReadSetUploadPartListFilter":{
      "type":"structure",
      "members":{
        "createdAfter":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p> Filters for read set uploads after a specified time. </p>"
        },
        "createdBefore":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p> Filters for read set part uploads before a specified time. </p>"
        }
      },
      "documentation":"<p> Filter settings that select for read set upload parts of interest. </p>"
    },
    "ReadSetUploadPartListItem":{
      "type":"structure",
      "required":[
        "partNumber",
        "partSize",
        "partSource",
        "checksum"
      ],
      "members":{
        "partNumber":{
          "shape":"ReadSetUploadPartListItemPartNumberInteger",
          "documentation":"<p> The number identifying the part in an upload. </p>"
        },
        "partSize":{
          "shape":"ReadSetUploadPartListItemPartSizeLong",
          "documentation":"<p> The size of the the part in an upload. </p>"
        },
        "partSource":{
          "shape":"ReadSetPartSource",
          "documentation":"<p> The origin of the part being direct uploaded. </p>"
        },
        "checksum":{
          "shape":"String",
          "documentation":"<p> A unique identifier used to confirm that parts are being added to the correct upload. </p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p> The time stamp for when a direct upload was created. </p>"
        },
        "lastUpdatedTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p> The time stamp for the most recent update to an uploaded part. </p>"
        }
      },
      "documentation":"<p> The metadata of a single part of a file that was added to a multipart upload. A list of these parts is returned in the response to the ListReadSetUploadParts API. </p>"
    },
    "ReadSetUploadPartListItemPartNumberInteger":{
      "type":"integer",
      "box":true,
      "max":10000,
      "min":1
    },
    "ReadSetUploadPartListItemPartSizeLong":{
      "type":"long",
      "box":true,
      "max":5368709120,
      "min":1
    },
    "ReadmeMarkdown":{"type":"string"},
    "ReadmePath":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "ReadmeS3PresignedUrl":{
      "type":"string",
      "max":256,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "ReferenceArn":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"arn:.+"
    },
    "ReferenceArnFilter":{
      "type":"string",
      "max":127,
      "min":0,
      "pattern":"$|^arn:.+"
    },
    "ReferenceCreationType":{
      "type":"string",
      "enum":["IMPORT"]
    },
    "ReferenceDescription":{
      "type":"string",
      "max":255,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "ReferenceFile":{
      "type":"string",
      "enum":[
        "SOURCE",
        "INDEX"
      ]
    },
    "ReferenceFiles":{
      "type":"structure",
      "members":{
        "source":{
          "shape":"FileInformation",
          "documentation":"<p>The source file's location in Amazon S3.</p>"
        },
        "index":{
          "shape":"FileInformation",
          "documentation":"<p>The files' index.</p>"
        }
      },
      "documentation":"<p>A set of genome reference files.</p>"
    },
    "ReferenceFilter":{
      "type":"structure",
      "members":{
        "name":{
          "shape":"ReferenceName",
          "documentation":"<p>A name to filter on.</p>"
        },
        "md5":{
          "shape":"Md5",
          "documentation":"<p>An MD5 checksum to filter on.</p>"
        },
        "createdAfter":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's start date.</p>"
        },
        "createdBefore":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's end date.</p>"
        }
      },
      "documentation":"<p>A filter for references.</p>"
    },
    "ReferenceId":{
      "type":"string",
      "max":36,
      "min":10,
      "pattern":"[0-9]+"
    },
    "ReferenceImportJobItemStatus":{
      "type":"string",
      "enum":[
        "NOT_STARTED",
        "IN_PROGRESS",
        "FINISHED",
        "FAILED"
      ]
    },
    "ReferenceImportJobStatus":{
      "type":"string",
      "enum":[
        "SUBMITTED",
        "IN_PROGRESS",
        "CANCELLING",
        "CANCELLED",
        "FAILED",
        "COMPLETED",
        "COMPLETED_WITH_FAILURES"
      ]
    },
    "ReferenceItem":{
      "type":"structure",
      "members":{
        "referenceArn":{
          "shape":"ReferenceArn",
          "documentation":"<p>The reference's ARN.</p>"
        }
      },
      "documentation":"<p>A genome reference.</p>",
      "union":true
    },
    "ReferenceList":{
      "type":"list",
      "member":{"shape":"ReferenceListItem"}
    },
    "ReferenceListItem":{
      "type":"structure",
      "required":[
        "id",
        "arn",
        "referenceStoreId",
        "md5",
        "creationTime",
        "updateTime"
      ],
      "members":{
        "id":{
          "shape":"ReferenceId",
          "documentation":"<p>The reference's ID.</p>"
        },
        "arn":{
          "shape":"ReferenceArn",
          "documentation":"<p>The reference's ARN.</p>"
        },
        "referenceStoreId":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The reference's store ID.</p>"
        },
        "md5":{
          "shape":"Md5",
          "documentation":"<p>The reference's MD5 checksum.</p>"
        },
        "status":{
          "shape":"ReferenceStatus",
          "documentation":"<p>The reference's status.</p>"
        },
        "name":{
          "shape":"ReferenceName",
          "documentation":"<p>The reference's name.</p>"
        },
        "description":{
          "shape":"ReferenceDescription",
          "documentation":"<p>The reference's description.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the reference was created.</p>"
        },
        "updateTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the reference was updated.</p>"
        }
      },
      "documentation":"<p>A genome reference.</p>"
    },
    "ReferenceName":{
      "type":"string",
      "max":255,
      "min":3,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "ReferenceStatus":{
      "type":"string",
      "enum":[
        "ACTIVE",
        "DELETING",
        "DELETED"
      ]
    },
    "ReferenceStoreArn":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"arn:.+"
    },
    "ReferenceStoreDescription":{
      "type":"string",
      "max":255,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "ReferenceStoreDetail":{
      "type":"structure",
      "required":[
        "arn",
        "id",
        "creationTime"
      ],
      "members":{
        "arn":{
          "shape":"ReferenceStoreArn",
          "documentation":"<p>The store's ARN.</p>"
        },
        "id":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The store's ID.</p>"
        },
        "name":{
          "shape":"ReferenceStoreName",
          "documentation":"<p>The store's name.</p>"
        },
        "description":{
          "shape":"ReferenceStoreDescription",
          "documentation":"<p>The store's description.</p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>The store's server-side encryption (SSE) settings.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the store was created.</p>"
        }
      },
      "documentation":"<p>Details about a reference store.</p>"
    },
    "ReferenceStoreDetailList":{
      "type":"list",
      "member":{"shape":"ReferenceStoreDetail"}
    },
    "ReferenceStoreFilter":{
      "type":"structure",
      "members":{
        "name":{
          "shape":"ReferenceStoreName",
          "documentation":"<p>The name to filter on.</p>"
        },
        "createdAfter":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's start date.</p>"
        },
        "createdBefore":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's end date.</p>"
        }
      },
      "documentation":"<p>A filter for reference stores.</p>"
    },
    "ReferenceStoreId":{
      "type":"string",
      "max":36,
      "min":10,
      "pattern":"[0-9]+"
    },
    "ReferenceStoreName":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "ReferenceStreamingBlob":{
      "type":"blob",
      "streaming":true
    },
    "RegistryMapping":{
      "type":"structure",
      "members":{
        "upstreamRegistryUrl":{
          "shape":"Uri",
          "documentation":"<p>The URI of the upstream registry.</p>"
        },
        "ecrRepositoryPrefix":{
          "shape":"EcrRepositoryPrefix",
          "documentation":"<p>The repository prefix to use in the ECR private repository.</p>"
        },
        "upstreamRepositoryPrefix":{
          "shape":"UpstreamRepositoryPrefix",
          "documentation":"<p>The repository prefix of the corresponding repository in the upstream registry.</p>"
        },
        "ecrAccountId":{
          "shape":"AwsAccountId",
          "documentation":"<p>Account ID of the account that owns the upstream container image.</p>"
        }
      },
      "documentation":"<p>If you are using the ECR pull through cache feature, the registry mapping maps between the ECR repository and the upstream registry where container images are pulled and synchronized.</p>"
    },
    "RegistryMappingsList":{
      "type":"list",
      "member":{"shape":"RegistryMapping"}
    },
    "RequestTimeoutException":{
      "type":"structure",
      "required":["message"],
      "members":{
        "message":{"shape":"String"}
      },
      "documentation":"<p>The request timed out.</p>",
      "error":{
        "httpStatusCode":408,
        "senderFault":true
      },
      "exception":true
    },
    "ResourceId":{
      "type":"string",
      "pattern":"[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}"
    },
    "ResourceIdentifier":{
      "type":"string",
      "max":50,
      "min":1
    },
    "ResourceNotFoundException":{
      "type":"structure",
      "required":["message"],
      "members":{
        "message":{"shape":"String"}
      },
      "documentation":"<p>The target resource was not found in the current Region.</p>",
      "error":{
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "ResourceOwner":{
      "type":"string",
      "enum":[
        "SELF",
        "OTHER"
      ]
    },
    "RoleArn":{
      "type":"string",
      "max":2048,
      "min":20,
      "pattern":"arn:.*"
    },
    "RunArn":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"arn:.+"
    },
    "RunCacheArn":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"arn:.+"
    },
    "RunCacheId":{
      "type":"string",
      "max":18,
      "min":1,
      "pattern":"[0-9]+"
    },
    "RunCacheList":{
      "type":"list",
      "member":{"shape":"RunCacheListItem"}
    },
    "RunCacheListItem":{
      "type":"structure",
      "members":{
        "arn":{
          "shape":"RunCacheArn",
          "documentation":"<p>Unique resource identifier for the run cache.</p>"
        },
        "cacheBehavior":{
          "shape":"CacheBehavior",
          "documentation":"<p>Default cache behavior for the run cache.</p>"
        },
        "cacheS3Uri":{
          "shape":"S3UriForBucketOrObject",
          "documentation":"<p>The S3 uri for the run cache data.</p>"
        },
        "creationTime":{
          "shape":"RunCacheTimestamp",
          "documentation":"<p>The time that this run cache was created (an ISO 8601 formatted string).</p>"
        },
        "id":{
          "shape":"RunCacheId",
          "documentation":"<p>The identifier for this run cache.</p>"
        },
        "name":{
          "shape":"UserCustomName",
          "documentation":"<p>The name of the run cache.</p>"
        },
        "status":{
          "shape":"RunCacheStatus",
          "documentation":"<p>The run cache status.</p>"
        }
      },
      "documentation":"<p>List entry for one run cache.</p>"
    },
    "RunCacheRequestId":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "RunCacheStatus":{
      "type":"string",
      "enum":[
        "ACTIVE",
        "DELETED",
        "FAILED"
      ],
      "max":64,
      "min":1
    },
    "RunCacheTimestamp":{
      "type":"timestamp",
      "timestampFormat":"iso8601"
    },
    "RunExport":{
      "type":"string",
      "enum":["DEFINITION"],
      "max":64,
      "min":1
    },
    "RunExportList":{
      "type":"list",
      "member":{"shape":"RunExport"},
      "max":32,
      "min":0
    },
    "RunFailureReason":{
      "type":"string",
      "max":64,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "RunGroupArn":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"arn:.+"
    },
    "RunGroupId":{
      "type":"string",
      "max":18,
      "min":1,
      "pattern":"[0-9]+"
    },
    "RunGroupList":{
      "type":"list",
      "member":{"shape":"RunGroupListItem"}
    },
    "RunGroupListItem":{
      "type":"structure",
      "members":{
        "arn":{
          "shape":"RunGroupArn",
          "documentation":"<p>The group's ARN.</p>"
        },
        "id":{
          "shape":"RunGroupId",
          "documentation":"<p>The group's ID.</p>"
        },
        "name":{
          "shape":"RunGroupName",
          "documentation":"<p>The group's name.</p>"
        },
        "maxCpus":{
          "shape":"RunGroupListItemMaxCpusInteger",
          "documentation":"<p>The group's maximum CPU count setting.</p>"
        },
        "maxRuns":{
          "shape":"RunGroupListItemMaxRunsInteger",
          "documentation":"<p>The group's maximum concurrent run setting.</p>"
        },
        "maxDuration":{
          "shape":"RunGroupListItemMaxDurationInteger",
          "documentation":"<p>The group's maximum duration setting in minutes.</p>"
        },
        "creationTime":{
          "shape":"RunGroupTimestamp",
          "documentation":"<p>When the group was created.</p>"
        },
        "maxGpus":{
          "shape":"RunGroupListItemMaxGpusInteger",
          "documentation":"<p> The maximum GPUs that can be used by a run group. </p>"
        }
      },
      "documentation":"<p>A run group.</p>"
    },
    "RunGroupListItemMaxCpusInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "RunGroupListItemMaxDurationInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "RunGroupListItemMaxGpusInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "RunGroupListItemMaxRunsInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "RunGroupListToken":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "RunGroupName":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "RunGroupRequestId":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "RunGroupTimestamp":{
      "type":"timestamp",
      "timestampFormat":"iso8601"
    },
    "RunId":{
      "type":"string",
      "max":18,
      "min":1,
      "pattern":"[0-9]+"
    },
    "RunLeftNormalization":{"type":"boolean"},
    "RunList":{
      "type":"list",
      "member":{"shape":"RunListItem"}
    },
    "RunListItem":{
      "type":"structure",
      "members":{
        "arn":{
          "shape":"RunArn",
          "documentation":"<p>The run's ARN.</p>"
        },
        "id":{
          "shape":"RunId",
          "documentation":"<p>The run's ID.</p>"
        },
        "status":{
          "shape":"RunStatus",
          "documentation":"<p>The run's status.</p>"
        },
        "workflowId":{
          "shape":"WorkflowId",
          "documentation":"<p>The run's workflow ID.</p>"
        },
        "name":{
          "shape":"RunName",
          "documentation":"<p>The run's name.</p>"
        },
        "priority":{
          "shape":"RunListItemPriorityInteger",
          "documentation":"<p>The run's priority.</p>"
        },
        "storageCapacity":{
          "shape":"RunListItemStorageCapacityInteger",
          "documentation":"<p>The run's storage capacity in gibibytes. For dynamic storage, after the run has completed, this value is the maximum amount of storage used during the run.</p>"
        },
        "creationTime":{
          "shape":"RunTimestamp",
          "documentation":"<p>When the run was created.</p>"
        },
        "startTime":{
          "shape":"RunTimestamp",
          "documentation":"<p>When the run started.</p>"
        },
        "stopTime":{
          "shape":"RunTimestamp",
          "documentation":"<p>When the run stopped.</p>"
        },
        "storageType":{
          "shape":"StorageType",
          "documentation":"<p>The run's storage type.</p>"
        },
        "workflowVersionName":{
          "shape":"WorkflowVersionName",
          "documentation":"<p>The name of the workflow version.</p>"
        }
      },
      "documentation":"<p>A workflow run.</p>"
    },
    "RunListItemPriorityInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":0
    },
    "RunListItemStorageCapacityInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":0
    },
    "RunListToken":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "RunLogLevel":{
      "type":"string",
      "enum":[
        "OFF",
        "FATAL",
        "ERROR",
        "ALL"
      ],
      "max":64,
      "min":1
    },
    "RunLogLocation":{
      "type":"structure",
      "members":{
        "engineLogStream":{
          "shape":"EngineLogStream",
          "documentation":"<p>The log stream ARN for the engine log.</p>"
        },
        "runLogStream":{
          "shape":"RunLogStream",
          "documentation":"<p>The log stream ARN for the run log.</p>"
        }
      },
      "documentation":"<p>The URI for the run log.</p>"
    },
    "RunLogStream":{
      "type":"string",
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "RunName":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "RunOutputUri":{
      "type":"string",
      "max":750,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "RunParameters":{
      "type":"structure",
      "members":{
      },
      "document":true
    },
    "RunRequestId":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "RunResourceDigest":{
      "type":"string",
      "max":64,
      "min":0,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "RunResourceDigestKey":{
      "type":"string",
      "max":256,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "RunResourceDigests":{
      "type":"map",
      "key":{"shape":"RunResourceDigestKey"},
      "value":{"shape":"RunResourceDigest"}
    },
    "RunRetentionMode":{
      "type":"string",
      "enum":[
        "RETAIN",
        "REMOVE"
      ],
      "max":64,
      "min":1
    },
    "RunRoleArn":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"arn:.+"
    },
    "RunStartedBy":{
      "type":"string",
      "max":128,
      "min":1
    },
    "RunStatus":{
      "type":"string",
      "enum":[
        "PENDING",
        "STARTING",
        "RUNNING",
        "STOPPING",
        "COMPLETED",
        "DELETED",
        "CANCELLED",
        "FAILED"
      ],
      "max":64,
      "min":1
    },
    "RunStatusMessage":{
      "type":"string",
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "RunTimestamp":{
      "type":"timestamp",
      "timestampFormat":"iso8601"
    },
    "RunUuid":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "S3AccessConfig":{
      "type":"structure",
      "members":{
        "accessLogLocation":{
          "shape":"AccessLogLocation",
          "documentation":"<p>Location of the access logs.</p>"
        }
      },
      "documentation":"<p>S3 access configuration parameters.</p>"
    },
    "S3AccessPointArn":{
      "type":"string",
      "max":1024,
      "min":1,
      "pattern":"arn:[^:]*:s3:[^:]*:[^:]*:accesspoint/.*"
    },
    "S3AccessPolicy":{
      "type":"string",
      "max":100000,
      "min":1
    },
    "S3Destination":{
      "type":"string",
      "pattern":"s3://([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])/?((.{1,1024})/)?"
    },
    "S3Uri":{
      "type":"string",
      "pattern":"s3://([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])/(.{1,1024})"
    },
    "S3UriForBucketOrObject":{
      "type":"string",
      "documentation":"<p>Uri to a S3 object or bucket</p>",
      "pattern":"s3://([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])(/(.{0,1024}))?"
    },
    "S3UriForObject":{
      "type":"string",
      "pattern":"s3://([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])/((.{1,1024}))"
    },
    "SampleId":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "SchemaItem":{
      "type":"map",
      "key":{"shape":"SchemaItemKeyString"},
      "value":{"shape":"SchemaValueType"},
      "max":1,
      "min":1
    },
    "SchemaItemKeyString":{
      "type":"string",
      "pattern":"[a-z0-9_]{1,255}"
    },
    "SchemaValueType":{
      "type":"string",
      "enum":[
        "LONG",
        "INT",
        "STRING",
        "FLOAT",
        "DOUBLE",
        "BOOLEAN"
      ]
    },
    "Separator":{
      "type":"string",
      "max":20,
      "min":1
    },
    "SequenceInformation":{
      "type":"structure",
      "members":{
        "totalReadCount":{
          "shape":"Long",
          "documentation":"<p>The sequence's total read count.</p>"
        },
        "totalBaseCount":{
          "shape":"Long",
          "documentation":"<p>The sequence's total base count.</p>"
        },
        "generatedFrom":{
          "shape":"GeneratedFrom",
          "documentation":"<p>Where the sequence originated.</p>"
        },
        "alignment":{
          "shape":"String",
          "documentation":"<p>The sequence's alignment setting.</p>"
        }
      },
      "documentation":"<p>Details about a sequence.</p>"
    },
    "SequenceStoreArn":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"arn:.+"
    },
    "SequenceStoreDescription":{
      "type":"string",
      "max":255,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "SequenceStoreDetail":{
      "type":"structure",
      "required":[
        "arn",
        "id",
        "creationTime"
      ],
      "members":{
        "arn":{
          "shape":"SequenceStoreArn",
          "documentation":"<p>The store's ARN.</p>"
        },
        "id":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The store's ID.</p>"
        },
        "name":{
          "shape":"SequenceStoreName",
          "documentation":"<p>The store's name.</p>"
        },
        "description":{
          "shape":"SequenceStoreDescription",
          "documentation":"<p>The store's description.</p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>The store's server-side encryption (SSE) settings.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the store was created.</p>"
        },
        "fallbackLocation":{
          "shape":"FallbackLocation",
          "documentation":"<p> An S3 location that is used to store files that have failed a direct upload. </p>"
        },
        "eTagAlgorithmFamily":{
          "shape":"ETagAlgorithmFamily",
          "documentation":"<p>The algorithm family of the ETag.</p>"
        },
        "status":{
          "shape":"SequenceStoreStatus",
          "documentation":"<p>Status of the sequence store.</p>"
        },
        "statusMessage":{
          "shape":"SequenceStoreStatusMessage",
          "documentation":"<p>The status message of the sequence store.</p>"
        },
        "updateTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The last-updated time of the Sequence Store.</p>"
        }
      },
      "documentation":"<p>Details about a sequence store.</p>"
    },
    "SequenceStoreDetailList":{
      "type":"list",
      "member":{"shape":"SequenceStoreDetail"}
    },
    "SequenceStoreFilter":{
      "type":"structure",
      "members":{
        "name":{
          "shape":"SequenceStoreName",
          "documentation":"<p>A name to filter on.</p>"
        },
        "createdAfter":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's start date.</p>"
        },
        "createdBefore":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's end date.</p>"
        },
        "status":{
          "shape":"SequenceStoreStatus",
          "documentation":"<p>Filter results based on status.</p>"
        },
        "updatedAfter":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>Filter results based on stores updated after the specified time.</p>"
        },
        "updatedBefore":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>Filter results based on stores updated before the specified time.</p>"
        }
      },
      "documentation":"<p>A filter for a sequence store.</p>"
    },
    "SequenceStoreId":{
      "type":"string",
      "max":36,
      "min":10,
      "pattern":"[0-9]+"
    },
    "SequenceStoreName":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "SequenceStoreS3Access":{
      "type":"structure",
      "members":{
        "s3Uri":{
          "shape":"S3Uri",
          "documentation":"<p>The S3 URI of the sequence store.</p>"
        },
        "s3AccessPointArn":{
          "shape":"S3AccessPointArn",
          "documentation":"<p>This is ARN of the access point associated with the S3 bucket storing read sets.</p>"
        },
        "accessLogLocation":{
          "shape":"AccessLogLocation",
          "documentation":"<p>Location of the access logs.</p>"
        }
      },
      "documentation":"<p>The S3 access metadata of the sequence store.</p>"
    },
    "SequenceStoreStatus":{
      "type":"string",
      "enum":[
        "CREATING",
        "ACTIVE",
        "UPDATING",
        "DELETING",
        "FAILED"
      ]
    },
    "SequenceStoreStatusMessage":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "ServiceQuotaExceededException":{
      "type":"structure",
      "required":["message"],
      "members":{
        "message":{"shape":"String"}
      },
      "documentation":"<p>The request exceeds a service quota.</p>",
      "error":{
        "httpStatusCode":402,
        "senderFault":true
      },
      "exception":true
    },
    "ShareDetails":{
      "type":"structure",
      "members":{
        "shareId":{
          "shape":"String",
          "documentation":"<p>The ID of the resource share.</p>"
        },
        "resourceArn":{
          "shape":"String",
          "documentation":"<p>The Arn of the shared resource. </p>"
        },
        "resourceId":{
          "shape":"String",
          "documentation":"<p>The ID of the shared resource. </p>"
        },
        "principalSubscriber":{
          "shape":"String",
          "documentation":"<p>The principal subscriber is the account that is sharing the resource.</p>"
        },
        "ownerId":{
          "shape":"String",
          "documentation":"<p>The account ID for the data owner. The owner creates the resource share.</p>"
        },
        "status":{
          "shape":"ShareStatus",
          "documentation":"<p>The status of the share.</p>"
        },
        "statusMessage":{
          "shape":"StatusMessage",
          "documentation":"<p>The status message for a resource share. It provides additional details about the share status.</p>"
        },
        "shareName":{
          "shape":"ShareName",
          "documentation":"<p>The name of the resource share.</p>"
        },
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p>The timestamp of when the resource share was created.</p>"
        },
        "updateTime":{
          "shape":"UpdateTime",
          "documentation":"<p>The timestamp of the resource share update.</p>"
        }
      },
      "documentation":"<p>The details of a resource share.</p>"
    },
    "ShareDetailsList":{
      "type":"list",
      "member":{"shape":"ShareDetails"}
    },
    "ShareName":{
      "type":"string",
      "max":256,
      "min":1,
      "pattern":"[a-zA-Z0-9_-]+"
    },
    "ShareResourceType":{
      "type":"string",
      "enum":[
        "VARIANT_STORE",
        "ANNOTATION_STORE",
        "WORKFLOW"
      ]
    },
    "ShareStatus":{
      "type":"string",
      "enum":[
        "PENDING",
        "ACTIVATING",
        "ACTIVE",
        "DELETING",
        "DELETED",
        "FAILED"
      ]
    },
    "SourceFiles":{
      "type":"structure",
      "required":["source1"],
      "members":{
        "source1":{
          "shape":"S3Uri",
          "documentation":"<p>The location of the first file in Amazon S3.</p>"
        },
        "source2":{
          "shape":"S3Uri",
          "documentation":"<p>The location of the second file in Amazon S3.</p>"
        }
      },
      "documentation":"<p>Source files for a sequence.</p>"
    },
    "SourceReference":{
      "type":"structure",
      "required":[
        "type",
        "value"
      ],
      "members":{
        "type":{
          "shape":"SourceReferenceType",
          "documentation":"<p>The type of source reference, such as branch, tag, or commit.</p>"
        },
        "value":{
          "shape":"SourceReferenceValue",
          "documentation":"<p>The value of the source reference, such as the branch name, tag name, or commit ID.</p>"
        }
      },
      "documentation":"<p>Contains information about the source reference in a code repository, such as a branch, tag, or commit.</p>"
    },
    "SourceReferenceType":{
      "type":"string",
      "enum":[
        "BRANCH",
        "TAG",
        "COMMIT"
      ]
    },
    "SourceReferenceValue":{"type":"string"},
    "SseConfig":{
      "type":"structure",
      "required":["type"],
      "members":{
        "type":{
          "shape":"EncryptionType",
          "documentation":"<p>The encryption type.</p>"
        },
        "keyArn":{
          "shape":"SseConfigKeyArnString",
          "documentation":"<p>An encryption key ARN.</p>"
        }
      },
      "documentation":"<p>Server-side encryption (SSE) settings for a store.</p>"
    },
    "SseConfigKeyArnString":{
      "type":"string",
      "max":2048,
      "min":20,
      "pattern":".*arn:([^: ]*):([^: ]*):([^: ]*):([0-9]{12}):([^: ]*).*"
    },
    "StartAnnotationImportRequest":{
      "type":"structure",
      "required":[
        "destinationName",
        "roleArn",
        "items"
      ],
      "members":{
        "destinationName":{
          "shape":"StoreName",
          "documentation":"<p>A destination annotation store for the job.</p>"
        },
        "roleArn":{
          "shape":"Arn",
          "documentation":"<p>A service role for the job.</p>"
        },
        "items":{
          "shape":"AnnotationImportItemSources",
          "documentation":"<p>Items to import.</p>"
        },
        "versionName":{
          "shape":"VersionName",
          "documentation":"<p> The name of the annotation store version. </p>"
        },
        "formatOptions":{
          "shape":"FormatOptions",
          "documentation":"<p>Formatting options for the annotation file.</p>"
        },
        "runLeftNormalization":{
          "shape":"RunLeftNormalization",
          "documentation":"<p>The job's left normalization setting.</p>"
        },
        "annotationFields":{
          "shape":"AnnotationFieldMap",
          "documentation":"<p>The annotation schema generated by the parsed annotation data.</p>"
        }
      }
    },
    "StartAnnotationImportResponse":{
      "type":"structure",
      "required":["jobId"],
      "members":{
        "jobId":{
          "shape":"ResourceId",
          "documentation":"<p>The job's ID.</p>"
        }
      }
    },
    "StartReadSetActivationJobRequest":{
      "type":"structure",
      "required":[
        "sequenceStoreId",
        "sources"
      ],
      "members":{
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The read set's sequence store ID.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        },
        "clientToken":{
          "shape":"ClientToken",
          "documentation":"<p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>"
        },
        "sources":{
          "shape":"StartReadSetActivationJobRequestSourcesList",
          "documentation":"<p>The job's source files.</p>"
        }
      }
    },
    "StartReadSetActivationJobRequestSourcesList":{
      "type":"list",
      "member":{"shape":"StartReadSetActivationJobSourceItem"},
      "max":20,
      "min":1
    },
    "StartReadSetActivationJobResponse":{
      "type":"structure",
      "required":[
        "id",
        "sequenceStoreId",
        "status",
        "creationTime"
      ],
      "members":{
        "id":{
          "shape":"ActivationJobId",
          "documentation":"<p>The job's ID.</p>"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The read set's sequence store ID.</p>"
        },
        "status":{
          "shape":"ReadSetActivationJobStatus",
          "documentation":"<p>The job's status.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job was created.</p>"
        }
      }
    },
    "StartReadSetActivationJobSourceItem":{
      "type":"structure",
      "required":["readSetId"],
      "members":{
        "readSetId":{
          "shape":"ReadSetId",
          "documentation":"<p>The source's read set ID.</p>"
        }
      },
      "documentation":"<p>A source for a read set activation job.</p>"
    },
    "StartReadSetExportJobRequest":{
      "type":"structure",
      "required":[
        "sequenceStoreId",
        "destination",
        "roleArn",
        "sources"
      ],
      "members":{
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The read set's sequence store ID.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        },
        "destination":{
          "shape":"S3Destination",
          "documentation":"<p>A location for exported files in Amazon S3.</p>"
        },
        "roleArn":{
          "shape":"RoleArn",
          "documentation":"<p>A service role for the job.</p>"
        },
        "clientToken":{
          "shape":"ClientToken",
          "documentation":"<p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>"
        },
        "sources":{
          "shape":"StartReadSetExportJobRequestSourcesList",
          "documentation":"<p>The job's source files.</p>"
        }
      }
    },
    "StartReadSetExportJobRequestSourcesList":{
      "type":"list",
      "member":{"shape":"ExportReadSet"},
      "max":100,
      "min":1
    },
    "StartReadSetExportJobResponse":{
      "type":"structure",
      "required":[
        "id",
        "sequenceStoreId",
        "destination",
        "status",
        "creationTime"
      ],
      "members":{
        "id":{
          "shape":"ExportJobId",
          "documentation":"<p>The job's ID.</p>"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The read set's sequence store ID.</p>"
        },
        "destination":{
          "shape":"S3Destination",
          "documentation":"<p>The job's output location.</p>"
        },
        "status":{
          "shape":"ReadSetExportJobStatus",
          "documentation":"<p>The job's status.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job was created.</p>"
        }
      }
    },
    "StartReadSetImportJobRequest":{
      "type":"structure",
      "required":[
        "sequenceStoreId",
        "roleArn",
        "sources"
      ],
      "members":{
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The read set's sequence store ID.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        },
        "roleArn":{
          "shape":"RoleArn",
          "documentation":"<p>A service role for the job.</p>"
        },
        "clientToken":{
          "shape":"ClientToken",
          "documentation":"<p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>"
        },
        "sources":{
          "shape":"StartReadSetImportJobRequestSourcesList",
          "documentation":"<p>The job's source files.</p>"
        }
      }
    },
    "StartReadSetImportJobRequestSourcesList":{
      "type":"list",
      "member":{"shape":"StartReadSetImportJobSourceItem"},
      "max":100,
      "min":1
    },
    "StartReadSetImportJobResponse":{
      "type":"structure",
      "required":[
        "id",
        "sequenceStoreId",
        "roleArn",
        "status",
        "creationTime"
      ],
      "members":{
        "id":{
          "shape":"ImportJobId",
          "documentation":"<p>The job's ID.</p>"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The read set's sequence store ID.</p>"
        },
        "roleArn":{
          "shape":"RoleArn",
          "documentation":"<p>The job's service role ARN.</p>"
        },
        "status":{
          "shape":"ReadSetImportJobStatus",
          "documentation":"<p>The job's status.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job was created.</p>"
        }
      }
    },
    "StartReadSetImportJobSourceItem":{
      "type":"structure",
      "required":[
        "sourceFiles",
        "sourceFileType",
        "subjectId",
        "sampleId"
      ],
      "members":{
        "sourceFiles":{
          "shape":"SourceFiles",
          "documentation":"<p>The source files' location in Amazon S3.</p>"
        },
        "sourceFileType":{
          "shape":"FileType",
          "documentation":"<p>The source's file type.</p>"
        },
        "subjectId":{
          "shape":"SubjectId",
          "documentation":"<p>The source's subject ID.</p>"
        },
        "sampleId":{
          "shape":"SampleId",
          "documentation":"<p>The source's sample ID.</p>"
        },
        "generatedFrom":{
          "shape":"GeneratedFrom",
          "documentation":"<p>Where the source originated.</p>"
        },
        "referenceArn":{
          "shape":"ReferenceArn",
          "documentation":"<p>The source's reference ARN.</p>"
        },
        "name":{
          "shape":"ReadSetName",
          "documentation":"<p>The source's name.</p>"
        },
        "description":{
          "shape":"ReadSetDescription",
          "documentation":"<p>The source's description.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>The source's tags.</p>"
        }
      },
      "documentation":"<p>A source for a read set import job.</p>"
    },
    "StartReferenceImportJobRequest":{
      "type":"structure",
      "required":[
        "referenceStoreId",
        "roleArn",
        "sources"
      ],
      "members":{
        "referenceStoreId":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The job's reference store ID.</p>",
          "location":"uri",
          "locationName":"referenceStoreId"
        },
        "roleArn":{
          "shape":"RoleArn",
          "documentation":"<p>A service role for the job.</p>"
        },
        "clientToken":{
          "shape":"ClientToken",
          "documentation":"<p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>"
        },
        "sources":{
          "shape":"StartReferenceImportJobRequestSourcesList",
          "documentation":"<p>The job's source files.</p>"
        }
      }
    },
    "StartReferenceImportJobRequestSourcesList":{
      "type":"list",
      "member":{"shape":"StartReferenceImportJobSourceItem"},
      "max":100,
      "min":1
    },
    "StartReferenceImportJobResponse":{
      "type":"structure",
      "required":[
        "id",
        "referenceStoreId",
        "roleArn",
        "status",
        "creationTime"
      ],
      "members":{
        "id":{
          "shape":"ImportJobId",
          "documentation":"<p>The job's ID.</p>"
        },
        "referenceStoreId":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The job's reference store ID.</p>"
        },
        "roleArn":{
          "shape":"RoleArn",
          "documentation":"<p>The job's service role ARN.</p>"
        },
        "status":{
          "shape":"ReferenceImportJobStatus",
          "documentation":"<p>The job's status.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job was created.</p>"
        }
      }
    },
    "StartReferenceImportJobSourceItem":{
      "type":"structure",
      "required":[
        "sourceFile",
        "name"
      ],
      "members":{
        "sourceFile":{
          "shape":"S3Uri",
          "documentation":"<p>The source file's location in Amazon S3.</p>"
        },
        "name":{
          "shape":"ReferenceName",
          "documentation":"<p>The source's name.</p>"
        },
        "description":{
          "shape":"ReferenceDescription",
          "documentation":"<p>The source's description.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>The source's tags.</p>"
        }
      },
      "documentation":"<p>A source for a reference import job.</p>"
    },
    "StartRunRequest":{
      "type":"structure",
      "required":[
        "roleArn",
        "outputUri",
        "requestId"
      ],
      "members":{
        "workflowId":{
          "shape":"WorkflowId",
          "documentation":"<p>The run's workflow ID. The <code>workflowId</code> is not the UUID.</p>"
        },
        "workflowType":{
          "shape":"WorkflowType",
          "documentation":"<p>The run's workflow type. The <code>workflowType</code> must be specified if you are running a <code>READY2RUN</code> workflow. If you are running a <code>PRIVATE</code> workflow (default), you do not need to include the workflow type. </p>"
        },
        "runId":{
          "shape":"RunId",
          "documentation":"<p>The ID of a run to duplicate.</p>"
        },
        "roleArn":{
          "shape":"RunRoleArn",
          "documentation":"<p>A service role for the run. The <code>roleArn</code> requires access to Amazon Web Services HealthOmics, S3, Cloudwatch logs, and EC2. An example <code>roleArn</code> is <code>arn:aws:iam::123456789012:role/omics-service-role-serviceRole-W8O1XMPL7QZ</code>. In this example, the AWS account ID is <code>123456789012</code> and the role name is <code>omics-service-role-serviceRole-W8O1XMPL7QZ</code>.</p>"
        },
        "name":{
          "shape":"RunName",
          "documentation":"<p>A name for the run. This is recommended to view and organize runs in the Amazon Web Services HealthOmics console and CloudWatch logs.</p>"
        },
        "cacheId":{
          "shape":"NumericIdInArn",
          "documentation":"<p>Identifier of the cache associated with this run. If you don't specify a cache ID, no task outputs are cached for this run.</p>"
        },
        "cacheBehavior":{
          "shape":"CacheBehavior",
          "documentation":"<p>The cache behavior for the run. You specify this value if you want to override the default behavior for the cache. You had set the default value when you created the cache. For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/how-run-cache.html#run-cache-behavior\">Run cache behavior</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>"
        },
        "runGroupId":{
          "shape":"RunGroupId",
          "documentation":"<p>The run's group ID. Use a run group to cap the compute resources (and number of concurrent runs) for the runs that you add to the run group.</p>"
        },
        "priority":{
          "shape":"StartRunRequestPriorityInteger",
          "documentation":"<p>Use the run priority (highest: 1) to establish the order of runs in a run group when you start a run. If multiple runs share the same priority, the run that was initiated first will have the higher priority. Runs that do not belong to a run group can be assigned a priority. The priorities of these runs are ranked among other runs that are not in a run group. For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/creating-run-groups.html#run-priority\">Run priority</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>"
        },
        "parameters":{
          "shape":"RunParameters",
          "documentation":"<p>Parameters for the run. The run needs all required parameters and can include optional parameters. The run cannot include any parameters that are not defined in the parameter template. To retrieve parameters from the run, use the GetRun API operation.</p>"
        },
        "storageCapacity":{
          "shape":"StartRunRequestStorageCapacityInteger",
          "documentation":"<p>The <code>STATIC</code> storage capacity (in gibibytes, GiB) for this run. The default run storage capacity is 1200 GiB. If your requested storage capacity is unavailable, the system rounds up the value to the nearest 1200 GiB multiple. If the requested storage capacity is still unavailable, the system rounds up the value to the nearest 2400 GiB multiple. This field is not required if the storage type is <code>DYNAMIC</code> (the system ignores any value that you enter).</p>"
        },
        "outputUri":{
          "shape":"RunOutputUri",
          "documentation":"<p>An output S3 URI for the run. The S3 bucket must be in the same region as the workflow. The role ARN must have permission to write to this S3 bucket.</p>"
        },
        "logLevel":{
          "shape":"RunLogLevel",
          "documentation":"<p>A log level for the run.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>Tags for the run. You can add up to 50 tags per run. For more information, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/add-a-tag.html\">Adding a tag</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>"
        },
        "requestId":{
          "shape":"RunRequestId",
          "documentation":"<p>An idempotency token used to dedupe retry requests so that duplicate runs are not created.</p>",
          "idempotencyToken":true
        },
        "retentionMode":{
          "shape":"RunRetentionMode",
          "documentation":"<p>The retention mode for the run. The default value is <code>RETAIN</code>. </p> <p>Amazon Web Services HealthOmics stores a fixed number of runs that are available to the console and API. In the default mode (<code>RETAIN</code>), you need to remove runs manually when the number of run exceeds the maximum. If you set the retention mode to <code>REMOVE</code>, Amazon Web Services HealthOmics automatically removes runs (that have mode set to <code>REMOVE</code>) when the number of run exceeds the maximum. All run logs are available in CloudWatch logs, if you need information about a run that is no longer available to the API.</p> <p>For more information about retention mode, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/starting-a-run.html\">Specifying run retention mode</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>"
        },
        "storageType":{
          "shape":"StorageType",
          "documentation":"<p>The storage type for the run. If you set the storage type to <code>DYNAMIC</code>, Amazon Web Services HealthOmics dynamically scales the storage up or down, based on file system utilization. By default, the run uses <code>STATIC</code> storage type, which allocates a fixed amount of storage. For more information about <code>DYNAMIC</code> and <code>STATIC</code> storage, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/workflows-run-types.html\">Run storage types</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>"
        },
        "workflowOwnerId":{
          "shape":"WorkflowOwnerId",
          "documentation":"<p>The 12-digit account ID of the workflow owner that is used for running a shared workflow. The workflow owner ID can be retrieved using the <code>GetShare</code> API operation. If you are the workflow owner, you do not need to include this ID.</p>"
        },
        "workflowVersionName":{
          "shape":"WorkflowVersionName",
          "documentation":"<p>The name of the workflow version. Use workflow versions to track and organize changes to the workflow. If your workflow has multiple versions, the run uses the default version unless you specify a version name. To learn more, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/workflow-versions.html\">Workflow versioning</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>"
        }
      }
    },
    "StartRunRequestPriorityInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":0
    },
    "StartRunRequestStorageCapacityInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":0
    },
    "StartRunResponse":{
      "type":"structure",
      "members":{
        "arn":{
          "shape":"RunArn",
          "documentation":"<p>Unique resource identifier for the run.</p>"
        },
        "id":{
          "shape":"RunId",
          "documentation":"<p>The run's ID.</p>"
        },
        "status":{
          "shape":"RunStatus",
          "documentation":"<p>The run's status.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>The run's tags.</p>"
        },
        "uuid":{
          "shape":"RunUuid",
          "documentation":"<p>The universally unique identifier for a run.</p>"
        },
        "runOutputUri":{
          "shape":"RunOutputUri",
          "documentation":"<p>The destination for workflow outputs.</p>"
        }
      }
    },
    "StartVariantImportRequest":{
      "type":"structure",
      "required":[
        "destinationName",
        "roleArn",
        "items"
      ],
      "members":{
        "destinationName":{
          "shape":"StoreName",
          "documentation":"<p>The destination variant store for the job.</p>"
        },
        "roleArn":{
          "shape":"Arn",
          "documentation":"<p>A service role for the job.</p>"
        },
        "items":{
          "shape":"VariantImportItemSources",
          "documentation":"<p>Items to import.</p>"
        },
        "runLeftNormalization":{
          "shape":"RunLeftNormalization",
          "documentation":"<p>The job's left normalization setting.</p>"
        },
        "annotationFields":{
          "shape":"AnnotationFieldMap",
          "documentation":"<p>The annotation schema generated by the parsed annotation data.</p>"
        }
      }
    },
    "StartVariantImportResponse":{
      "type":"structure",
      "required":["jobId"],
      "members":{
        "jobId":{
          "shape":"ResourceId",
          "documentation":"<p>The job's ID.</p>"
        }
      }
    },
    "StatusList":{
      "type":"list",
      "member":{"shape":"ShareStatus"},
      "max":10,
      "min":1
    },
    "StatusMessage":{
      "type":"string",
      "max":1000,
      "min":0
    },
    "StorageType":{
      "type":"string",
      "enum":[
        "STATIC",
        "DYNAMIC"
      ],
      "max":64,
      "min":1
    },
    "StoreFormat":{
      "type":"string",
      "enum":[
        "GFF",
        "TSV",
        "VCF"
      ]
    },
    "StoreId":{
      "type":"string",
      "max":36,
      "min":10,
      "pattern":"[0-9]+"
    },
    "StoreName":{
      "type":"string",
      "max":255,
      "min":3,
      "pattern":"([a-z]){1}([a-z0-9_]){2,254}"
    },
    "StoreOptions":{
      "type":"structure",
      "members":{
        "tsvStoreOptions":{
          "shape":"TsvStoreOptions",
          "documentation":"<p>File settings for a TSV store.</p>"
        }
      },
      "documentation":"<p>Settings for a store.</p>",
      "union":true
    },
    "StoreStatus":{
      "type":"string",
      "enum":[
        "CREATING",
        "UPDATING",
        "DELETING",
        "ACTIVE",
        "FAILED"
      ]
    },
    "StoreType":{
      "type":"string",
      "enum":[
        "SEQUENCE_STORE",
        "REFERENCE_STORE"
      ]
    },
    "String":{"type":"string"},
    "SubjectId":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "SyntheticTimestamp_date_time":{
      "type":"timestamp",
      "timestampFormat":"iso8601"
    },
    "TagArn":{
      "type":"string",
      "max":150,
      "min":1,
      "pattern":"arn:.+"
    },
    "TagKey":{
      "type":"string",
      "max":128,
      "min":1
    },
    "TagKeyList":{
      "type":"list",
      "member":{"shape":"TagKey"},
      "max":50,
      "min":0
    },
    "TagMap":{
      "type":"map",
      "key":{"shape":"TagKey"},
      "value":{"shape":"TagValue"}
    },
    "TagResourceRequest":{
      "type":"structure",
      "required":[
        "resourceArn",
        "tags"
      ],
      "members":{
        "resourceArn":{
          "shape":"TagArn",
          "documentation":"<p>The resource's ARN.</p>",
          "location":"uri",
          "locationName":"resourceArn"
        },
        "tags":{
          "shape":"TagResourceRequestTagsMap",
          "documentation":"<p>Tags for the resource.</p>"
        }
      }
    },
    "TagResourceRequestTagsMap":{
      "type":"map",
      "key":{"shape":"TagKey"},
      "value":{"shape":"TagValue"},
      "max":50,
      "min":0
    },
    "TagResourceResponse":{
      "type":"structure",
      "members":{
      }
    },
    "TagValue":{
      "type":"string",
      "max":256,
      "min":0
    },
    "TaskFailureReason":{
      "type":"string",
      "max":64,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "TaskId":{
      "type":"string",
      "max":18,
      "min":1,
      "pattern":"[0-9]+"
    },
    "TaskImageDigest":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"sha[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "TaskInstanceType":{
      "type":"string",
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "TaskList":{
      "type":"list",
      "member":{"shape":"TaskListItem"}
    },
    "TaskListItem":{
      "type":"structure",
      "members":{
        "taskId":{
          "shape":"TaskId",
          "documentation":"<p>The task's ID.</p>"
        },
        "status":{
          "shape":"TaskStatus",
          "documentation":"<p>The task's status.</p>"
        },
        "name":{
          "shape":"TaskName",
          "documentation":"<p>The task's name.</p>"
        },
        "cpus":{
          "shape":"TaskListItemCpusInteger",
          "documentation":"<p>The task's CPU count.</p>"
        },
        "cacheHit":{
          "shape":"Boolean",
          "documentation":"<p>Set to true if Amazon Web Services HealthOmics found a matching entry in the run cache for this task.</p>"
        },
        "cacheS3Uri":{
          "shape":"S3UriForBucketOrObject",
          "documentation":"<p>The S3 URI of the cache location.</p>"
        },
        "memory":{
          "shape":"TaskListItemMemoryInteger",
          "documentation":"<p>The task's memory use in gigabyes.</p>"
        },
        "creationTime":{
          "shape":"TaskTimestamp",
          "documentation":"<p>When the task was created.</p>"
        },
        "startTime":{
          "shape":"TaskTimestamp",
          "documentation":"<p>When the task started.</p>"
        },
        "stopTime":{
          "shape":"TaskTimestamp",
          "documentation":"<p>When the task stopped.</p>"
        },
        "gpus":{
          "shape":"TaskListItemGpusInteger",
          "documentation":"<p> The number of Graphics Processing Units (GPU) specified for the task. </p>"
        },
        "instanceType":{
          "shape":"TaskInstanceType",
          "documentation":"<p> The instance type for a task.</p>"
        }
      },
      "documentation":"<p>A workflow run task.</p>"
    },
    "TaskListItemCpusInteger":{
      "type":"integer",
      "box":true,
      "min":1
    },
    "TaskListItemGpusInteger":{
      "type":"integer",
      "box":true,
      "min":0
    },
    "TaskListItemMemoryInteger":{
      "type":"integer",
      "box":true,
      "min":1
    },
    "TaskListToken":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "TaskLogStream":{
      "type":"string",
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "TaskName":{
      "type":"string",
      "max":128,
      "min":1
    },
    "TaskStatus":{
      "type":"string",
      "enum":[
        "PENDING",
        "STARTING",
        "RUNNING",
        "STOPPING",
        "COMPLETED",
        "CANCELLED",
        "FAILED"
      ],
      "max":64,
      "min":1
    },
    "TaskStatusMessage":{
      "type":"string",
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "TaskTimestamp":{
      "type":"timestamp",
      "timestampFormat":"iso8601"
    },
    "ThrottlingException":{
      "type":"structure",
      "required":["message"],
      "members":{
        "message":{"shape":"String"}
      },
      "documentation":"<p>The request was denied due to request throttling.</p>",
      "error":{
        "httpStatusCode":429,
        "senderFault":true
      },
      "exception":true,
      "retryable":{"throttling":true}
    },
    "TsvOptions":{
      "type":"structure",
      "members":{
        "readOptions":{
          "shape":"ReadOptions",
          "documentation":"<p>The file's read options.</p>"
        }
      },
      "documentation":"<p>Formatting options for a TSV file.</p>"
    },
    "TsvStoreOptions":{
      "type":"structure",
      "members":{
        "annotationType":{
          "shape":"AnnotationType",
          "documentation":"<p>The store's annotation type.</p>"
        },
        "formatToHeader":{
          "shape":"FormatToHeader",
          "documentation":"<p>The store's header key to column name mapping.</p>"
        },
        "schema":{
          "shape":"TsvStoreOptionsSchemaList",
          "documentation":"<p>The store's schema.</p>"
        }
      },
      "documentation":"<p>File settings for a TSV store.</p>"
    },
    "TsvStoreOptionsSchemaList":{
      "type":"list",
      "member":{"shape":"SchemaItem"},
      "max":5000,
      "min":1
    },
    "TsvVersionOptions":{
      "type":"structure",
      "members":{
        "annotationType":{
          "shape":"AnnotationType",
          "documentation":"<p> The store version's annotation type. </p>"
        },
        "formatToHeader":{
          "shape":"FormatToHeader",
          "documentation":"<p> The annotation store version's header key to column name mapping. </p>"
        },
        "schema":{
          "shape":"TsvVersionOptionsSchemaList",
          "documentation":"<p> The TSV schema for an annotation store version. </p>"
        }
      },
      "documentation":"<p> The options for a TSV file. </p>"
    },
    "TsvVersionOptionsSchemaList":{
      "type":"list",
      "member":{"shape":"SchemaItem"},
      "max":5000,
      "min":1
    },
    "TypeList":{
      "type":"list",
      "member":{"shape":"ShareResourceType"},
      "max":10,
      "min":1
    },
    "UntagResourceRequest":{
      "type":"structure",
      "required":[
        "resourceArn",
        "tagKeys"
      ],
      "members":{
        "resourceArn":{
          "shape":"TagArn",
          "documentation":"<p>The resource's ARN.</p>",
          "location":"uri",
          "locationName":"resourceArn"
        },
        "tagKeys":{
          "shape":"TagKeyList",
          "documentation":"<p>Keys of tags to remove.</p>",
          "location":"querystring",
          "locationName":"tagKeys"
        }
      }
    },
    "UntagResourceResponse":{
      "type":"structure",
      "members":{
      }
    },
    "UpdateAnnotationStoreRequest":{
      "type":"structure",
      "required":["name"],
      "members":{
        "name":{
          "shape":"String",
          "documentation":"<p>A name for the store.</p>",
          "location":"uri",
          "locationName":"name"
        },
        "description":{
          "shape":"Description",
          "documentation":"<p>A description for the store.</p>"
        }
      }
    },
    "UpdateAnnotationStoreResponse":{
      "type":"structure",
      "required":[
        "id",
        "reference",
        "status",
        "name",
        "description",
        "creationTime",
        "updateTime"
      ],
      "members":{
        "id":{
          "shape":"ResourceId",
          "documentation":"<p>The store's ID.</p>"
        },
        "reference":{
          "shape":"ReferenceItem",
          "documentation":"<p>The store's genome reference.</p>"
        },
        "status":{
          "shape":"StoreStatus",
          "documentation":"<p>The store's status.</p>"
        },
        "name":{
          "shape":"String",
          "documentation":"<p>The store's name.</p>"
        },
        "description":{
          "shape":"Description",
          "documentation":"<p>The store's description.</p>"
        },
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p>When the store was created.</p>"
        },
        "updateTime":{
          "shape":"UpdateTime",
          "documentation":"<p>When the store was updated.</p>"
        },
        "storeOptions":{
          "shape":"StoreOptions",
          "documentation":"<p>Parsing options for the store.</p>"
        },
        "storeFormat":{
          "shape":"StoreFormat",
          "documentation":"<p>The annotation file format of the store.</p>"
        }
      }
    },
    "UpdateAnnotationStoreVersionRequest":{
      "type":"structure",
      "required":[
        "name",
        "versionName"
      ],
      "members":{
        "name":{
          "shape":"String",
          "documentation":"<p> The name of an annotation store. </p>",
          "location":"uri",
          "locationName":"name"
        },
        "versionName":{
          "shape":"String",
          "documentation":"<p> The name of an annotation store version. </p>",
          "location":"uri",
          "locationName":"versionName"
        },
        "description":{
          "shape":"Description",
          "documentation":"<p> The description of an annotation store. </p>"
        }
      }
    },
    "UpdateAnnotationStoreVersionResponse":{
      "type":"structure",
      "required":[
        "storeId",
        "id",
        "status",
        "name",
        "versionName",
        "description",
        "creationTime",
        "updateTime"
      ],
      "members":{
        "storeId":{
          "shape":"ResourceId",
          "documentation":"<p> The annotation store ID. </p>"
        },
        "id":{
          "shape":"ResourceId",
          "documentation":"<p> The annotation store version ID. </p>"
        },
        "status":{
          "shape":"VersionStatus",
          "documentation":"<p> The status of an annotation store version. </p>"
        },
        "name":{
          "shape":"StoreName",
          "documentation":"<p> The name of an annotation store. </p>"
        },
        "versionName":{
          "shape":"VersionName",
          "documentation":"<p> The name of an annotation store version. </p>"
        },
        "description":{
          "shape":"Description",
          "documentation":"<p> The description of an annotation store version. </p>"
        },
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p> The time stamp for when an annotation store version was created. </p>"
        },
        "updateTime":{
          "shape":"UpdateTime",
          "documentation":"<p> The time stamp for when an annotation store version was updated. </p>"
        }
      }
    },
    "UpdateRunCacheRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "cacheBehavior":{
          "shape":"CacheBehavior",
          "documentation":"<p>Update the default run cache behavior.</p>"
        },
        "description":{
          "shape":"UserCustomDescription",
          "documentation":"<p>Update the run cache description.</p>"
        },
        "id":{
          "shape":"RunCacheId",
          "documentation":"<p>The identifier of the run cache you want to update.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "name":{
          "shape":"UserCustomName",
          "documentation":"<p>Update the name of the run cache.</p>"
        }
      }
    },
    "UpdateRunGroupRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"RunGroupId",
          "documentation":"<p>The group's ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "name":{
          "shape":"RunGroupName",
          "documentation":"<p>A name for the group.</p>"
        },
        "maxCpus":{
          "shape":"UpdateRunGroupRequestMaxCpusInteger",
          "documentation":"<p>The maximum number of CPUs to use.</p>"
        },
        "maxRuns":{
          "shape":"UpdateRunGroupRequestMaxRunsInteger",
          "documentation":"<p>The maximum number of concurrent runs for the group.</p>"
        },
        "maxDuration":{
          "shape":"UpdateRunGroupRequestMaxDurationInteger",
          "documentation":"<p>A maximum run time for the group in minutes.</p>"
        },
        "maxGpus":{
          "shape":"UpdateRunGroupRequestMaxGpusInteger",
          "documentation":"<p>The maximum GPUs that can be used by a run group.</p>"
        }
      }
    },
    "UpdateRunGroupRequestMaxCpusInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "UpdateRunGroupRequestMaxDurationInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "UpdateRunGroupRequestMaxGpusInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "UpdateRunGroupRequestMaxRunsInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "UpdateSequenceStoreRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The ID of the sequence store.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "name":{
          "shape":"SequenceStoreName",
          "documentation":"<p>A name for the sequence store.</p>"
        },
        "description":{
          "shape":"SequenceStoreDescription",
          "documentation":"<p>A description for the sequence store.</p>"
        },
        "clientToken":{
          "shape":"ClientToken",
          "documentation":"<p>To ensure that requests don't run multiple times, specify a unique token for each request.</p>",
          "idempotencyToken":true
        },
        "fallbackLocation":{
          "shape":"FallbackLocation",
          "documentation":"<p>The S3 URI of a bucket and folder to store Read Sets that fail to upload.</p>"
        },
        "propagatedSetLevelTags":{
          "shape":"PropagatedSetLevelTags",
          "documentation":"<p>The tags keys to propagate to the S3 objects associated with read sets in the sequence store.</p>"
        },
        "s3AccessConfig":{
          "shape":"S3AccessConfig",
          "documentation":"<p>S3 access configuration parameters.</p>"
        }
      }
    },
    "UpdateSequenceStoreResponse":{
      "type":"structure",
      "required":[
        "id",
        "arn",
        "creationTime"
      ],
      "members":{
        "id":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The ID of the sequence store.</p>"
        },
        "arn":{
          "shape":"SequenceStoreArn",
          "documentation":"<p>The ARN of the sequence store.</p>"
        },
        "name":{
          "shape":"SequenceStoreName",
          "documentation":"<p>The name of the sequence store.</p>"
        },
        "description":{
          "shape":"SequenceStoreDescription",
          "documentation":"<p>Description of the sequence store.</p>"
        },
        "sseConfig":{"shape":"SseConfig"},
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The time when the store was created.</p>"
        },
        "updateTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The last-updated time of the Sequence Store.</p>"
        },
        "propagatedSetLevelTags":{
          "shape":"PropagatedSetLevelTags",
          "documentation":"<p>The tags keys to propagate to the S3 objects associated with read sets in the sequence store.</p>"
        },
        "status":{
          "shape":"SequenceStoreStatus",
          "documentation":"<p>The status of the sequence store.</p>"
        },
        "statusMessage":{
          "shape":"SequenceStoreStatusMessage",
          "documentation":"<p>The status message of the sequence store.</p>"
        },
        "fallbackLocation":{
          "shape":"FallbackLocation",
          "documentation":"<p>The S3 URI of a bucket and folder to store Read Sets that fail to upload.</p>"
        },
        "s3Access":{"shape":"SequenceStoreS3Access"},
        "eTagAlgorithmFamily":{
          "shape":"ETagAlgorithmFamily",
          "documentation":"<p>The ETag algorithm family to use on ingested read sets.</p>"
        }
      }
    },
    "UpdateTime":{
      "type":"timestamp",
      "timestampFormat":"iso8601"
    },
    "UpdateVariantStoreRequest":{
      "type":"structure",
      "required":["name"],
      "members":{
        "name":{
          "shape":"String",
          "documentation":"<p>A name for the store.</p>",
          "location":"uri",
          "locationName":"name"
        },
        "description":{
          "shape":"Description",
          "documentation":"<p>A description for the store.</p>"
        }
      }
    },
    "UpdateVariantStoreResponse":{
      "type":"structure",
      "required":[
        "id",
        "reference",
        "status",
        "name",
        "description",
        "creationTime",
        "updateTime"
      ],
      "members":{
        "id":{
          "shape":"ResourceId",
          "documentation":"<p>The store's ID.</p>"
        },
        "reference":{
          "shape":"ReferenceItem",
          "documentation":"<p>The store's genome reference.</p>"
        },
        "status":{
          "shape":"StoreStatus",
          "documentation":"<p>The store's status.</p>"
        },
        "name":{
          "shape":"String",
          "documentation":"<p>The store's name.</p>"
        },
        "description":{
          "shape":"Description",
          "documentation":"<p>The store's description.</p>"
        },
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p>When the store was created.</p>"
        },
        "updateTime":{
          "shape":"UpdateTime",
          "documentation":"<p>When the store was updated.</p>"
        }
      }
    },
    "UpdateWorkflowRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"WorkflowId",
          "documentation":"<p>The workflow's ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "name":{
          "shape":"WorkflowName",
          "documentation":"<p>A name for the workflow.</p>"
        },
        "description":{
          "shape":"WorkflowDescription",
          "documentation":"<p>A description for the workflow.</p>"
        },
        "storageType":{
          "shape":"StorageType",
          "documentation":"<p>The default storage type for runs that use this workflow. STATIC storage allocates a fixed amount of storage. DYNAMIC storage dynamically scales the storage up or down, based on file system utilization. For more information about static and dynamic storage, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/Using-workflows.html\">Running workflows</a> in the <i>Amazon Web Services HealthOmics User Guide</i>. </p>"
        },
        "storageCapacity":{
          "shape":"UpdateWorkflowRequestStorageCapacityInteger",
          "documentation":"<p>The default static storage capacity (in gibibytes) for runs that use this workflow or workflow version. </p>"
        },
        "readmeMarkdown":{
          "shape":"ReadmeMarkdown",
          "documentation":"<p>The markdown content for the workflow's README file. This provides documentation and usage information for users of the workflow.</p>"
        }
      }
    },
    "UpdateWorkflowRequestStorageCapacityInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":0
    },
    "UpdateWorkflowVersionRequest":{
      "type":"structure",
      "required":[
        "workflowId",
        "versionName"
      ],
      "members":{
        "workflowId":{
          "shape":"WorkflowId",
          "documentation":"<p>The workflow's ID. The <code>workflowId</code> is not the UUID.</p>",
          "location":"uri",
          "locationName":"workflowId"
        },
        "versionName":{
          "shape":"WorkflowVersionName",
          "documentation":"<p>The name of the workflow version.</p>",
          "location":"uri",
          "locationName":"versionName"
        },
        "description":{
          "shape":"WorkflowVersionDescription",
          "documentation":"<p>Description of the workflow version.</p>"
        },
        "storageType":{
          "shape":"StorageType",
          "documentation":"<p>The default storage type for runs that use this workflow version. The <code>storageType</code> can be overridden at run time. <code>DYNAMIC</code> storage dynamically scales the storage up or down, based on file system utilization. STATIC storage allocates a fixed amount of storage. For more information about dynamic and static storage types, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/workflows-run-types.html\">Run storage types</a> in the <i>in the <i>Amazon Web Services HealthOmics User Guide</i> </i>.</p>"
        },
        "storageCapacity":{
          "shape":"UpdateWorkflowVersionRequestStorageCapacityInteger",
          "documentation":"<p>The default static storage capacity (in gibibytes) for runs that use this workflow version. The <code>storageCapacity</code> can be overwritten at run time. The storage capacity is not required for runs with a <code>DYNAMIC</code> storage type.</p>"
        },
        "readmeMarkdown":{
          "shape":"ReadmeMarkdown",
          "documentation":"<p>The markdown content for the workflow version's README file. This provides documentation and usage information for users of this specific workflow version.</p>"
        }
      }
    },
    "UpdateWorkflowVersionRequestStorageCapacityInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":0
    },
    "UploadId":{
      "type":"string",
      "max":36,
      "min":10,
      "pattern":"[0-9]+"
    },
    "UploadReadSetPartRequest":{
      "type":"structure",
      "required":[
        "sequenceStoreId",
        "uploadId",
        "partSource",
        "partNumber",
        "payload"
      ],
      "members":{
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The Sequence Store ID used for the multipart upload.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        },
        "uploadId":{
          "shape":"UploadId",
          "documentation":"<p>The ID for the initiated multipart upload.</p>",
          "location":"uri",
          "locationName":"uploadId"
        },
        "partSource":{
          "shape":"ReadSetPartSource",
          "documentation":"<p>The source file for an upload part.</p>",
          "location":"querystring",
          "locationName":"partSource"
        },
        "partNumber":{
          "shape":"UploadReadSetPartRequestPartNumberInteger",
          "documentation":"<p>The number of the part being uploaded.</p>",
          "location":"querystring",
          "locationName":"partNumber"
        },
        "payload":{
          "shape":"ReadSetPartStreamingBlob",
          "documentation":"<p>The read set data to upload for a part.</p>"
        }
      },
      "payload":"payload"
    },
    "UploadReadSetPartRequestPartNumberInteger":{
      "type":"integer",
      "box":true,
      "max":10000,
      "min":1
    },
    "UploadReadSetPartResponse":{
      "type":"structure",
      "required":["checksum"],
      "members":{
        "checksum":{
          "shape":"String",
          "documentation":"<p>An identifier used to confirm that parts are being added to the intended upload.</p>"
        }
      }
    },
    "UpstreamRepositoryPrefix":{
      "type":"string",
      "max":30,
      "min":2,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "Uri":{
      "type":"string",
      "max":750,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "UserCustomDescription":{
      "type":"string",
      "max":256,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "UserCustomName":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "ValidationException":{
      "type":"structure",
      "required":["message"],
      "members":{
        "message":{"shape":"String"}
      },
      "documentation":"<p>The input fails to satisfy the constraints specified by an AWS service.</p>",
      "error":{
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "VariantImportItemDetail":{
      "type":"structure",
      "required":[
        "source",
        "jobStatus"
      ],
      "members":{
        "source":{
          "shape":"S3Uri",
          "documentation":"<p>The source file's location in Amazon S3.</p>"
        },
        "jobStatus":{
          "shape":"JobStatus",
          "documentation":"<p>The item's job status.</p>"
        },
        "statusMessage":{
          "shape":"JobStatusMsg",
          "documentation":"<p> A message that provides additional context about a job </p>"
        }
      },
      "documentation":"<p>Details about an imported variant item.</p>"
    },
    "VariantImportItemDetails":{
      "type":"list",
      "member":{"shape":"VariantImportItemDetail"},
      "min":1
    },
    "VariantImportItemSource":{
      "type":"structure",
      "required":["source"],
      "members":{
        "source":{
          "shape":"S3Uri",
          "documentation":"<p>The source file's location in Amazon S3.</p>"
        }
      },
      "documentation":"<p>A imported variant item's source.</p>"
    },
    "VariantImportItemSources":{
      "type":"list",
      "member":{"shape":"VariantImportItemSource"},
      "min":1
    },
    "VariantImportJobItem":{
      "type":"structure",
      "required":[
        "id",
        "destinationName",
        "roleArn",
        "status",
        "creationTime",
        "updateTime"
      ],
      "members":{
        "id":{
          "shape":"String",
          "documentation":"<p>The job's ID.</p>"
        },
        "destinationName":{
          "shape":"String",
          "documentation":"<p>The job's destination variant store.</p>"
        },
        "roleArn":{
          "shape":"Arn",
          "documentation":"<p>The job's service role ARN.</p>"
        },
        "status":{
          "shape":"JobStatus",
          "documentation":"<p>The job's status.</p>"
        },
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p>When the job was created.</p>"
        },
        "updateTime":{
          "shape":"UpdateTime",
          "documentation":"<p>When the job was updated.</p>"
        },
        "completionTime":{
          "shape":"CompletionTime",
          "documentation":"<p>When the job completed.</p>"
        },
        "runLeftNormalization":{
          "shape":"RunLeftNormalization",
          "documentation":"<p>The job's left normalization setting.</p>"
        },
        "annotationFields":{
          "shape":"AnnotationFieldMap",
          "documentation":"<p> The annotation schema generated by the parsed annotation data. </p>"
        }
      },
      "documentation":"<p>A variant import job.</p>"
    },
    "VariantImportJobItems":{
      "type":"list",
      "member":{"shape":"VariantImportJobItem"}
    },
    "VariantStoreItem":{
      "type":"structure",
      "required":[
        "id",
        "reference",
        "status",
        "storeArn",
        "name",
        "description",
        "sseConfig",
        "creationTime",
        "updateTime",
        "statusMessage",
        "storeSizeBytes"
      ],
      "members":{
        "id":{
          "shape":"ResourceId",
          "documentation":"<p>The store's ID.</p>"
        },
        "reference":{
          "shape":"ReferenceItem",
          "documentation":"<p>The store's genome reference.</p>"
        },
        "status":{
          "shape":"StoreStatus",
          "documentation":"<p>The store's status.</p>"
        },
        "storeArn":{
          "shape":"Arn",
          "documentation":"<p>The store's ARN.</p>"
        },
        "name":{
          "shape":"String",
          "documentation":"<p>The store's name.</p>"
        },
        "description":{
          "shape":"Description",
          "documentation":"<p>The store's description.</p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>The store's server-side encryption (SSE) settings.</p>"
        },
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p>When the store was created.</p>"
        },
        "updateTime":{
          "shape":"UpdateTime",
          "documentation":"<p>When the store was updated.</p>"
        },
        "statusMessage":{
          "shape":"StatusMessage",
          "documentation":"<p>The store's status message.</p>"
        },
        "storeSizeBytes":{
          "shape":"Long",
          "documentation":"<p>The store's size in bytes.</p>"
        }
      },
      "documentation":"<p>A variant store.</p>"
    },
    "VariantStoreItems":{
      "type":"list",
      "member":{"shape":"VariantStoreItem"}
    },
    "VcfOptions":{
      "type":"structure",
      "members":{
        "ignoreQualField":{
          "shape":"Boolean",
          "documentation":"<p>The file's ignore qual field setting.</p>"
        },
        "ignoreFilterField":{
          "shape":"Boolean",
          "documentation":"<p>The file's ignore filter field setting.</p>"
        }
      },
      "documentation":"<p>Formatting options for a VCF file.</p>"
    },
    "VersionDeleteError":{
      "type":"structure",
      "required":[
        "versionName",
        "message"
      ],
      "members":{
        "versionName":{
          "shape":"VersionName",
          "documentation":"<p> The name given to an annotation store version. </p>"
        },
        "message":{
          "shape":"String",
          "documentation":"<p> The message explaining the error in annotation store deletion. </p>"
        }
      },
      "documentation":"<p> The error preventing deletion of the annotation store version. </p>"
    },
    "VersionDeleteErrorList":{
      "type":"list",
      "member":{"shape":"VersionDeleteError"}
    },
    "VersionList":{
      "type":"list",
      "member":{"shape":"VersionName"},
      "max":10,
      "min":1
    },
    "VersionName":{
      "type":"string",
      "max":255,
      "min":3,
      "pattern":"([a-z]){1}([a-z0-9_]){2,254}"
    },
    "VersionOptions":{
      "type":"structure",
      "members":{
        "tsvVersionOptions":{
          "shape":"TsvVersionOptions",
          "documentation":"<p> File settings for a version of a TSV store. </p>"
        }
      },
      "documentation":"<p> The options for an annotation store version. </p>",
      "union":true
    },
    "VersionStatus":{
      "type":"string",
      "enum":[
        "CREATING",
        "UPDATING",
        "DELETING",
        "ACTIVE",
        "FAILED"
      ]
    },
    "WorkflowArn":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"arn:.+"
    },
    "WorkflowBucketOwnerId":{
      "type":"string",
      "pattern":"[0-9]{12}"
    },
    "WorkflowDefinition":{
      "type":"string",
      "max":256,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "WorkflowDescription":{
      "type":"string",
      "max":256,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "WorkflowDigest":{
      "type":"string",
      "max":64,
      "min":1
    },
    "WorkflowEngine":{
      "type":"string",
      "enum":[
        "WDL",
        "NEXTFLOW",
        "CWL"
      ],
      "max":64,
      "min":1
    },
    "WorkflowExport":{
      "type":"string",
      "enum":[
        "DEFINITION",
        "README"
      ],
      "max":64,
      "min":1
    },
    "WorkflowExportList":{
      "type":"list",
      "member":{"shape":"WorkflowExport"},
      "max":32,
      "min":0
    },
    "WorkflowId":{
      "type":"string",
      "max":18,
      "min":1,
      "pattern":"[0-9]+"
    },
    "WorkflowList":{
      "type":"list",
      "member":{"shape":"WorkflowListItem"}
    },
    "WorkflowListItem":{
      "type":"structure",
      "members":{
        "arn":{
          "shape":"WorkflowArn",
          "documentation":"<p>The workflow's ARN.</p>"
        },
        "id":{
          "shape":"WorkflowId",
          "documentation":"<p>The workflow's ID.</p>"
        },
        "name":{
          "shape":"WorkflowName",
          "documentation":"<p>The workflow's name.</p>"
        },
        "status":{
          "shape":"WorkflowStatus",
          "documentation":"<p>The workflow's status.</p>"
        },
        "type":{
          "shape":"WorkflowType",
          "documentation":"<p>The workflow's type.</p>"
        },
        "digest":{
          "shape":"WorkflowDigest",
          "documentation":"<p>The workflow's digest.</p>"
        },
        "creationTime":{
          "shape":"WorkflowTimestamp",
          "documentation":"<p>When the workflow was created.</p>"
        },
        "metadata":{
          "shape":"WorkflowMetadata",
          "documentation":"<p> Any metadata available for workflow. The information listed may vary depending on the workflow, and there may also be no metadata to return. </p>"
        }
      },
      "documentation":"<p>A workflow.</p>"
    },
    "WorkflowListToken":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "WorkflowMain":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "WorkflowMetadata":{
      "type":"map",
      "key":{"shape":"WorkflowMetadataKey"},
      "value":{"shape":"WorkflowMetadataValue"}
    },
    "WorkflowMetadataKey":{
      "type":"string",
      "max":128,
      "min":1
    },
    "WorkflowMetadataValue":{
      "type":"string",
      "max":256,
      "min":0
    },
    "WorkflowName":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "WorkflowOwnerId":{
      "type":"string",
      "pattern":"[0-9]{12}"
    },
    "WorkflowParameter":{
      "type":"structure",
      "members":{
        "description":{
          "shape":"WorkflowParameterDescription",
          "documentation":"<p>The parameter's description.</p>"
        },
        "optional":{
          "shape":"Boolean",
          "documentation":"<p>Whether the parameter is optional.</p>"
        }
      },
      "documentation":"<p>A workflow parameter.</p>"
    },
    "WorkflowParameterDescription":{
      "type":"string",
      "max":256,
      "min":0,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "WorkflowParameterName":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "WorkflowParameterTemplate":{
      "type":"map",
      "key":{"shape":"WorkflowParameterName"},
      "value":{"shape":"WorkflowParameter"},
      "max":1000,
      "min":1
    },
    "WorkflowRequestId":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "WorkflowStatus":{
      "type":"string",
      "enum":[
        "CREATING",
        "ACTIVE",
        "UPDATING",
        "DELETED",
        "FAILED",
        "INACTIVE"
      ],
      "max":64,
      "min":1
    },
    "WorkflowStatusMessage":{
      "type":"string",
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "WorkflowTimestamp":{
      "type":"timestamp",
      "timestampFormat":"iso8601"
    },
    "WorkflowType":{
      "type":"string",
      "enum":[
        "PRIVATE",
        "READY2RUN"
      ],
      "max":64,
      "min":1
    },
    "WorkflowUuid":{
      "type":"string",
      "pattern":"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
    },
    "WorkflowVersionArn":{
      "type":"string",
      "max":150,
      "min":1,
      "pattern":"arn:.+"
    },
    "WorkflowVersionDescription":{
      "type":"string",
      "max":256,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "WorkflowVersionList":{
      "type":"list",
      "member":{"shape":"WorkflowVersionListItem"}
    },
    "WorkflowVersionListItem":{
      "type":"structure",
      "members":{
        "arn":{
          "shape":"WorkflowVersionArn",
          "documentation":"<p>ARN of the workflow version.</p>"
        },
        "workflowId":{
          "shape":"WorkflowId",
          "documentation":"<p>The workflow's ID.</p>"
        },
        "versionName":{
          "shape":"WorkflowVersionName",
          "documentation":"<p>The name of the workflow version.</p>"
        },
        "description":{
          "shape":"WorkflowVersionDescription",
          "documentation":"<p>The description of the workflow version.</p>"
        },
        "status":{
          "shape":"WorkflowStatus",
          "documentation":"<p>The status of the workflow version.</p>"
        },
        "type":{
          "shape":"WorkflowType",
          "documentation":"<p>The type of the workflow version.</p>"
        },
        "digest":{
          "shape":"WorkflowDigest",
          "documentation":"<p>The digist of the workflow version.</p>"
        },
        "creationTime":{
          "shape":"WorkflowTimestamp",
          "documentation":"<p>The creation time of the workflow version.</p>"
        },
        "metadata":{
          "shape":"WorkflowMetadata",
          "documentation":"<p>Metadata for the workflow version.</p>"
        }
      },
      "documentation":"<p>A list of workflow version items.</p>"
    },
    "WorkflowVersionListToken":{
      "type":"string",
      "max":256,
      "min":1,
      "pattern":"[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
    },
    "WorkflowVersionName":{
      "type":"string",
      "max":64,
      "min":1,
      "pattern":"[A-Za-z0-9][A-Za-z0-9\\-\\._]*"
    }
  },
  "documentation":"<p>Amazon Web Services HealthOmics is a service that helps users such as bioinformaticians, researchers, and scientists to store, query, analyze, and generate insights from genomics and other biological data. It simplifies and accelerates the process of storing and analyzing genomic information for Amazon Web Services.</p> <p>For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/what-is-healthomics.html\">What is Amazon Web Services HealthOmics?</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>"
}
