{
  "name": "ghost-monorepo",
  "version": "0.0.0-private",
  "description": "The professional publishing platform",
  "private": true,
  "repository": "https://github.com/TryGhost/Ghost",
  "author": "Ghost Foundation",
  "license": "MIT",
  "workspaces": [
    "ghost/*",
    "apps/*"
  ],
  "monorepo": {
    "public": false,
    "internalPackages": true,
    "repo": "https://github.com/TryGhost/Ghost",
    "scope": "@tryghost"
  },
  "eslintIgnore": [
    "**/node_modules/**"
  ],
  "scripts": {
    "archive": "nx run ghost:archive",
    "build": "nx run-many -t build",
    "build:clean": "nx reset && rimraf -g 'ghost/*/build' && rimraf -g 'ghost/*/tsconfig.tsbuildinfo'",
    "clean:hard": "node ./.github/scripts/clean.js",
    "dev:debug": "DEBUG_COLORS=true DEBUG=@tryghost*,ghost:* yarn dev",
    "dev:admin": "node .github/scripts/dev.js --admin",
    "dev:ghost": "node .github/scripts/dev.js --ghost",
    "dev": "node .github/scripts/dev.js",
    "fix": "yarn cache clean && rimraf -g '**/node_modules' && yarn && yarn nx reset",
    "knex-migrator": "yarn workspace ghost run knex-migrator",
    "setup": "yarn && git submodule update --init && nx run-many -t build:ts && NODE_ENV=development node .github/scripts/setup.js",
    "reset:data": "cd ghost/core && node index.js generate-data --clear-database --quantities members:100000,posts:500 --seed 123",
    "reset:data:empty": "cd ghost/core && node index.js generate-data --clear-database --quantities members:0,posts:0 --seed 123",
    "reset:data:xxl": "cd ghost/core && node index.js generate-data --clear-database --quantities members:2000000,posts:0,emails:0,members_stripe_customers:0,members_login_events:0,members_status_events:0 --seed 123",
    "docker": "COMPOSE_PROFILES=${COMPOSE_PROFILES:-ghost} docker compose run --rm -it ghost",
    "docker:dev": "COMPOSE_PROFILES=${COMPOSE_PROFILES:-ghost} docker compose up --attach=ghost --force-recreate --no-log-prefix",
    "docker:build": "COMPOSE_PROFILES=${COMPOSE_PROFILES:-ghost} docker compose build",
    "docker:shell": "COMPOSE_PROFILES=${COMPOSE_PROFILES:-ghost} docker compose run --rm -it ghost /bin/bash",
    "docker:sleep": "COMPOSE_PROFILES=${COMPOSE_PROFILES:-ghost} docker compose run -d --name ghost-devcontainer --rm -it ghost /bin/bash -c 'sleep infinity'",
    "docker:sleep:stop": "docker stop ghost-devcontainer",
    "docker:test:unit": "COMPOSE_PROFILES=${COMPOSE_PROFILES:-ghost} docker compose run --rm --no-deps ghost yarn test:unit",
    "docker:test:browser": "COMPOSE_PROFILES=${COMPOSE_PROFILES:-ghost} docker compose run --rm ghost yarn test:browser",
    "docker:test:all": "COMPOSE_PROFILES=${COMPOSE_PROFILES:-ghost} docker compose run --rm ghost yarn nx run ghost:test:all",
    "docker:reset": "docker compose down -v && docker compose up -d --wait",
    "docker:restart": "docker compose down && docker compose up -d --wait",
    "docker:down": "docker compose down",
    "lint": "nx run-many -t lint",
    "test": "nx run-many -t test",
    "test:unit": "nx run-many -t test:unit",
    "test:browser": "node .github/scripts/dev.js --browser-tests --all",
    "main": "yarn main:monorepo && yarn main:submodules",
    "main:monorepo": "git checkout main && git pull ${GHOST_UPSTREAM:-origin} main && yarn",
    "main:submodules": "git submodule sync && git submodule update && git submodule foreach \"git checkout main && git pull ${GHOST_UPSTREAM:-origin} main\"",
    "prepare": "husky install .github/hooks",
    "tb": "docker run --rm -v $(pwd):/ghost -w /ghost/ghost/web-analytics -it tinybirdco/tinybird-cli-docker /bin/bash --init-file /ghost/ghost/web-analytics/entrypoint.sh",
    "tb:update": "docker pull tinybirdco/tinybird-cli-docker",
    "tb:local": "docker start tinybird-local 2>/dev/null || docker run --platform linux/amd64 -p 7181:7181 --name tinybird-local -d tinybirdco/tinybird-local:latest && echo 'Waiting for Tinybird to be ready...' && until curl -s http://localhost:7181/tokens > /dev/null; do sleep 1; done && docker run --rm -v $(pwd):/ghost -w /ghost/ghost/web-analytics -it tinybirdco/tinybird-cli-docker /bin/sh -c '(command -v curl >/dev/null && command -v jq >/dev/null) || (apt-get update && apt-get install -y curl jq) && TOKEN=$(curl -s http://host.docker.internal:7181/tokens | jq -r .workspace_admin_token) && tb auth --host http://host.docker.internal:7181 --token \"$TOKEN\" && /bin/sh'",
    "tb:local:stop": "docker stop tinybird-local && docker rm tinybird-local"
  },
  "resolutions": {
    "@tryghost/errors": "1.3.5",
    "@tryghost/logging": "2.4.21",
    "jackspeak": "2.1.1",
    "moment": "2.24.0",
    "moment-timezone": "0.5.45"
  },
  "renovate": {
    "extends": [
      "github>tryghost/renovate-config:quiet"
    ],
    "rebaseWhen": "never",
    "ignoreDeps": [
      "got",
      "intl-messageformat",
      "moment",
      "moment-timezone",
      "simple-dom",
      "ember-drag-drop",
      "normalize.css",
      "validator",
      "codemirror",
      "faker",
      "ember-cli-code-coverage",
      "ember-cli-terser"
    ],
    "ignorePaths": [
      "test",
      "ghost/admin/lib/koenig-editor/package.json"
    ],
    "packageRules": [
      {
        "groupName": "ember-basic-dropdown addons",
        "packagePatterns": [
          "^ember-basic",
          "^ember-power"
        ]
      },
      {
        "groupName": "ember core",
        "packageNames": [
          "ember-source",
          "ember-cli",
          "ember-data"
        ]
      },
      {
        "groupName": "disable css",
        "matchFiles": [
          "ghost/admin/package.json"
        ],
        "packagePatterns": [
          "^postcss",
          "^css"
        ],
        "packageNames": [
          "autoprefixer",
          "ember-cli-postcss"
        ],
        "enabled": false
      }
    ]
  },
  "lint-staged": {
    "*.js": "eslint"
  },
  "devDependencies": {
    "@actions/core": "1.11.1",
    "chalk": "4.1.2",
    "concurrently": "8.2.2",
    "eslint": "8.57.1",
    "eslint-plugin-ghost": "3.4.0",
    "eslint-plugin-react": "7.37.4",
    "husky": "8.0.3",
    "inquirer": "8.2.6",
    "lint-staged": "15.2.10",
    "nx": "19.8.14",
    "rimraf": "5.0.10",
    "ts-node": "10.9.2",
    "typescript": "5.4.5"
  }
}
