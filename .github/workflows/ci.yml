name: CI
on:
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]
  push:
    branches:
      - main
      - 'v5.*'

env:
  FORCE_COLOR: 1
  HEAD_COMMIT: ${{ github.sha }}
  CACHED_DEPENDENCY_PATHS: |
    ${{ github.workspace }}/node_modules
    ${{ github.workspace }}/apps/*/node_modules
    ${{ github.workspace }}/ghost/*/node_modules
    ~/.cache/ms-playwright/
  CACHED_BUILD_PATHS: |
    ${{ github.workspace }}/ghost/*/build
  NX_REJECT_UNKNOWN_LOCAL_CACHE: 0
  NODE_VERSION: 20.11.1

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  job_setup:
    name: Setup
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      IS_MAIN: ${{ github.ref == 'refs/heads/main' }}
    permissions:
      pull-requests: read
    steps:
      - name: Checkout current commit
        uses: actions/checkout@v4
        with:
          ref: ${{ env.HEAD_COMMIT }}
          fetch-depth: 2

      - name: Output GitHub context
        run: echo "$GITHUB_CONTEXT"
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - name: Get metadata (push)
        if: github.event_name == 'push'
        run: |
          NUMBER_OF_COMMITS=$(printf "%s\n" '${{ toJson(github.event.commits.*.id) }}' | jq length)
          echo "There are $NUMBER_OF_COMMITS commits in this push."
          echo "BASE_COMMIT=$(git rev-parse HEAD~$NUMBER_OF_COMMITS)" >> $GITHUB_ENV

      - name: Get metadata (pull_request)
        if: github.event_name == 'pull_request'
        run: |
          BASE_COMMIT=$(curl --location --request GET 'https://api.github.com/repos/TryGhost/Ghost/pulls/${{ github.event.pull_request.number }}' --header 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r .base.sha)
          echo "Setting BASE_COMMIT to $BASE_COMMIT"
          echo "BASE_COMMIT=$BASE_COMMIT" >> $GITHUB_ENV

      - name: Check user org membership
        id: check_user_org_membership
        if: github.event_name == 'pull_request'
        run: |
          echo "Looking up: ${{ github.triggering_actor }}"
          ENCODED_USERNAME=$(printf '%s' '${{ github.triggering_actor }}' | jq -sRr @uri)

          LOOKUP_USER=$(curl --write-out "%{http_code}" --silent --output /dev/null --location "https://api.github.com/orgs/tryghost/members/$ENCODED_USERNAME" --header "Authorization: Bearer ${{ secrets.CANARY_DOCKER_BUILD }}")

          if [ "$LOOKUP_USER" == "204" ]; then
            echo "User is in the org"
            echo "is_member=true" >> $GITHUB_OUTPUT
          else
            echo "User is not in the org"
            echo "is_member=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine added packages
        uses: dorny/paths-filter@v2.12.0
        id: added
        with:
          filters: |
            new-package:
              - added: 'ghost/**/package.json'

      - name: Determine changed packages
        uses: AurorNZ/paths-filter@v3.0.1
        id: changed
        with:
          filters: |
            shared: &shared
              - '.github/**'
              - 'package.json'
              - 'yarn.lock'
            core:
              - *shared
              - 'ghost/**'
              - '!ghost/admin/**'
              - '!ghost/web-analytics/**'
            admin:
              - *shared
              - 'ghost/admin/**'
            admin-x-settings:
              - *shared
              - 'apps/admin-x-settings/**'
              - 'apps/admin-x-design-system/**'
            announcement-bar:
              - *shared
              - 'apps/announcement-bar/**'
            comments-ui:
              - *shared
              - 'apps/comments-ui/**'
            portal:
              - *shared
              - 'apps/portal/**'
            signup-form:
              - *shared
              - 'apps/signup-form/**'
            sodo-search:
              - *shared
              - 'apps/sodo-search/**'
            tinybird:
              - 'ghost/web-analytics/**'
              - '!ghost/web-analytics/**/*.md'
            any-code:
              - '!**/*.md'

      - name: 'Checkout current commit'
        uses: actions/checkout@v4
        with:
          ref: ${{ env.HEAD_COMMIT }}

      - name: Compute lockfile hash
        run: echo "hash=lockfile-${{ hashFiles('yarn.lock') }}" >> "$GITHUB_ENV"

      - name: Compute dependency cache key
        run: echo "cachekey=dep-cache-${{ hashFiles('yarn.lock') }}-${{ env.HEAD_COMMIT }}" >> "$GITHUB_ENV"

      - name: Compute dependency cache restore key
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "DEPENDENCY_CACHE_RESTORE_KEYS<<$EOF" >> "$GITHUB_ENV"
          echo "dep-cache-${{ env.hash }}-${{ github.sha }}" >> "$GITHUB_ENV"
          echo "dep-cache-${{ env.hash }}" >> "$GITHUB_ENV"
          echo "dep-cache" >> "$GITHUB_ENV"
          echo "$EOF" >> "$GITHUB_ENV"

      - name: Nx cache
        uses: actions/cache@v4
        id: cache_nx
        with:
          path: .nxcache
          key: nx-Linux-${{ github.ref }}-${{ env.HEAD_COMMIT }}
          restore-keys: |
            nx-Linux-${{ github.ref }}-${{ env.HEAD_COMMIT }}
            nx-Linux-${{ github.ref }}
            nx-Linux

      - name: Check dependency cache
        uses: actions/cache@v4
        id: cache_dependencies
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ env.cachekey }}
          restore-keys: ${{ env.IS_MAIN == 'false' && env.DEPENDENCY_CACHE_RESTORE_KEYS || 'dep-never-restore'}}

      - name: Check build cache
        uses: actions/cache@v4
        id: cache_built_packages
        with:
          path: ${{ env.CACHED_BUILD_PATHS }}
          key: ${{ env.HEAD_COMMIT }}

      - name: Set up Node
        uses: actions/setup-node@v4
        env:
          FORCE_COLOR: 0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn

      - name: Install dependencies
        run: yarn install --prefer-offline --frozen-lockfile

      - name: Build packages
        if: steps.cache_built_packages.outputs.cache-hit != 'true'
        run: yarn nx run-many -t build:ts

    outputs:
      changed_admin: ${{ steps.changed.outputs.admin }}
      changed_core: ${{ steps.changed.outputs.core }}
      changed_admin_x_settings: ${{ steps.changed.outputs.admin-x-settings }}
      changed_announcement_bar: ${{ steps.changed.outputs.announcement-bar }}
      changed_comments_ui: ${{ steps.changed.outputs.comments-ui }}
      changed_portal: ${{ steps.changed.outputs.portal }}
      changed_signup_form: ${{ steps.changed.outputs.signup-form }}
      changed_sodo_search: ${{ steps.changed.outputs.sodo-search }}
      changed_tinybird: ${{ steps.changed.outputs.tinybird }}
      changed_any_code: ${{ steps.changed.outputs.any-code }}
      changed_new_package: ${{ steps.added.outputs.new-package }}
      base_commit: ${{ env.BASE_COMMIT }}
      is_main: ${{ env.IS_MAIN }}
      member_is_in_org: ${{ steps.check_user_org_membership.outputs.is_member }}
      has_browser_tests_label: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'browser-tests') }}
      dependency_cache_key: ${{ env.cachekey }}

  job_lint:
    runs-on: ubuntu-latest
    needs: [job_setup]
    if: needs.job_setup.outputs.changed_any_code == 'true'
    name: Lint
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1000
      - uses: actions/setup-node@v4
        env:
          FORCE_COLOR: 0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore caches
        uses: ./.github/actions/restore-cache
        env:
          DEPENDENCY_CACHE_KEY: ${{ needs.job_setup.outputs.dependency_cache_key }}

      - uses: actions/cache@v4
        with:
          path: ghost/**/.eslintcache
          key: eslint-cache

      - run: yarn nx affected -t lint --base=${{ needs.job_setup.outputs.BASE_COMMIT }}

      - uses: tryghost/actions/actions/slack-build@main
        if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          status: ${{ job.status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  job_i18n:
    runs-on: ubuntu-latest
    needs: [job_setup]
    name: i18n
    if: |
        needs.job_setup.outputs.changed_comments_ui == 'true'
        || needs.job_setup.outputs.changed_signup_form == 'true'
        || needs.job_setup.outputs.changed_sodo_search == 'true'
        || needs.job_setup.outputs.changed_portal == 'true'
        || needs.job_setup.outputs.changed_core == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore caches
        uses: ./.github/actions/restore-cache
        env:
          DEPENDENCY_CACHE_KEY: ${{ needs.job_setup.outputs.dependency_cache_key }}

      - name: Run i18n tests
        run: yarn nx run @tryghost/i18n:test

  job_admin-tests:
    runs-on: ubuntu-latest
    needs: [job_setup]
    if: needs.job_setup.outputs.changed_admin == 'true'
    name: Admin tests - Chrome
    env:
      MOZ_HEADLESS: 1
      JOBS: 1
      CI: true
      COVERAGE: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore caches
        uses: ./.github/actions/restore-cache
        env:
          DEPENDENCY_CACHE_KEY: ${{ needs.job_setup.outputs.dependency_cache_key }}

      - run: yarn nx run ghost-admin:test
        env:
          BROWSER: Chrome

      # Merge coverage reports and upload
      - name: Merge Admin test coverage
        run: yarn ember coverage-merge
        working-directory: ghost/admin
      - uses: actions/upload-artifact@v4
        with:
          name: admin-coverage
          path: ghost/*/coverage/cobertura-coverage.xml

      - uses: tryghost/actions/actions/slack-build@main
        if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          status: ${{ job.status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  job_browser-tests:
    name: Browser tests
    timeout-minutes: 60
    runs-on:
      labels: ubuntu-latest
    needs: [job_setup]
    if: needs.job_setup.outputs.changed_any_code == 'true' && (needs.job_setup.outputs.is_main == 'true' || needs.job_setup.outputs.has_browser_tests_label == 'true')
    concurrency:
      group: ${{ github.workflow }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Check secrets
      if: github.event_name == 'pull_request'
      env:
        STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
      run: |
        if [ -z "${{ env.STRIPE_PUBLISHABLE_KEY }}" ]; then
          echo "Stripe Publishable Key is not available. Did you open this PR from a fork?"
          echo "If so, please re-open the PR from a branch in the upstream TryGhost/Ghost repository."
          exit 1
        fi
    - uses: actions/setup-node@v4
      env:
        FORCE_COLOR: 0
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: yarn

    - name: Install Stripe-CLI
      run: |
        export VERSION=1.13.5
        wget "https://github.com/stripe/stripe-cli/releases/download/v$VERSION/stripe_${VERSION}_linux_x86_64.tar.gz"
        tar -zxvf "stripe_${VERSION}_linux_x86_64.tar.gz"
        mv stripe /usr/local/bin
        stripe -v

    - name: Restore caches
      uses: ./.github/actions/restore-cache
      env:
        DEPENDENCY_CACHE_KEY: ${{ needs.job_setup.outputs.dependency_cache_key }}

    - name: Run migrations
      working-directory: ghost/core
      run: yarn knex-migrator init

    - name: Get Playwright version
      id: playwright-version
      run: echo "version=$(node -p "require('@playwright/test/package.json').version")" >> $GITHUB_OUTPUT
    - uses: actions/cache@v4
      name: Check if Playwright browser is cached
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-Playwright-${{steps.playwright-version.outputs.version}}
    - name: Install Playwright browser if not cached
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install --with-deps
    - name: Install OS dependencies of Playwright if cache hit
      if: steps.playwright-cache.outputs.cache-hit == 'true'
      run: npx playwright install-deps

    - name: Build Admin
      run: yarn nx run ghost-admin:build:dev

    - name: Run Playwright tests locally
      run: yarn test:browser
      env:
        CI: true
        STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
        STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}

    - uses: tryghost/actions/actions/slack-build@main
      if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
      with:
        status: ${{ job.status }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: browser-tests-playwright-report
        path: ghost/core/playwright-report
        retention-days: 30

  job_perf-tests:
    runs-on:
      labels: ubuntu-latest-4-cores
    needs: [job_setup]
    if: needs.job_setup.outputs.changed_core == 'true' && needs.job_setup.outputs.is_main == 'true'
    name: Performance tests
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/setup-node@v4
        env:
          FORCE_COLOR: 0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore caches
        uses: ./.github/actions/restore-cache
        env:
          DEPENDENCY_CACHE_KEY: ${{ needs.job_setup.outputs.dependency_cache_key }}

      - name: Install hyperfine
        run: |
          export HYPERFINE_VERSION=1.18.0
          wget https://github.com/sharkdp/hyperfine/releases/download/v$HYPERFINE_VERSION/hyperfine-v$HYPERFINE_VERSION-x86_64-unknown-linux-gnu.tar.gz
          tar -zxvf hyperfine-v$HYPERFINE_VERSION-x86_64-unknown-linux-gnu.tar.gz
          mv hyperfine-v$HYPERFINE_VERSION-x86_64-unknown-linux-gnu/hyperfine /usr/local/bin
          chmod +x /usr/local/bin/hyperfine

      - name: Build TS code
        run: yarn nx run-many -t build:tsc

      - name: Run hyperfine on boot
        working-directory: ghost/core
        run: hyperfine --show-output --warmup 3 'GHOST_CI_SHUTDOWN_AFTER_BOOT=1 node index.js' --export-json boot-perf.json

      - name: Convert data
        working-directory: ghost/core
        run: |
          jq '[{ name: "Boot time", unit: "s", value: .results[0].median, range: ((.results[0].max - .results[0].min) | tostring) }]' < boot-perf.json > boot-perf-formatted.json

      - name: Run analysis
        uses: benchmark-action/github-action-benchmark@v1.20.4
        with:
          tool: 'customSmallerIsBetter'
          output-file-path: ghost/core/boot-perf-formatted.json
          benchmark-data-dir-path: ""
          gh-repository: github.com/TryGhost/Ghost-Benchmarks
          github-token: ${{ secrets.CANARY_DOCKER_BUILD }}
          auto-push: true

  job_unit-tests:
    runs-on: ubuntu-latest
    needs: [job_setup]
    if: needs.job_setup.outputs.changed_any_code == 'true'
    strategy:
      matrix:
        node: [ '18.12.1', '20.11.1', '22.13.1' ]
    name: Unit tests (Node ${{ matrix.node }})
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1000
      - uses: actions/setup-node@v4
        env:
          FORCE_COLOR: 0
        with:
          node-version: ${{ matrix.node }}

      - name: Restore caches
        uses: ./.github/actions/restore-cache
        env:
          DEPENDENCY_CACHE_KEY: ${{ needs.job_setup.outputs.dependency_cache_key }}

      - name: Set timezone (non-UTC)
        uses: szenius/set-timezone@v1.2
        with:
          timezoneLinux: "America/New_York"

      # Ensure all built packages are built before running tests (admin is built in job_setup)
      - name: Build remaining assets
        run: yarn nx run-many -t build --exclude=ghost-admin

      - run: yarn nx affected -t test:unit --base=${{ needs.job_setup.outputs.BASE_COMMIT }}

      - uses: actions/upload-artifact@v4
        if: startsWith(matrix.node, '18')
        with:
          name: unit-coverage
          path: ghost/*/coverage/cobertura-coverage.xml

      - uses: tryghost/actions/actions/slack-build@main
        if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          status: ${{ job.status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  job_database-tests:
    runs-on: ubuntu-latest
    needs: [job_setup]
    if: needs.job_setup.outputs.changed_core == 'true'
    strategy:
      matrix:
        node: [ '18.12.1', '20.11.1', '22.13.1' ]
        env:
          - DB: mysql8
            NODE_ENV: testing-mysql
        include:
          - node: 20.11.1
            env:
              DB: sqlite3
              NODE_ENV: testing
    env:
      DB: ${{ matrix.env.DB }}
      NODE_ENV: ${{ matrix.env.NODE_ENV }}
    name: Database tests (Node ${{ matrix.node }}, ${{ matrix.env.DB }})
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        env:
          FORCE_COLOR: 0
        with:
          node-version: ${{ matrix.node }}

      - name: Shutdown MySQL
        run: sudo service mysql stop
        if: matrix.env.DB == 'mysql8'

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: tryghost/mysql-action@main
        if: matrix.env.DB == 'mysql8'
        timeout-minutes: 3
        with:
          authentication plugin: 'caching_sha2_password'
          mysql version: '8.0'
          mysql database: 'ghost_testing'
          mysql root password: 'root'

      - name: Restore caches
        uses: ./.github/actions/restore-cache
        env:
          DEPENDENCY_CACHE_KEY: ${{ needs.job_setup.outputs.dependency_cache_key }}

      - name: Set timezone (non-UTC)
        uses: szenius/set-timezone@v1.2
        with:
          timezoneLinux: "America/New_York"

      - name: Record start time
        run: date +%s > ${{ runner.temp }}/startTime # Get start time for test suite

      - name: Set env vars (SQLite)
        if: contains(matrix.env.DB, 'sqlite')
        run: echo "database__connection__filename=/dev/shm/ghost-test.db" >> $GITHUB_ENV

      - name: Set env vars (MySQL)
        if: contains(matrix.env.DB, 'mysql')
        run: echo "database__connection__password=root" >> $GITHUB_ENV

      - name: E2E tests
        working-directory: ghost/core
        run: yarn test:ci:e2e

      - name: Integration tests
        working-directory: ghost/core
        run: yarn test:ci:integration

      # Get runtime in seconds for test suite
      - name: Record test duration
        run: |
          startTime="$(cat ${{ runner.temp }}/startTime)"
          endTime="$(date +%s)"
          echo "test_time=$(($endTime-$startTime))" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        if: startsWith(matrix.node, '18') && contains(matrix.env.DB, 'mysql')
        with:
          name: e2e-coverage
          path: |
            ghost/*/coverage-e2e/cobertura-coverage.xml
            ghost/*/coverage-integration/cobertura-coverage.xml
            ghost/*/coverage-regression/cobertura-coverage.xml

      # Continue on error if TailScale service is down
      - name: Tailscale Action
        timeout-minutes: 2
        continue-on-error: true
        if: (github.event_name == 'push' && github.repository_owner == 'TryGhost') || (github.event_name == 'pull_request' && startsWith(github.head_ref, 'TryGhost/'))
        uses: tailscale/github-action@v1
        with:
          authkey: ${{ secrets.TAILSCALE_AUTHKEY }}

      # Report time taken to metrics service
      # Continue on error if previous TailScale step fails
      - name: Store test duration
        uses: tryghost/actions/actions/trigger-metric@main
        timeout-minutes: 1
        continue-on-error: true
        if: (github.event_name == 'push' && github.repository_owner == 'TryGhost') || (github.event_name == 'pull_request' && startsWith(github.head_ref, 'TryGhost/'))
        with:
          metricName: 'test-time'
          metricValue: ${{ env.test_time }}
          configuration: |
            {
              "metrics": {
                "transports": ["elasticsearch"],
                "metadata": {
                  "database": "${{ matrix.env.DB }}",
                  "node": "${{ matrix.node }}"
                }
              },
              "elasticsearch": {
                "host": "${{ secrets.ELASTICSEARCH_HOST }}",
                "username": "${{ secrets.ELASTICSEARCH_USERNAME }}",
                "password": "${{ secrets.ELASTICSEARCH_PASSWORD }}"
              }
            }

      - uses: tryghost/actions/actions/slack-build@main
        if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          status: ${{ job.status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  job_regression-tests:
    runs-on: ubuntu-latest
    needs: [job_setup]
    if: needs.job_setup.outputs.changed_core == 'true'
    strategy:
      matrix:
        include:
          - node: 20.11.1
            env:
              DB: mysql8
              NODE_ENV: testing-mysql
          - node: 20.11.1
            env:
              DB: sqlite3
              NODE_ENV: testing
    env:
      DB: ${{ matrix.env.DB }}
      NODE_ENV: ${{ matrix.env.NODE_ENV }}
    name: Regression tests (Node ${{ matrix.node }}, ${{ matrix.env.DB }})
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/setup-node@v4
        env:
          FORCE_COLOR: 0
        with:
          node-version: ${{ matrix.node }}

      - name: Shutdown MySQL
        run: sudo service mysql stop
        if: matrix.env.DB == 'mysql8'

      - uses: tryghost/mysql-action@main
        if: matrix.env.DB == 'mysql8'
        timeout-minutes: 3
        with:
          authentication plugin: 'caching_sha2_password'
          mysql version: '8.0'
          mysql database: 'ghost_testing'
          mysql root password: 'root'

      - name: Restore caches
        uses: ./.github/actions/restore-cache
        env:
          DEPENDENCY_CACHE_KEY: ${{ needs.job_setup.outputs.dependency_cache_key }}

      - name: Set env vars (SQLite)
        if: contains(matrix.env.DB, 'sqlite')
        run: echo "database__connection__filename=/dev/shm/ghost-test.db" >> $GITHUB_ENV

      - name: Set env vars (MySQL)
        if: contains(matrix.env.DB, 'mysql')
        run: echo "database__connection__password=root" >> $GITHUB_ENV

      - name: Regression tests
        working-directory: ghost/core
        run: yarn test:ci:regression

      - uses: tryghost/actions/actions/slack-build@main
        if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          status: ${{ job.status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  job_admin_x_settings:
    runs-on: ubuntu-latest
    needs: [job_setup]
    if: needs.job_setup.outputs.changed_admin_x_settings == 'true'
    name: Admin-X Settings tests
    env:
      CI: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        env:
          FORCE_COLOR: 0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore caches
        uses: ./.github/actions/restore-cache
        env:
          DEPENDENCY_CACHE_KEY: ${{ needs.job_setup.outputs.dependency_cache_key }}

      - name: Get Playwright version
        id: playwright-version
        run: echo "version=$(node -p "require('@playwright/test/package.json').version")" >> $GITHUB_OUTPUT
      - uses: actions/cache@v4
        name: Check if Playwright browser is cached
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-Playwright-${{steps.playwright-version.outputs.version}}
      - name: Install Playwright browser if not cached
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps
      - name: Install OS dependencies of Playwright if cache hit
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: npx playwright install-deps

      - run: yarn nx run @tryghost/admin-x-settings:test:acceptance

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: admin-x-settings-playwright-report
          path: apps/admin-x-settings/playwright-report
          retention-days: 30

      - uses: tryghost/actions/actions/slack-build@main
        if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          status: ${{ job.status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  job_comments_ui:
    runs-on: ubuntu-latest
    needs: [job_setup]
    if: needs.job_setup.outputs.changed_comments_ui == 'true'
    name: Comments-UI tests
    env:
      CI: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        env:
          FORCE_COLOR: 0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore caches
        uses: ./.github/actions/restore-cache
        env:
          DEPENDENCY_CACHE_KEY: ${{ needs.job_setup.outputs.dependency_cache_key }}

      - name: Get Playwright version
        id: playwright-version
        run: echo "version=$(node -p "require('@playwright/test/package.json').version")" >> $GITHUB_OUTPUT
      - uses: actions/cache@v4
        name: Check if Playwright browser is cached
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-Playwright-${{steps.playwright-version.outputs.version}}
      - name: Install Playwright browser if not cached
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps
      - name: Install OS dependencies of Playwright if cache hit
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: npx playwright install-deps

      - run: yarn nx run @tryghost/comments-ui:test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: comments-ui-playwright-report
          path: apps/comments-ui/playwright-report
          retention-days: 30

      - uses: tryghost/actions/actions/slack-build@main
        if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          status: ${{ job.status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  job_signup_form:
    runs-on: ubuntu-latest
    needs: [job_setup]
    if: needs.job_setup.outputs.changed_signup_form == 'true'
    name: Signup-form tests
    env:
      CI: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        env:
          FORCE_COLOR: 0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore caches
        uses: ./.github/actions/restore-cache
        env:
          DEPENDENCY_CACHE_KEY: ${{ needs.job_setup.outputs.dependency_cache_key }}

      - name: Get Playwright version
        id: playwright-version
        run: echo "version=$(node -p "require('@playwright/test/package.json').version")" >> $GITHUB_OUTPUT
      - uses: actions/cache@v4
        name: Check if Playwright browser is cached
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-Playwright-${{steps.playwright-version.outputs.version}}
      - name: Install Playwright browser if not cached
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps
      - name: Install OS dependencies of Playwright if cache hit
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: npx playwright install-deps

      - run: yarn nx run @tryghost/signup-form:test:e2e

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: signup-form-playwright-report
          path: apps/signup-form/playwright-report
          retention-days: 30

      - uses: tryghost/actions/actions/slack-build@main
        if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          status: ${{ job.status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  job_tinybird:
    name: Tinybird Tests (Web Analytics)
    runs-on: ubuntu-latest
    needs: [
      job_setup
    ]
    defaults:
      run:
        working-directory: ghost/web-analytics
    if: needs.job_setup.outputs.changed_tinybird == 'true'
    steps:
      - name: Get User Permission
        id: get-user-permission
        uses: actions-cool/check-user-permission@v2
        with:
          require: write
          username: ${{ github.triggering_actor }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Check User Permission
        id: check-user-permission
        if: steps.get-user-permission.outputs.require-result == 'false'
        run: |
          echo "${{ github.triggering_actor }} does not have permissions on this repo."
          echo "Current permission level is ${{ steps.get-user-permission.outputs.user-permission }}"
          echo "Job originally triggered by ${{ github.actor }}"
          exit 1
      - name: Checkout current commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 300
      - name: Lint datasources and pipes
        run: |
          ./scripts/lint.sh
      - name: Check secrets
        if: github.event_name == 'pull_request'
        env:
          TB_ADMIN_TOKEN: ${{ secrets.TB_ADMIN_TOKEN_STAGING }}
        run: |
          if [ -z "${{ env.TB_ADMIN_TOKEN }}" ]; then
            echo "Tinybird admin token is not available. Did you open this PR from a fork?"
            echo "If so, please re-open the PR from a branch in the upstream TryGhost/Ghost repository."
            exit 1
          fi
      - uses: actions/setup-python@v5
        with:
          python-version: 3.11
          architecture: "x64"
          cache: "pip"
      - name: Set environment variables
        run: |
          _ENV_FLAGS="${ENV_FLAGS:=--wait}"
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            TB_BRANCH_NAME="tmp_ci_pr_${{ github.event.pull_request.number }}"
          else
            TB_BRANCH_NAME="tmp_ci_main_$(echo ${{ github.sha }} | cut -c1-7)"
          fi
          GIT_BRANCH=${GITHUB_HEAD_REF}
          echo "GIT_BRANCH=$GIT_BRANCH" >> $GITHUB_ENV
          echo "_ENV_FLAGS=$_ENV_FLAGS" >> $GITHUB_ENV
          echo "TB_BRANCH_NAME=$TB_BRANCH_NAME" >> $GITHUB_ENV
      - name: Install Tinybird CLI
        run: |
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            pip install tinybird-cli
          fi
      - name: Tinybird CLI Version
        run: tb --version
      - name: Check all the datafiles syntax
        run: tb check
      - name: Check auth
        run: tb --host=${{ secrets.TB_HOST }} --token=${{ secrets.TB_ADMIN_TOKEN_STAGING }} auth info
      - name: Try to delete previous Branch
        run: |
          output=$(tb --host ${{ secrets.TB_HOST }} --token ${{ secrets.TB_ADMIN_TOKEN_STAGING }} branch ls)
          # Check if the branch name exists in the output
          if echo "$output" | grep -q "\b$TB_BRANCH_NAME\b"; then
            tb \
            --host ${{ secrets.TB_HOST }} \
            --token ${{ secrets.TB_ADMIN_TOKEN_STAGING }} \
            branch rm $TB_BRANCH_NAME \
            --yes
          else
            echo "Skipping clean up: The Branch '$TB_BRANCH_NAME' does not exist."
          fi
      - name: Create new test Branch with data
        run: |
          tb \
          --host ${{ secrets.TB_HOST }} \
          --token ${{ secrets.TB_ADMIN_TOKEN_STAGING }} \
          branch create $TB_BRANCH_NAME \
          ${_ENV_FLAGS}
      - name: Deploy changes to the test Branch
        run: |
          source .tinyenv
          DEPLOY_FILE=./deploy/${VERSION}/deploy.sh
          if [ ! -f "$DEPLOY_FILE" ]; then
            echo "$DEPLOY_FILE not found, running default tb deploy command"
            tb deploy
            tb release ls
          fi
      - name: Custom deployment to the test Branch
        run: |
          source .tinyenv
          DEPLOY_FILE=./deploy/${VERSION}/deploy.sh
          if [ -f "$DEPLOY_FILE" ]; then
              echo "$DEPLOY_FILE found"
              if ! [ -x "$DEPLOY_FILE" ]; then
                echo "Error: You do not have permission to execute '$DEPLOY_FILE'. Run:"
                echo "> chmod +x $DEPLOY_FILE"
                echo "and commit your changes"
                exit 1
              else
                $DEPLOY_FILE
              fi
          fi
      - name: Append fixtures
        run: |
          if [ -f ./scripts/append_fixtures.sh ]; then
          echo "append_fixtures script found"
          ./scripts/append_fixtures.sh
          fi
      - name: Run fixture tests
        run: |
          if [ -f ./scripts/exec_test.sh ]; then
          ./scripts/exec_test.sh
          fi

      - name: Try to delete previous Branch
        if: always()
        run: |
          output=$(tb --host ${{ secrets.TB_HOST }} --token ${{ secrets.TB_ADMIN_TOKEN_STAGING }} branch ls)
          # Check if the branch name exists in the output
          if echo "$output" | grep -q "\b$TB_BRANCH_NAME\b"; then
            tb \
                --host ${{ secrets.TB_HOST }} \
                --token ${{ secrets.TB_ADMIN_TOKEN_STAGING }} \
                branch rm $TB_BRANCH_NAME \
                --yes
          else
            echo "Skipping clean up: The Branch '$TB_BRANCH_NAME' does not exist."
          fi

  job_ghost-cli:
    name: Ghost-CLI tests
    needs: [job_setup]
    if: needs.job_setup.outputs.changed_core == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true
      - uses: actions/setup-node@v4
        env:
          FORCE_COLOR: 0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install npm v8 # downgrade from v10 to v8 due to https://github.com/npm/cli/issues/6738
        run: npm install -g npm@8

      - name: Install Ghost-CLI
        run: npm install -g ghost-cli@latest

      - name: Restore caches
        uses: ./.github/actions/restore-cache
        env:
          DEPENDENCY_CACHE_KEY: ${{ needs.job_setup.outputs.dependency_cache_key }}

      - run: node .github/scripts/bump-version.js canary

      - run: yarn archive

      - run: mv ghost-*.tgz ghost.tgz
        working-directory: ghost/core

      - name: Switch back to Node v16.14.0 (for v4)
        uses: actions/setup-node@v4
        env:
          FORCE_COLOR: 0
        with:
          node-version: '16.14.0'

      - name: Install latest v4
        run: |
          DIR=$(mktemp -d)
          echo "V4_DIR=$DIR" >> $GITHUB_ENV
          ghost install v4 --local -d $DIR

      - name: Switch back to ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        env:
          FORCE_COLOR: 0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Update from v4
        run: |
          ghost update -f -d $V4_DIR --archive $(pwd)/ghost/core/ghost.tgz

      - name: Save Ghost CLI Debug Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ghost-cli-debug-logs
          path: /home/runner/.ghost/logs/

      - name: Clean Install
        run: |
          DIR=$(mktemp -d)
          ghost install local -d $DIR --archive $(pwd)/ghost/core/ghost.tgz

      - name: Latest Release
        run: |
          DIR=$(mktemp -d)
          ghost install local -d $DIR
          ghost update -d $DIR --archive $(pwd)/ghost/core/ghost.tgz

      - name: Print debug logs
        if: failure()
        run: |
          [ -f ~/.ghost/logs/*.log ] && cat ~/.ghost/logs/*.log

      - uses: tryghost/actions/actions/slack-build@main
        if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          status: ${{ job.status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  job_coverage:
    name: Coverage
    needs: [
      job_admin-tests,
      job_database-tests,
      job_unit-tests
    ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Restore Admin coverage
        if: contains(needs.job_admin-tests.result, 'success')
        uses: actions/download-artifact@v4
        with:
          name: admin-coverage

      - name: Move coverage
        if: contains(needs.job_admin-tests.result, 'success')
        run: |
          rsync -av --remove-source-files admin/* ghost/admin

      - name: Upload Admin test coverage
        uses: codecov/codecov-action@v3
        with:
          flags: admin-tests
          move_coverage_to_trash: true

      - name: Restore E2E coverage
        if: contains(needs.job_database-tests.result, 'success')
        uses: actions/download-artifact@v4
        with:
          name: e2e-coverage

      - name: Move coverage
        if: contains(needs.job_database-tests.result, 'success')
        run: |
          rsync -av --remove-source-files core/* ghost/core

      - name: Upload E2E test coverage
        if: contains(needs.job_database-tests.result, 'success')
        uses: codecov/codecov-action@v3
        with:
          flags: e2e-tests
          move_coverage_to_trash: true

  job_required_tests:
    name: All required tests passed or skipped
    needs:
      [
        job_setup,
        job_lint,
        job_i18n,
        job_ghost-cli,
        job_admin-tests,
        job_unit-tests,
        job_database-tests,
        job_regression-tests,
        job_browser-tests,
        job_admin_x_settings,
        job_comments_ui,
        job_signup_form,
        job_tinybird
      ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Output needs
        run: echo "${{ toJson(needs) }}"

      - name: Check if any required jobs failed or been cancelled
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: |
          echo "One of the dependent jobs have failed or been cancelled. You may need to re-run it." && exit 1

  canary:
    needs: [
      job_setup,
      job_required_tests
    ]
    name: Canary
    runs-on: ubuntu-latest
    if: |
      always()
      && needs.job_setup.result == 'success'
      && needs.job_required_tests.result == 'success'
      && (
        needs.job_setup.outputs.is_main == 'true'
        || (
          github.event_name == 'pull_request'
          && (
            needs.job_setup.outputs.member_is_in_org == 'true'
            || github.event.pull_request.user.login == 'renovate[bot]'
          )
          && contains(github.event.pull_request.labels.*.name, 'deploy-to-staging')
        )
      )
    steps:
      - name: Output needs (for debugging)
        run: echo "${{ toJson(needs) }}"

      - name: Compute branch name (push)
        if: github.event_name == 'push'
        run: echo "branch_name=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Compute branch name (pull_request)
        if: github.event_name == 'pull_request'
        run: echo "branch_name=${{ github.ref }}" >> $GITHUB_ENV

      - name: Invoke build
        uses: aurelien-baudet/workflow-dispatch@v2
        with:
          token: ${{ secrets.CANARY_DOCKER_BUILD }}
          workflow: .github/workflows/deploy.yml
          ref: 'refs/heads/main'
          repo: TryGhost/Ghost-Moya
          inputs: '{"version":"canary","environment":"staging","version_extra":"${{ env.branch_name }}"}'
          wait-for-completion-timeout: 25m
          wait-for-completion-interval: 30s

  publish_packages:
    needs: [
      job_setup,
      job_lint,
      job_unit-tests
    ]
    name: Publish ${{ matrix.package_name }}
    runs-on: ubuntu-latest
    if: always() && needs.job_setup.result == 'success' && needs.job_lint.result == 'success' && needs.job_unit-tests.result == 'success' && needs.job_setup.outputs.is_main == 'true'
    strategy:
      matrix:
        include:
          - package_name: '@tryghost/admin-x-activitypub'
            package_path: 'apps/admin-x-activitypub'
            cdn_paths: 'https://cdn.jsdelivr.net/ghost/admin-x-activitypub@0/dist/admin-x-activitypub.js'
          - package_name: '@tryghost/portal'
            package_path: 'apps/portal'
            cdn_paths: 'https://cdn.jsdelivr.net/ghost/portal@~CURRENT_MINOR/umd/portal.min.js'
          - package_name: '@tryghost/sodo-search'
            package_path: 'apps/sodo-search'
            cdn_paths: |
              'https://cdn.jsdelivr.net/ghost/sodo-search@~CURRENT_MINOR/umd/sodo-search.min.js'
              'https://cdn.jsdelivr.net/ghost/sodo-search@~CURRENT_MINOR/umd/main.css'
          - package_name: '@tryghost/comments-ui'
            package_path: 'apps/comments-ui'
            cdn_paths: 'https://cdn.jsdelivr.net/ghost/comments-ui@~CURRENT_MINOR/umd/comments-ui.min.js'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore caches
        uses: ./.github/actions/restore-cache
        env:
          DEPENDENCY_CACHE_KEY: ${{ needs.job_setup.outputs.dependency_cache_key }}

      - name: Check if version changed
        id: version_check
        working-directory: ${{ matrix.package_path }}
        run: |
          CURRENT_VERSION=$(cat package.json | jq -r .version)
          PUBLISHED_VERSION=$(npm show ${{ matrix.package_name }} version || echo "0.0.0")
          echo "Current version: $CURRENT_VERSION"
          echo "Published version: $PUBLISHED_VERSION"

          CURRENT_MINOR=$(cat package.json | jq -r .version | awk -F. '{print $1"."$2}')
          echo "current_minor=$CURRENT_MINOR" >> $GITHUB_OUTPUT

          if [ "$CURRENT_VERSION" = "$PUBLISHED_VERSION" ]; then
            echo "Version is unchanged."
            echo "version_changed=false" >> $GITHUB_OUTPUT
          else
            echo "Version has changed."
            echo "version_changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Build the package
        if: steps.version_check.outputs.version_changed == 'true'
        run: yarn run nx build ${{ matrix.package_name }}

      - name: Configure .npmrc
        if: steps.version_check.outputs.version_changed == 'true'
        run: |
          echo "@tryghost:registry=https://registry.npmjs.org/" >> ~/.npmrc
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc

      - name: Publish to npm
        if: steps.version_check.outputs.version_changed == 'true'
        working-directory: ${{ matrix.package_path }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public

      - name: Replace CURRENT_MINOR in cdn-paths
        id: cdn_paths
        if: steps.version_check.outputs.version_changed == 'true'
        run: |
          cdn_paths="${{ matrix.cdn_paths }}"
          echo "cdn_paths<<EOF" >> $GITHUB_OUTPUT
          echo "$cdn_paths" | sed 's/CURRENT_MINOR/${{ steps.version_check.outputs.current_minor }}/g' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Print cdn_paths
        if: steps.version_check.outputs.version_changed == 'true'
        run: echo "${{ steps.cdn_paths.outputs.cdn_paths }}"

      - name: Purge jsdelivr cache
        if: steps.version_check.outputs.version_changed == 'true'
        uses: gacts/purge-jsdelivr-cache@v1
        with:
          url: ${{ steps.cdn_paths.outputs.cdn_paths }}
  deploy_tinybird:
    runs-on: ubuntu-latest
    needs: [
      job_setup,
      job_tinybird
    ]
    if: always() && needs.job_setup.outputs.changed_tinybird == 'true' && needs.job_setup.result == 'success' && needs.job_tinybird.result == 'success' && needs.job_setup.outputs.is_main == 'true'
    strategy:
      matrix:
        environment: [ 'staging', 'production']
    name: Deploy Tinybird
    defaults:
      run:
        working-directory: ghost/web-analytics
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 300
          submodules: true
      - uses: actions/setup-python@v5
        with:
          python-version: 3.11
          architecture: "x64"
          cache: "pip"
      - name: Install Tinybird CLI
        run: |
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            pip install tinybird-cli
          fi
      - name: Tinybird version
        run: tb --version
      - name: Check auth (staging)
        if: matrix.environment == 'staging'
        run: tb --host=${{ secrets.TB_HOST }} --token=${{ secrets.TB_ADMIN_TOKEN_STAGING }} auth info
      - name: Check auth (production)
        if: matrix.environment == 'production'
        run: tb --host=${{ secrets.TB_HOST }} --token=${{ secrets.TB_ADMIN_TOKEN_PRODUCTION }} auth info
      - name: Deploy changes to the main Workspace
        run: |
          source .tinyenv
          DEPLOY_FILE=./deploy/${VERSION}/deploy.sh
          if [ ! -f "$DEPLOY_FILE" ]; then
            echo "$DEPLOY_FILE not found, running default tb push command"
            tb branch current
            tb deploy
          fi
      - name: Custom deployment to the main Workspace
        run: |
            source .tinyenv
            DEPLOY_FILE=./deploy/${VERSION}/deploy.sh
            if [ -f "$DEPLOY_FILE" ]; then
              echo "$DEPLOY_FILE found"
              if ! [ -x "$DEPLOY_FILE" ]; then
                  echo "Error: You don't have permission to execute '$DEPLOY_FILE'. Run:"
                  echo "> chmod +x $DEPLOY_FILE"
                  echo "and commit your changes"
                  exit 1
              else
                  $DEPLOY_FILE
              fi
            fi
