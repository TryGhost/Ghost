name: CI (Docker)
on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]
  push:
    # Ref: GHA Filter pattern syntax: https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#filter-pattern-cheat-sheet
    # Run on pushes to main, release branches, and previous/future major version branches
    branches:
      - main
      - 'v[0-9]+.*' # Matches any release branch, e.g. v6.0.3, v12.1.0
      - '[0-9]+.x' # Matches any major version branch, e.g. 5.x, 23.x

jobs:
  build:
    name: Build & Push
    runs-on: ubuntu-latest-16-cores
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

        # We can't access secrets from forks, so we can't push to the registry
        # Instead, we upload the image as an artifact, and download it in downstream jobs
      - name: Determine build strategy
        id: strategy
        run: |
          IS_FORK_PR="false"
          if [ "${{ github.event_name }}" = "pull_request" ] && [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
            IS_FORK_PR="true"
          fi
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/ghost-development"
          if [ "$IS_FORK_PR" = "true" ]; then
            IMAGE_NAME="ghcr.io/${{ github.event.pull_request.head.repo.owner.login }}/ghost-development"
          fi
          CACHE_KEY=$(echo $IMAGE_NAME | tr '[:upper:]' '[:lower:]')
          echo "is-fork-pr=$IS_FORK_PR" >> $GITHUB_OUTPUT
          echo "should-push=$( [ "$IS_FORK_PR" = "false" ] && echo "true" || echo "false" )" >> $GITHUB_OUTPUT
          echo "should-load=$( [ "$IS_FORK_PR" = "true" ] && echo "true" || echo "false" )" >> $GITHUB_OUTPUT
          echo "image-name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "cache-key=$CACHE_KEY" >> $GITHUB_OUTPUT
          echo "Build Strategy: "
          echo "  Is fork PR: $IS_FORK_PR"
          echo "  Should push: $( [ "$IS_FORK_PR" = "false" ] && echo "true" || echo "false" )"
          echo "  Should load: $( [ "$IS_FORK_PR" = "true" ] && echo "true" || echo "false" )"
          echo "  Image name: $IMAGE_NAME"
          echo "  Cache key: $CACHE_KEY"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ steps.strategy.outputs.image-name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Ghost Development
            org.opencontainers.image.description=Ghost development build
            org.opencontainers.image.vendor=TryGhost
            maintainer=TryGhost

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        id: build
        with:
          context: .
          file: .docker/Dockerfile
          push: ${{ steps.strategy.outputs.should-push }}
          load: ${{ steps.strategy.outputs.should-load }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # On PRs: use both main cache and PR-specific cache
          # On main: only use main cache
          cache-from: |
            type=registry,ref=${{ steps.strategy.outputs.cache-key }}:cache-main
            ${{ github.event_name == 'pull_request' && format('type=registry,ref={0}:cache-pr-{1}', steps.strategy.outputs.cache-key, github.event.pull_request.number) || '' }}
          # Only export cache if we can push (not on fork PRs)
          cache-to: ${{ steps.strategy.outputs.should-push == 'true' && format('type=registry,ref={0}:cache-{1},mode=max', steps.strategy.outputs.cache-key, github.event_name == 'pull_request' && format('pr-{0}', github.event.pull_request.number) || 'main') || '' }}

      - name: Save image as artifact (fork PR)
        if: steps.strategy.outputs.is-fork-pr == 'true'
        run: |
          # Get the first tag from the multi-line tags output
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Saving image: $IMAGE_TAG"
          docker save "$IMAGE_TAG" | gzip > docker-image.tar.gz
          echo "Image saved as docker-image.tar.gz"
          ls -lh docker-image.tar.gz

      - name: Upload image artifact (fork PR)
        if: steps.strategy.outputs.is-fork-pr == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: docker-image.tar.gz
          retention-days: 1

    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      is-fork: ${{ steps.strategy.outputs.is-fork-pr }}

  inspect_image:
    name: Inspect Docker Image
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/load-docker-image

      - name: Load Docker Image
        id: load
        uses: ./.github/actions/load-docker-image
        with:
          is-fork: ${{ needs.build.outputs.is-fork }}
          image-tags: ${{ needs.build.outputs.image-tags }}

      - name: Inspect image size and layers
        shell: bash
        run: |
          IMAGE_TAG="${{ steps.load.outputs.image-tag }}"
          echo "Analyzing Docker image: $IMAGE_TAG"

          # Start the GitHub Step Summary
          {
            echo "# 🐳 Docker Image Analysis Report"
            echo ""

            # Image Metadata Section
            echo "## 📋 Image Metadata"
            echo ""
            echo "| Property | Value |"
            echo "|----------|-------|"
            echo "| **Image** | \`$IMAGE_TAG\` |"

            # Get image digest
            DIGEST=$(docker inspect "$IMAGE_TAG" --format='{{index .RepoDigests 0}}' 2>/dev/null || echo "N/A")
            if [ "$DIGEST" != "N/A" ] && [ "$DIGEST" != "" ]; then
              DIGEST=$(echo "$DIGEST" | cut -d'@' -f2)
              echo "| **Digest** | \`${DIGEST:0:12}...\` |"
            fi

            # Get creation date
            CREATED=$(docker inspect "$IMAGE_TAG" --format='{{.Created}}' | cut -d'T' -f1-2 | tr 'T' ' ')
            echo "| **Created** | $CREATED UTC |"

            # Get architecture
            ARCH=$(docker inspect "$IMAGE_TAG" --format='{{.Architecture}}')
            OS=$(docker inspect "$IMAGE_TAG" --format='{{.Os}}')
            echo "| **Architecture** | $OS/$ARCH |"

            # Get all tags from build output
            TAGS="${{ needs.build.outputs.image-tags }}"
            if [ -n "$TAGS" ]; then
              # Convert multi-line tags to comma-separated list
              TAGS_LIST=$(echo "$TAGS" | sed 's/.*://g' | paste -sd', ' -)
              echo "| **Tags** | $TAGS_LIST |"
            fi

            echo ""

            # Size Analysis Section
            echo "## 📊 Size Analysis"
            echo ""
            echo "| Metric | Value |"
            echo "|--------|-------|"

            # Get uncompressed size
            UNCOMPRESSED_SIZE=$(docker inspect "$IMAGE_TAG" --format='{{.Size}}')
            UNCOMPRESSED_MB=$(echo "scale=1; $UNCOMPRESSED_SIZE / 1024 / 1024" | bc)
            UNCOMPRESSED_GB=$(echo "scale=2; $UNCOMPRESSED_SIZE / 1024 / 1024 / 1024" | bc)

            if (( $(echo "$UNCOMPRESSED_GB < 1" | bc -l) )); then
              echo "| **Image Size** | ${UNCOMPRESSED_MB} MB |"
            else
              echo "| **Image Size** | ${UNCOMPRESSED_GB} GB |"
            fi

            # Count total layers
            TOTAL_LAYERS=$(docker history "$IMAGE_TAG" --no-trunc --format "{{.CreatedBy}}" | wc -l)
            echo "| **Total Layers** | $TOTAL_LAYERS |"

            # Calculate base image size (approximate - first FROM layer)
            BASE_SIZE=$(docker history "$IMAGE_TAG" --no-trunc --format "{{.Size}}:{{.CreatedBy}}" | grep -E "FROM|ADD file:" | tail -1 | cut -d':' -f1)
            if [ -n "$BASE_SIZE" ] && [ "$BASE_SIZE" != "0B" ]; then
              echo "| **Base Image Size** | $BASE_SIZE |"
            fi

            echo ""

            # Top 10 Layers Section
            echo "## 🧩 Top 10 Layers by Size"
            echo ""
            echo "| # | Size | Command |"
            echo "|---|------|---------|"

            # Get layers sorted by size (excluding 0B layers)
            docker history "$IMAGE_TAG" --no-trunc --format "{{.Size}}•{{.CreatedBy}}" | \
            grep -v "^0B•" | \
            while IFS='•' read -r size cmd; do
              # Convert size to bytes for sorting
              size_bytes=0
              if [[ $size == *GB ]]; then
                size_num=$(echo "$size" | sed 's/GB//')
                size_bytes=$(echo "$size_num * 1024 * 1024 * 1024" | bc | cut -d'.' -f1)
              elif [[ $size == *MB ]]; then
                size_num=$(echo "$size" | sed 's/MB//')
                size_bytes=$(echo "$size_num * 1024 * 1024" | bc | cut -d'.' -f1)
              elif [[ $size == *kB ]]; then
                size_num=$(echo "$size" | sed 's/kB//')
                size_bytes=$(echo "$size_num * 1024" | bc | cut -d'.' -f1)
              elif [[ $size == *B ]]; then
                size_bytes=$(echo "$size" | sed 's/B//')
              fi

              # Truncate command for display
              cmd_display=$(echo "$cmd" | sed 's/^\/bin\/sh -c //' | sed 's/^#(nop) //' | cut -c1-80)
              if [ ${#cmd} -gt 80 ]; then
                cmd_display="${cmd_display}..."
              fi

              echo "${size_bytes}•${size}•${cmd_display}"
            done | \
            sort -t'•' -k1 -rn | \
            head -10 | \
            awk -F'•' 'BEGIN{n=1} {printf "| %d | **%s** | `%s` |\n", n++, $2, $3}'

            echo ""

            # Collapsible section for all layers
            echo "<details>"
            echo "<summary>View all $TOTAL_LAYERS layers</summary>"
            echo ""
            echo "| Size | Created By |"
            echo "|------|------------|"

            docker history "$IMAGE_TAG" --no-trunc --format "{{.Size}}•{{.CreatedBy}}" | \
            while IFS='•' read -r size cmd; do
              # Truncate command for display
              cmd_display=$(echo "$cmd" | sed 's/^\/bin\/sh -c //' | sed 's/^#(nop) //' | cut -c1-100)
              if [ ${#cmd} -gt 100 ]; then
                cmd_display="${cmd_display}..."
              fi
              echo "| $size | \`$cmd_display\` |"
            done

            echo ""
            echo "</details>"
            echo ""

            echo "---"
            echo "*Generated at: $(date -u '+%Y-%m-%d %H:%M:%S') UTC | Workflow: ${{ github.workflow }} | Run: #${{ github.run_number }}*"

          } >> $GITHUB_STEP_SUMMARY

          echo "✅ Docker image analysis complete. View the summary in the GitHub Actions Summary tab."
