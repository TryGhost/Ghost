name: Docker Build

on:
  # Allow manual triggering
  workflow_dispatch:
  pull_request:
    types: [labeled, opened, synchronize, reopened]
  push:
    # Ref: GHA Filter pattern syntax: https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#filter-pattern-cheat-sheet
    # Run on pushes to main, release branches, and previous/future major version branches
    branches:
      - main
      - 'v[0-9]+.*' # Matches any release branch, e.g. v6.0.3, v12.1.0
      - '[0-9]+.x' # Matches any major version branch, e.g. 5.x, 23.x

jobs:
  build:
    runs-on: ubuntu-latest-16-cores

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Calculate cache image name
        id: cache
        run: |
          OWNER_LOWER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')
          echo "image=ghcr.io/${OWNER_LOWER}/ghost-test" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # List of Docker images to use as base name for tags
          images: |
            ghcr.io/${{ github.repository_owner }}/ghost-test
          # Generate tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
          # Set labels
          labels: |
            org.opencontainers.image.title=Ghost Development
            org.opencontainers.image.description=Ghost development build
            org.opencontainers.image.vendor=TryGhost
            maintainer=TryGhost

      - name: Display Docker metadata
        run: |
          echo "Generated tags:"
          echo "${{ steps.meta.outputs.tags }}"
          echo ""
          echo "Generated labels:"
          echo "${{ steps.meta.outputs.labels }}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        id: build
        with:
          context: .
          file: .docker/Dockerfile
          # Only push on main branch or PRs from the main repo (not forks)
          push: ${{ github.event_name != 'pull_request' || github.pull_request.head.repo.fork == "false" }}
          # Only load image on PRs from forks (to allow testing without pushing)
          load: ${{ github.event_name == 'pull_request' && github.pull_request.head.repo.fork == "true" }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # On PRs: use both main cache and PR-specific cache
          # On main: only use main cache
          cache-from: |
            type=registry,ref=${{ steps.cache.outputs.image }}:cache-main
            ${{ github.event_name == 'pull_request' && format('type=registry,ref={0}:cache-pr-{1}', steps.cache.outputs.image, github.event.pull_request.number) || '' }}
          cache-to: |
            type=registry,ref=${{ steps.cache.outputs.image }}:cache-${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.pull_request.number) || 'main' }},mode=max

    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      is-fork: ${{ github.event_name == 'pull_request' && github.pull_request.head.repo.fork == "true" }}
  test:
    needs: build
    runs-on: ubuntu-latest-16-cores

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: needs.build.outputs.is-fork == 'false'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract first image tag
        id: image
        run: |
          TAGS="${{ needs.build.outputs.image-tags }}"
          FIRST_TAG=$(echo "$TAGS" | head -n1)
          echo "tag=$FIRST_TAG" >> $GITHUB_OUTPUT
          echo "Using image tag: $FIRST_TAG"

      - name: Pull image from registry (main repo/branch)
        if: needs.build.outputs.is-fork == 'false'
        run: |
          echo "Pulling image from registry..."
          docker pull ${{ steps.image.outputs.tag }}

      - name: List available images (fork PR)
        if: needs.build.outputs.is-fork == 'true'
        run: |
          echo "Images loaded locally:"
          docker images
          echo "Looking for image: ${{ steps.image.outputs.tag }}"

      - name: Verify image is available
        run: |
          if docker inspect ${{ steps.image.outputs.tag }} > /dev/null 2>&1; then
            echo "✅ Image ${{ steps.image.outputs.tag }} is available"
          else
            echo "❌ Image ${{ steps.image.outputs.tag }} is not available"
            echo "Available images:"
            docker images
            exit 1
          fi

      - name: Test container
        run: |
          echo "Testing container..."
          # Run a basic test - replace with your actual tests
          docker run --rm ${{ steps.image.outputs.tag }} node --version

          # Example: Run your application's health check or tests
          # docker run --rm -p 2368:2368 ${{ steps.image.outputs.tag }} &
          # sleep 5
          # curl -f http://localhost:2368 || exit 1

      - name: Show container logs (on failure)
        if: failure()
        run: |
          echo "Showing recent container logs..."
          docker ps -a
          # Show logs from the most recent container if needed
          CONTAINER_ID=$(docker ps -lq)
          if [ ! -z "$CONTAINER_ID" ]; then
            docker logs $CONTAINER_ID
          fi
